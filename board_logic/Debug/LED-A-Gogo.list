
LED-A-Gogo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006768  08006768  00007768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006898  08006898  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006898  08006898  00007898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a0  080068a0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068a4  080068a4  000078a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000005e0  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000648  20000648  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001809f  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f56  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  00023090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105d  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020451  00000000  00000000  000255c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a59d  00000000  00000000  00045a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff52  00000000  00000000  0005ffb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ff05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006448  00000000  00000000  0011ff48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  00126390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006750 	.word	0x08006750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006750 	.word	0x08006750

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fdee 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f822 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f9a2 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000290:	f000 f882 	bl	8000398 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000294:	f000 f8c0 	bl	8000418 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000298:	f000 f97a 	bl	8000590 <MX_USB_PCD_Init>
  MX_UART5_Init();
 800029c:	f000 f948 	bl	8000530 <MX_UART5_Init>
  MX_TIM2_Init();
 80002a0:	f000 f8f8 	bl	8000494 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	4907      	ldr	r1, [pc, #28]	@ (80002c4 <main+0x44>)
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <main+0x48>)
 80002aa:	f003 fe54 	bl	8003f56 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80002ae:	4807      	ldr	r0, [pc, #28]	@ (80002cc <main+0x4c>)
 80002b0:	f003 f948 	bl	8003544 <HAL_TIM_Base_Start_IT>
  srand(HAL_GetTick());
 80002b4:	f000 fe30 	bl	8000f18 <HAL_GetTick>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f005 f866 	bl	800538c <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x40>
 80002c4:	200004e4 	.word	0x200004e4
 80002c8:	20000188 	.word	0x20000188
 80002cc:	2000013c 	.word	0x2000013c

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b09e      	sub	sp, #120	@ 0x78
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 f9e7 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	223c      	movs	r2, #60	@ 0x3c
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f005 f9d9 	bl	80056b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000300:	2303      	movs	r3, #3
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000304:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000308:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000320:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000324:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fb1a 	bl	8001964 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000336:	f000 fabb 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800034a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000354:	2101      	movs	r1, #1
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fb12 	bl	8002980 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000362:	f000 faa5 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <SystemClock_Config+0xc4>)
 8000368:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000372:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000376:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fd12 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000386:	f000 fa93 	bl	80008b0 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3778      	adds	r7, #120	@ 0x78
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	00020030 	.word	0x00020030

08000398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <MX_I2C1_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	@ (8000410 <MX_I2C1_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <MX_I2C1_Init+0x74>)
 80003a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000414 <MX_I2C1_Init+0x7c>)
 80003a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_I2C1_Init+0x74>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_I2C1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_I2C1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d2:	480e      	ldr	r0, [pc, #56]	@ (800040c <MX_I2C1_Init+0x74>)
 80003d4:	f001 f8cc 	bl	8001570 <HAL_I2C_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003de:	f000 fa67 	bl	80008b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4809      	ldr	r0, [pc, #36]	@ (800040c <MX_I2C1_Init+0x74>)
 80003e6:	f001 f95e 	bl	80016a6 <HAL_I2CEx_ConfigAnalogFilter>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f0:	f000 fa5e 	bl	80008b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f4:	2100      	movs	r1, #0
 80003f6:	4805      	ldr	r0, [pc, #20]	@ (800040c <MX_I2C1_Init+0x74>)
 80003f8:	f001 f9a0 	bl	800173c <HAL_I2CEx_ConfigDigitalFilter>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000402:	f000 fa55 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000084 	.word	0x20000084
 8000410:	40005400 	.word	0x40005400
 8000414:	2000090e 	.word	0x2000090e

08000418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <MX_SPI1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	@ (8000490 <MX_SPI1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <MX_SPI1_Init+0x74>)
 8000424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x74>)
 8000432:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	@ (800048c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x74>)
 8000446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_SPI1_Init+0x74>)
 800044e:	2208      	movs	r2, #8
 8000450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x74>)
 8000472:	2208      	movs	r2, #8
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_SPI1_Init+0x74>)
 8000478:	f002 fe42 	bl	8003100 <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 fa15 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200000d8 	.word	0x200000d8
 8000490:	40013000 	.word	0x40013000

08000494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <MX_TIM2_Init+0x98>)
 80004b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80004ba:	4b1c      	ldr	r3, [pc, #112]	@ (800052c <MX_TIM2_Init+0x98>)
 80004bc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80004c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <MX_TIM2_Init+0x98>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_TIM2_Init+0x98>)
 80004ca:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80004ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <MX_TIM2_Init+0x98>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_TIM2_Init+0x98>)
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004dc:	4813      	ldr	r0, [pc, #76]	@ (800052c <MX_TIM2_Init+0x98>)
 80004de:	f002 ffda 	bl	8003496 <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004e8:	f000 f9e2 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <MX_TIM2_Init+0x98>)
 80004fa:	f003 f98f 	bl	800381c <HAL_TIM_ConfigClockSource>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000504:	f000 f9d4 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	@ (800052c <MX_TIM2_Init+0x98>)
 8000516:	f003 fba9 	bl	8003c6c <HAL_TIMEx_MasterConfigSynchronization>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000520:	f000 f9c6 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000013c 	.word	0x2000013c

08000530 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000534:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <MX_UART5_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <MX_UART5_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800053a:	4b13      	ldr	r3, [pc, #76]	@ (8000588 <MX_UART5_Init+0x58>)
 800053c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000540:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	@ (8000588 <MX_UART5_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <MX_UART5_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <MX_UART5_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	@ (8000588 <MX_UART5_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <MX_UART5_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <MX_UART5_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <MX_UART5_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <MX_UART5_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <MX_UART5_Init+0x58>)
 8000574:	f003 fc18 	bl	8003da8 <HAL_UART_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f997 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000188 	.word	0x20000188
 800058c:	40005000 	.word	0x40005000

08000590 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000594:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 8000596:	4a0e      	ldr	r2, [pc, #56]	@ (80005d0 <MX_USB_PCD_Init+0x40>)
 8000598:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 800059c:	2208      	movs	r2, #8
 800059e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_USB_PCD_Init+0x3c>)
 80005ba:	f001 f90b 	bl	80017d4 <HAL_PCD_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005c4:	f000 f974 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000210 	.word	0x20000210
 80005d0:	40005c00 	.word	0x40005c00

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ea:	4b3d      	ldr	r3, [pc, #244]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a3c      	ldr	r2, [pc, #240]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 80005f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b3a      	ldr	r3, [pc, #232]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b37      	ldr	r3, [pc, #220]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a36      	ldr	r2, [pc, #216]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a30      	ldr	r2, [pc, #192]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a24      	ldr	r2, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0x10c>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800067a:	2200      	movs	r2, #0
 800067c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000680:	4818      	ldr	r0, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0x110>)
 8000682:	f000 ff5d 	bl	8001540 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000686:	2337      	movs	r3, #55	@ 0x37
 8000688:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800068a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0x110>)
 800069c:	f000 fdd6 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006a0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80006a4:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_GPIO_Init+0x110>)
 80006ba:	f000 fdc7 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 fdba 	bl	800124c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3730      	adds	r7, #48	@ 0x30
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48001000 	.word	0x48001000

080006e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a47      	ldr	r2, [pc, #284]	@ (8000814 <HAL_UART_RxCpltCallback+0x12c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	f040 8087 	bne.w	800080a <HAL_UART_RxCpltCallback+0x122>
		*/

        static uint8_t i = 0;
        static char rx_buffer[10];

        if (rx_byte != '\n' && rx_byte != '\r' && i < sizeof(rx_buffer) - 1)
 80006fc:	4b46      	ldr	r3, [pc, #280]	@ (8000818 <HAL_UART_RxCpltCallback+0x130>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d013      	beq.n	800072c <HAL_UART_RxCpltCallback+0x44>
 8000704:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <HAL_UART_RxCpltCallback+0x130>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b0d      	cmp	r3, #13
 800070a:	d00f      	beq.n	800072c <HAL_UART_RxCpltCallback+0x44>
 800070c:	4b43      	ldr	r3, [pc, #268]	@ (800081c <HAL_UART_RxCpltCallback+0x134>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b08      	cmp	r3, #8
 8000712:	d80b      	bhi.n	800072c <HAL_UART_RxCpltCallback+0x44>
        {
            rx_buffer[i++] = rx_byte;
 8000714:	4b41      	ldr	r3, [pc, #260]	@ (800081c <HAL_UART_RxCpltCallback+0x134>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	b2d1      	uxtb	r1, r2
 800071c:	4a3f      	ldr	r2, [pc, #252]	@ (800081c <HAL_UART_RxCpltCallback+0x134>)
 800071e:	7011      	strb	r1, [r2, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <HAL_UART_RxCpltCallback+0x130>)
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <HAL_UART_RxCpltCallback+0x138>)
 8000728:	5499      	strb	r1, [r3, r2]
 800072a:	e069      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
        }
        else
        {
            rx_buffer[i] = '\0';
 800072c:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <HAL_UART_RxCpltCallback+0x134>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b3b      	ldr	r3, [pc, #236]	@ (8000820 <HAL_UART_RxCpltCallback+0x138>)
 8000734:	2100      	movs	r1, #0
 8000736:	5499      	strb	r1, [r3, r2]
            i = 0;
 8000738:	4b38      	ldr	r3, [pc, #224]	@ (800081c <HAL_UART_RxCpltCallback+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]

            uint8_t valid_command = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]

            if (rx_buffer[1] != '\0')
 8000742:	4b37      	ldr	r3, [pc, #220]	@ (8000820 <HAL_UART_RxCpltCallback+0x138>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_UART_RxCpltCallback+0x68>
            {
                valid_command = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
            }
            else
            {
                switch (rx_buffer[0])
 8000750:	4b33      	ldr	r3, [pc, #204]	@ (8000820 <HAL_UART_RxCpltCallback+0x138>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3b30      	subs	r3, #48	@ 0x30
 8000756:	2b08      	cmp	r3, #8
 8000758:	d84f      	bhi.n	80007fa <HAL_UART_RxCpltCallback+0x112>
 800075a:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <HAL_UART_RxCpltCallback+0x78>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	08000785 	.word	0x08000785
 8000764:	0800078b 	.word	0x0800078b
 8000768:	08000799 	.word	0x08000799
 800076c:	080007a7 	.word	0x080007a7
 8000770:	080007b5 	.word	0x080007b5
 8000774:	080007c3 	.word	0x080007c3
 8000778:	080007d1 	.word	0x080007d1
 800077c:	080007df 	.word	0x080007df
 8000780:	080007ed 	.word	0x080007ed
                {
                    case '0':
                        turn_off_led();
 8000784:	f000 f852 	bl	800082c <turn_off_led>
                        /*	[FOR DEBUGGING PURPOSES]
                        {
                            char complete_msg[] = "Game complete!!\r\n";
                            HAL_UART_Transmit(&huart5, (uint8_t*)complete_msg, strlen(complete_msg), 100);
                        }*/
                        break;
 8000788:	e03a      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>

                    case '1': HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET); break;
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000790:	4824      	ldr	r0, [pc, #144]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 8000792:	f000 fed5 	bl	8001540 <HAL_GPIO_WritePin>
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '2': HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET); break;
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079e:	4821      	ldr	r0, [pc, #132]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007a0:	f000 fece 	bl	8001540 <HAL_GPIO_WritePin>
 80007a4:	e02c      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '3': HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET); break;
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	481d      	ldr	r0, [pc, #116]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007ae:	f000 fec7 	bl	8001540 <HAL_GPIO_WritePin>
 80007b2:	e025      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '4': HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET); break;
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ba:	481a      	ldr	r0, [pc, #104]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007bc:	f000 fec0 	bl	8001540 <HAL_GPIO_WritePin>
 80007c0:	e01e      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '5': HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET); break;
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c8:	4816      	ldr	r0, [pc, #88]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007ca:	f000 feb9 	bl	8001540 <HAL_GPIO_WritePin>
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '6': HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET); break;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007d8:	f000 feb2 	bl	8001540 <HAL_GPIO_WritePin>
 80007dc:	e010      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '7': HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET); break;
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007e6:	f000 feab 	bl	8001540 <HAL_GPIO_WritePin>
 80007ea:	e009      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>
                    case '8': HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET); break;
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <HAL_UART_RxCpltCallback+0x13c>)
 80007f4:	f000 fea4 	bl	8001540 <HAL_GPIO_WritePin>
 80007f8:	e002      	b.n	8000800 <HAL_UART_RxCpltCallback+0x118>

                    default:
                        valid_command = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
                        break;
 80007fe:	bf00      	nop
				HAL_UART_Transmit(&huart5, (uint8_t*)ok, strlen(ok), 100);
            }
            */
        }

        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	4905      	ldr	r1, [pc, #20]	@ (8000818 <HAL_UART_RxCpltCallback+0x130>)
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <HAL_UART_RxCpltCallback+0x140>)
 8000806:	f003 fba6 	bl	8003f56 <HAL_UART_Receive_IT>
    }
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40005000 	.word	0x40005000
 8000818:	200004e4 	.word	0x200004e4
 800081c:	200004e5 	.word	0x200004e5
 8000820:	200004e8 	.word	0x200004e8
 8000824:	48001000 	.word	0x48001000
 8000828:	20000188 	.word	0x20000188

0800082c <turn_off_led>:


void turn_off_led(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin|
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000836:	4802      	ldr	r0, [pc, #8]	@ (8000840 <turn_off_led+0x14>)
 8000838:	f000 fe82 	bl	8001540 <HAL_GPIO_WritePin>
                            LD7_Pin|LD8_Pin|LD9_Pin|LD10_Pin, GPIO_PIN_RESET);
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	48001000 	.word	0x48001000

08000844 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000854:	d122      	bne.n	800089c <HAL_TIM_PeriodElapsedCallback+0x58>
    {
        uint32_t random_number= rand() % 100;	//random number
 8000856:	f004 fdc7 	bl	80053e8 <rand>
 800085a:	4602      	mov	r2, r0
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800085e:	fb83 1302 	smull	r1, r3, r3, r2
 8000862:	1159      	asrs	r1, r3, #5
 8000864:	17d3      	asrs	r3, r2, #31
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	2164      	movs	r1, #100	@ 0x64
 800086a:	fb01 f303 	mul.w	r3, r1, r3
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c

        char msg[30];
        sprintf(msg, "Random number: %lu\r\n", random_number);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000878:	490b      	ldr	r1, [pc, #44]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800087a:	4618      	mov	r0, r3
 800087c:	f004 feb4 	bl	80055e8 <siprintf>

        HAL_UART_Transmit(&huart5, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fca3 	bl	80001d0 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000898:	f003 fad4 	bl	8003e44 <HAL_UART_Transmit>
    }
}
 800089c:	bf00      	nop
 800089e:	3730      	adds	r7, #48	@ 0x30
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	51eb851f 	.word	0x51eb851f
 80008a8:	08006768 	.word	0x08006768
 80008ac:	20000188 	.word	0x20000188

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x44>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_MspInit+0x44>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008f2:	2007      	movs	r0, #7
 80008f4:	f000 fbec 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <HAL_I2C_MspInit+0x7c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d127      	bne.n	8000976 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800093e:	23c0      	movs	r3, #192	@ 0xc0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094e:	2304      	movs	r3, #4
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	@ (8000988 <HAL_I2C_MspInit+0x84>)
 800095a:	f000 fc77 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 8000964:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_I2C_MspInit+0x80>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005400 	.word	0x40005400
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400

0800098c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <HAL_SPI_MspInit+0x8c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d130      	bne.n	8000a10 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_SPI_MspInit+0x90>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009de:	23e0      	movs	r3, #224	@ 0xe0
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ee:	2305      	movs	r3, #5
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 fc26 	bl	800124c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2023      	movs	r0, #35	@ 0x23
 8000a06:	f000 fb6e 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a0a:	2023      	movs	r0, #35	@ 0x23
 8000a0c:	f000 fb87 	bl	800111e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a30:	d113      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_TIM_Base_MspInit+0x44>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_TIM_Base_MspInit+0x44>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	61d3      	str	r3, [r2, #28]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_TIM_Base_MspInit+0x44>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201c      	movs	r0, #28
 8000a50:	f000 fb49 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a54:	201c      	movs	r0, #28
 8000a56:	f000 fb62 	bl	800111e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a29      	ldr	r2, [pc, #164]	@ (8000b2c <HAL_UART_MspInit+0xc4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d14c      	bne.n	8000b24 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000aa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000ac0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_UART_MspInit+0xc8>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <HAL_UART_MspInit+0xcc>)
 8000af0:	f000 fbac 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af4:	2304      	movs	r3, #4
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000b04:	2305      	movs	r3, #5
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <HAL_UART_MspInit+0xd0>)
 8000b10:	f000 fb9c 	bl	800124c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2035      	movs	r0, #53	@ 0x35
 8000b1a:	f000 fae4 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b1e:	2035      	movs	r0, #53	@ 0x35
 8000b20:	f000 fafd 	bl	800111e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	@ 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40005000 	.word	0x40005000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000c00 	.word	0x48000c00

08000b3c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <HAL_PCD_MspInit+0x80>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d129      	bne.n	8000bb2 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b88:	230e      	movs	r3, #14
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f000 fb59 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_PCD_MspInit+0x84>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005c00 	.word	0x40005c00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f969 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <TIM2_IRQHandler+0x10>)
 8000c2a:	f002 fcf5 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000013c 	.word	0x2000013c

08000c38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <SPI1_IRQHandler+0x10>)
 8000c3e:	f002 fb0b 	bl	8003258 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000d8 	.word	0x200000d8

08000c4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <UART5_IRQHandler+0x10>)
 8000c52:	f003 f9c5 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000188 	.word	0x20000188

08000c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return 1;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_kill>:

int _kill(int pid, int sig)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c7a:	f004 fd69 	bl	8005750 <__errno>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2216      	movs	r2, #22
 8000c82:	601a      	str	r2, [r3, #0]
  return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_exit>:

void _exit (int status)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffe7 	bl	8000c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca2:	bf00      	nop
 8000ca4:	e7fd      	b.n	8000ca2 <_exit+0x12>

08000ca6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e00a      	b.n	8000cce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	60ba      	str	r2, [r7, #8]
 8000cc4:	b2ca      	uxtb	r2, r1
 8000cc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	dbf0      	blt.n	8000cb8 <_read+0x12>
  }

  return len;
 8000cd6:	687b      	ldr	r3, [r7, #4]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e009      	b.n	8000d06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbf1      	blt.n	8000cf2 <_write+0x12>
  }
  return len;
 8000d0e:	687b      	ldr	r3, [r7, #4]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_close>:

int _close(int file)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d40:	605a      	str	r2, [r3, #4]
  return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_isatty>:

int _isatty(int file)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d58:	2301      	movs	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f004 fcce 	bl	8005750 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000a000 	.word	0x2000a000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200004f4 	.word	0x200004f4
 8000de8:	20000648 	.word	0x20000648

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	@ (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	@ (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f004 fc8d 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fa1d 	bl	8000280 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e54:	080068a8 	.word	0x080068a8
  ldr r2, =_sbss
 8000e58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e5c:	20000648 	.word	0x20000648

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f92b 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fd1c 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f943 	bl	800113a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f90b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	@ (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200004f8 	.word	0x200004f8

08000f18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200004f8 	.word	0x200004f8

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	@ (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	@ (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	@ (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e02e      	b.n	80011c2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800116a:	2b02      	cmp	r3, #2
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2204      	movs	r2, #4
 8001172:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e020      	b.n	80011c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 020e 	bic.w	r2, r2, #14
 800118e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d005      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e027      	b.n	8001240 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 020e 	bic.w	r2, r2, #14
 80011fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
    }
  }
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e154      	b.n	8001506 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8146 	beq.w	8001500 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	6939      	ldr	r1, [r7, #16]
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0203 	and.w	r2, r3, #3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80a0 	beq.w	8001500 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <HAL_GPIO_Init+0x2d8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a57      	ldr	r2, [pc, #348]	@ (8001524 <HAL_GPIO_Init+0x2d8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <HAL_GPIO_Init+0x2d8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d8:	4a53      	ldr	r2, [pc, #332]	@ (8001528 <HAL_GPIO_Init+0x2dc>)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001402:	d019      	beq.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a49      	ldr	r2, [pc, #292]	@ (800152c <HAL_GPIO_Init+0x2e0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d013      	beq.n	8001434 <HAL_GPIO_Init+0x1e8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <HAL_GPIO_Init+0x2e4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1e4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a47      	ldr	r2, [pc, #284]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1e0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <HAL_GPIO_Init+0x2ec>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1dc>
 8001424:	2304      	movs	r3, #4
 8001426:	e008      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001428:	2305      	movs	r3, #5
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 800142c:	2303      	movs	r3, #3
 800142e:	e004      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001438:	2300      	movs	r3, #0
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800144a:	4937      	ldr	r1, [pc, #220]	@ (8001528 <HAL_GPIO_Init+0x2dc>)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800147c:	4a2f      	ldr	r2, [pc, #188]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001482:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a6:	4a25      	ldr	r2, [pc, #148]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d0:	4a1a      	ldr	r2, [pc, #104]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014fa:	4a10      	ldr	r2, [pc, #64]	@ (800153c <HAL_GPIO_Init+0x2f0>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	f47f aea3 	bne.w	800125c <HAL_GPIO_Init+0x10>
  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000
 8001528:	40010000 	.word	0x40010000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800
 8001534:	48000c00 	.word	0x48000c00
 8001538:	48001000 	.word	0x48001000
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155c:	e002      	b.n	8001564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e08d      	b.n	800169e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff f9b4 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2224      	movs	r2, #36	@ 0x24
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80015f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d108      	bne.n	8001612 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	e007      	b.n	8001622 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69d9      	ldr	r1, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d138      	bne.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e032      	b.n	8001730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	@ 0x24
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800172e:	2302      	movs	r3, #2
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	d139      	bne.n	80017c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800175c:	2302      	movs	r3, #2
 800175e:	e033      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	@ 0x24
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800178e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0b9      	b.n	800195a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff f99e 	bl	8000b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fd83 	bl	8005318 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e03e      	b.n	8001896 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3311      	adds	r3, #17
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3310      	adds	r3, #16
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3313      	adds	r3, #19
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3320      	adds	r3, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3324      	adds	r3, #36	@ 0x24
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3bb      	bcc.n	8001818 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e044      	b.n	8001930 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	3301      	adds	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	791b      	ldrb	r3, [r3, #4]
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	429a      	cmp	r2, r3
 8001938:	d3b5      	bcc.n	80018a6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001946:	f003 fd02 	bl	800534e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800196a:	af00      	add	r7, sp, #0
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001974:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f000 bff4 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 816d 	beq.w	8001c7a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019a0:	4bb4      	ldr	r3, [pc, #720]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4bb1      	ldr	r3, [pc, #708]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x104>
 80019b8:	4bae      	ldr	r3, [pc, #696]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d150      	bne.n	8001a68 <HAL_RCC_OscConfig+0x104>
 80019c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e6:	d802      	bhi.n	80019ee <HAL_RCC_OscConfig+0x8a>
 80019e8:	4ba2      	ldr	r3, [pc, #648]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0xb6>
 80019ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a06:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a0a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a16:	4b97      	ldr	r3, [pc, #604]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a1e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a2e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8114 	beq.w	8001c78 <HAL_RCC_OscConfig+0x314>
 8001a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 810b 	bne.w	8001c78 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f000 bf85 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_OscConfig+0x124>
 8001a7a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e036      	b.n	8001af6 <HAL_RCC_OscConfig+0x192>
 8001a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x14e>
 8001a98:	4b76      	ldr	r3, [pc, #472]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a75      	ldr	r2, [pc, #468]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a72      	ldr	r2, [pc, #456]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e021      	b.n	8001af6 <HAL_RCC_OscConfig+0x192>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x17a>
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b68      	ldr	r3, [pc, #416]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x192>
 8001ade:	4b65      	ldr	r3, [pc, #404]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a64      	ldr	r2, [pc, #400]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b62      	ldr	r3, [pc, #392]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a61      	ldr	r2, [pc, #388]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	f023 020f 	bic.w	r2, r3, #15
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	495a      	ldr	r1, [pc, #360]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d054      	beq.n	8001bca <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9fa 	bl	8000f18 <HAL_GetTick>
 8001b24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f9f5 	bl	8000f18 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d902      	bls.n	8001b40 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	f000 bf19 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 8001b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b44:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b54:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b60:	d802      	bhi.n	8001b68 <HAL_RCC_OscConfig+0x204>
 8001b62:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e015      	b.n	8001b94 <HAL_RCC_OscConfig+0x230>
 8001b68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b80:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b90:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b98:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ba0:	fa92 f2a2 	rbit	r2, r2
 8001ba4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ba8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0b0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1c6>
 8001bc8:	e057      	b.n	8001c7a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff f9a5 	bl	8000f18 <HAL_GetTick>
 8001bce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f9a0 	bl	8000f18 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	@ 0x64
 8001be2:	d902      	bls.n	8001bea <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f000 bec4 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 8001bea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bee:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001bfe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c0a:	d802      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x2ae>
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x2da>
 8001c12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c16:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c2a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_RCC_OscConfig+0x310>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c42:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c46:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c52:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1b0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x270>
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_OscConfig+0x316>
 8001c74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 816c 	beq.w	8001f68 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c90:	4bcc      	ldr	r3, [pc, #816]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c9c:	4bc9      	ldr	r3, [pc, #804]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d16d      	bne.n	8001d84 <HAL_RCC_OscConfig+0x420>
 8001ca8:	4bc6      	ldr	r3, [pc, #792]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d167      	bne.n	8001d84 <HAL_RCC_OscConfig+0x420>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd2:	d802      	bhi.n	8001cda <HAL_RCC_OscConfig+0x376>
 8001cd4:	4bbb      	ldr	r3, [pc, #748]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e013      	b.n	8001d02 <HAL_RCC_OscConfig+0x39e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cf2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001cfe:	4bb1      	ldr	r3, [pc, #708]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2202      	movs	r2, #2
 8001d04:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d08:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d14:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00a      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3e6>
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f000 be14 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b9e      	ldr	r3, [pc, #632]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	21f8      	movs	r1, #248	@ 0xf8
 8001d60:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d68:	fa91 f1a1 	rbit	r1, r1
 8001d6c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d70:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d74:	fab1 f181 	clz	r1, r1
 8001d78:	b2c9      	uxtb	r1, r1
 8001d7a:	408b      	lsls	r3, r1
 8001d7c:	4991      	ldr	r1, [pc, #580]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e0f1      	b.n	8001f68 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8083 	beq.w	8001e9c <HAL_RCC_OscConfig+0x538>
 8001d96:	2301      	movs	r3, #1
 8001d98:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001da8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001db6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff f8a9 	bl	8000f18 <HAL_GetTick>
 8001dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f8a4 	bl	8000f18 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d902      	bls.n	8001de2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f000 bdc8 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001df4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e00:	d802      	bhi.n	8001e08 <HAL_RCC_OscConfig+0x4a4>
 8001e02:	4b70      	ldr	r3, [pc, #448]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x4cc>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e20:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e2c:	4b65      	ldr	r3, [pc, #404]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	2202      	movs	r2, #2
 8001e32:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e36:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e42:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0b4      	beq.n	8001dcc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	21f8      	movs	r1, #248	@ 0xf8
 8001e78:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e80:	fa91 f1a1 	rbit	r1, r1
 8001e84:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e88:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e8c:	fab1 f181 	clz	r1, r1
 8001e90:	b2c9      	uxtb	r1, r1
 8001e92:	408b      	lsls	r3, r1
 8001e94:	494b      	ldr	r1, [pc, #300]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	e065      	b.n	8001f68 <HAL_RCC_OscConfig+0x604>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ebc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f826 	bl	8000f18 <HAL_GetTick>
 8001ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff f821 	bl	8000f18 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d902      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f000 bd45 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f06:	d802      	bhi.n	8001f0e <HAL_RCC_OscConfig+0x5aa>
 8001f08:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e013      	b.n	8001f36 <HAL_RCC_OscConfig+0x5d2>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f26:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <HAL_RCC_OscConfig+0x660>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	2202      	movs	r2, #2
 8001f38:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f48:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f002 021f 	and.w	r2, r2, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1b4      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8115 	beq.w	80021a8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07e      	beq.n	800208c <HAL_RCC_OscConfig+0x728>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_OscConfig+0x664>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe ffae 	bl	8000f18 <HAL_GetTick>
 8001fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc0:	e00f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x67e>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe ffa4 	bl	8000f18 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d902      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f000 bcc8 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800203a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	4bb0      	ldr	r3, [pc, #704]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 800203e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002048:	2102      	movs	r1, #2
 800204a:	6019      	str	r1, [r3, #0]
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f1a3 	rbit	r1, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002062:	6019      	str	r1, [r3, #0]
  return result;
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0a0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x668>
 800208a:	e08d      	b.n	80021a8 <HAL_RCC_OscConfig+0x844>
 800208c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002090:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020ae:	601a      	str	r2, [r3, #0]
  return result;
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b90      	ldr	r3, [pc, #576]	@ (8002304 <HAL_RCC_OscConfig+0x9a0>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff23 	bl	8000f18 <HAL_GetTick>
 80020d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d8:	f7fe ff1e 	bl	8000f18 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d902      	bls.n	80020ee <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f000 bc42 	b.w	8002972 <HAL_RCC_OscConfig+0x100e>
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800213e:	2202      	movs	r2, #2
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002158:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	4b69      	ldr	r3, [pc, #420]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 800215c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002166:	2102      	movs	r1, #2
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f1a3 	rbit	r1, r3
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002180:	6019      	str	r1, [r3, #0]
  return result;
 8002182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002186:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d197      	bne.n	80020d8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 819e 	beq.w	80024fa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
 80021dc:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b42      	ldr	r3, [pc, #264]	@ (8002308 <HAL_RCC_OscConfig+0x9a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b3f      	ldr	r3, [pc, #252]	@ (8002308 <HAL_RCC_OscConfig+0x9a4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a3e      	ldr	r2, [pc, #248]	@ (8002308 <HAL_RCC_OscConfig+0x9a4>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe7f 	bl	8000f18 <HAL_GetTick>
 800221a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002220:	f7fe fe7a 	bl	8000f18 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	@ 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e39e      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x9a4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x8fa>
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	e035      	b.n	80022ca <HAL_RCC_OscConfig+0x966>
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x924>
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
 8002286:	e020      	b.n	80022ca <HAL_RCC_OscConfig+0x966>
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x94e>
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x966>
 80022b2:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002300 <HAL_RCC_OscConfig+0x99c>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fe1c 	bl	8000f18 <HAL_GetTick>
 80022e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e012      	b.n	800230c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fe17 	bl	8000f18 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d908      	bls.n	800230c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e339      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	10908120 	.word	0x10908120
 8002308:	40007000 	.word	0x40007000
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800235c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0xa10>
 800236e:	4b98      	ldr	r3, [pc, #608]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	e013      	b.n	800239c <HAL_RCC_OscConfig+0xa38>
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b8d      	ldr	r3, [pc, #564]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023a4:	2102      	movs	r1, #2
 80023a6:	6011      	str	r1, [r2, #0]
 80023a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	fa92 f1a2 	rbit	r1, r2
 80023b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023be:	6011      	str	r1, [r2, #0]
  return result;
 80023c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f43f af7f 	beq.w	80022e6 <HAL_RCC_OscConfig+0x982>
 80023e8:	e07d      	b.n	80024e6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fd95 	bl	8000f18 <HAL_GetTick>
 80023ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7fe fd90 	bl	8000f18 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e2b2      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002414:	2202      	movs	r2, #2
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002452:	601a      	str	r2, [r3, #0]
  return result;
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800245c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_RCC_OscConfig+0xb10>
 800246e:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	e013      	b.n	800249c <HAL_RCC_OscConfig+0xb38>
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	4b4d      	ldr	r3, [pc, #308]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024a4:	2102      	movs	r1, #2
 80024a6:	6011      	str	r1, [r2, #0]
 80024a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ac:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	fa92 f1a2 	rbit	r1, r2
 80024b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024be:	6011      	str	r1, [r2, #0]
  return result;
 80024c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d186      	bne.n	80023f4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b38      	ldr	r3, [pc, #224]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a37      	ldr	r2, [pc, #220]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8232 	beq.w	8002970 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	4b30      	ldr	r3, [pc, #192]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	f000 8201 	beq.w	800291c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	2b02      	cmp	r3, #2
 8002528:	f040 8157 	bne.w	80027da <HAL_RCC_OscConfig+0xe76>
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002534:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002550:	601a      	str	r2, [r3, #0]
  return result;
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800255a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002566:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	461a      	mov	r2, r3
 800256e:	2300      	movs	r3, #0
 8002570:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fcd1 	bl	8000f18 <HAL_GetTick>
 8002576:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e009      	b.n	8002590 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fccc 	bl	8000f18 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1f0      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025b4:	601a      	str	r2, [r3, #0]
  return result;
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80025c8:	d804      	bhi.n	80025d4 <HAL_RCC_OscConfig+0xc70>
 80025ca:	4b01      	ldr	r3, [pc, #4]	@ (80025d0 <HAL_RCC_OscConfig+0xc6c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e029      	b.n	8002624 <HAL_RCC_OscConfig+0xcc0>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002602:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	4bc3      	ldr	r3, [pc, #780]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002628:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800262c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002636:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	fa92 f1a2 	rbit	r1, r2
 8002640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002644:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002648:	6011      	str	r1, [r2, #0]
  return result;
 800264a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800264e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d185      	bne.n	800257c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4baf      	ldr	r3, [pc, #700]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	430b      	orrs	r3, r1
 8002692:	49a7      	ldr	r1, [pc, #668]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f2a3 	rbit	r2, r3
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026bc:	601a      	str	r2, [r3, #0]
  return result;
 80026be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	2301      	movs	r3, #1
 80026dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fc1b 	bl	8000f18 <HAL_GetTick>
 80026e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fc16 	bl	8000f18 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e13a      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002720:	601a      	str	r2, [r3, #0]
  return result;
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800272a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b3f      	cmp	r3, #63	@ 0x3f
 8002734:	d802      	bhi.n	800273c <HAL_RCC_OscConfig+0xdd8>
 8002736:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e027      	b.n	800278c <HAL_RCC_OscConfig+0xe28>
 800273c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002740:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800276a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b69      	ldr	r3, [pc, #420]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002790:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002794:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002798:	6011      	str	r1, [r2, #0]
 800279a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800279e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fa92 f1a2 	rbit	r1, r2
 80027a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027b0:	6011      	str	r1, [r2, #0]
  return result;
 80027b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d087      	beq.n	80026e8 <HAL_RCC_OscConfig+0xd84>
 80027d8:	e0ca      	b.n	8002970 <HAL_RCC_OscConfig+0x100c>
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027fe:	601a      	str	r2, [r3, #0]
  return result;
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002808:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002814:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	461a      	mov	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fb7a 	bl	8000f18 <HAL_GetTick>
 8002824:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	e009      	b.n	800283e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fb75 	bl	8000f18 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e099      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002846:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002862:	601a      	str	r2, [r3, #0]
  return result;
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800286c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b3f      	cmp	r3, #63	@ 0x3f
 8002876:	d802      	bhi.n	800287e <HAL_RCC_OscConfig+0xf1a>
 8002878:	4b2d      	ldr	r3, [pc, #180]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e027      	b.n	80028ce <HAL_RCC_OscConfig+0xf6a>
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002886:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800288a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0xfcc>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028da:	6011      	str	r1, [r2, #0]
 80028dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	fa92 f1a2 	rbit	r1, r2
 80028ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028f2:	6011      	str	r1, [r2, #0]
  return result;
 80028f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d187      	bne.n	800282a <HAL_RCC_OscConfig+0xec6>
 800291a:	e029      	b.n	8002970 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d103      	bne.n	8002934 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e020      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
 8002930:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_OscConfig+0x1018>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800293c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002940:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002958:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b09e      	sub	sp, #120	@ 0x78
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e154      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b89      	ldr	r3, [pc, #548]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b86      	ldr	r3, [pc, #536]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4984      	ldr	r1, [pc, #528]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b82      	ldr	r3, [pc, #520]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e13c      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4978      	ldr	r1, [pc, #480]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80cd 	beq.w	8002b8e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d137      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xec>
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a14:	d802      	bhi.n	8002a1c <HAL_RCC_ClockConfig+0x9c>
 8002a16:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_ClockConfig+0xbc>
 8002a1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a38:	4b62      	ldr	r3, [pc, #392]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	f042 0220 	orr.w	r2, r2, #32
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	f002 021f 	and.w	r2, r2, #31
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d171      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ea      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d137      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x164>
 8002a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a8c:	d802      	bhi.n	8002a94 <HAL_RCC_ClockConfig+0x114>
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x134>
 8002a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab0:	4b44      	ldr	r3, [pc, #272]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002abc:	fa92 f2a2 	rbit	r2, r2
 8002ac0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d135      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0ae      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002afa:	d802      	bhi.n	8002b02 <HAL_RCC_ClockConfig+0x182>
 8002afc:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e00d      	b.n	8002b1e <HAL_RCC_ClockConfig+0x19e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b0e:	2302      	movs	r3, #2
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	2202      	movs	r2, #2
 8002b20:	61ba      	str	r2, [r7, #24]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	617a      	str	r2, [r7, #20]
  return result;
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e07a      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 0203 	bic.w	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	491a      	ldr	r1, [pc, #104]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5e:	f7fe f9db 	bl	8000f18 <HAL_GetTick>
 8002b62:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7fe f9d7 	bl	8000f18 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e062      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 020c 	and.w	r2, r3, #12
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1eb      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d215      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4906      	ldr	r1, [pc, #24]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bac:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d006      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e041      	b.n	8002c42 <HAL_RCC_ClockConfig+0x2c2>
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_RCC_ClockConfig+0x2cc>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	491a      	ldr	r1, [pc, #104]	@ (8002c4c <HAL_RCC_ClockConfig+0x2cc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <HAL_RCC_ClockConfig+0x2cc>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4912      	ldr	r1, [pc, #72]	@ (8002c4c <HAL_RCC_ClockConfig+0x2cc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c06:	f000 f829 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <HAL_RCC_ClockConfig+0x2cc>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c14:	22f0      	movs	r2, #240	@ 0xf0
 8002c16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	fa92 f2a2 	rbit	r2, r2
 8002c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	fab2 f282 	clz	r2, r2
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	40d3      	lsrs	r3, r2
 8002c2a:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <HAL_RCC_ClockConfig+0x2d0>)
 8002c2c:	5cd3      	ldrb	r3, [r2, r3]
 8002c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <HAL_RCC_ClockConfig+0x2d4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <HAL_RCC_ClockConfig+0x2d8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f928 	bl	8000e90 <HAL_InitTick>
  
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3778      	adds	r7, #120	@ 0x78
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08006780 	.word	0x08006780
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x30>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x36>
 8002c8a:	e026      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	e026      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0c9b      	lsrs	r3, r3, #18
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cdc:	613b      	str	r3, [r7, #16]
      break;
 8002cde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce0:	693b      	ldr	r3, [r7, #16]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	007a1200 	.word	0x007a1200
 8002cf8:	08006798 	.word	0x08006798
 8002cfc:	080067a8 	.word	0x080067a8
 8002d00:	003d0900 	.word	0x003d0900

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d22:	f7ff ffef 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d26:	4601      	mov	r1, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d30:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	603a      	str	r2, [r7, #0]
  return result;
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	40d3      	lsrs	r3, r2
 8002d48:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08006790 	.word	0x08006790

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d66:	f7ff ffcd 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d74:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	603a      	str	r2, [r7, #0]
  return result;
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	40d3      	lsrs	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08006790 	.word	0x08006790

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b092      	sub	sp, #72	@ 0x48
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80d2 	beq.w	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b44      	ldr	r3, [pc, #272]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b41      	ldr	r3, [pc, #260]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a40      	ldr	r2, [pc, #256]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f885 	bl	8000f18 <HAL_GetTick>
 8002e0e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f881 	bl	8000f18 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b64      	cmp	r3, #100	@ 0x64
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e167      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b37      	ldr	r3, [pc, #220]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e30:	4b33      	ldr	r3, [pc, #204]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8082 	beq.w	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d07a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e50:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b1c      	ldr	r3, [pc, #112]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ea2:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d049      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe f831 	bl	8000f18 <HAL_GetTick>
 8002eb6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe f82d 	bl	8000f18 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e111      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002edc:	2302      	movs	r3, #2
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002efa:	4b01      	ldr	r3, [pc, #4]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	e00d      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	10908100 	.word	0x10908100
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	4b78      	ldr	r3, [pc, #480]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	613a      	str	r2, [r7, #16]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	60fa      	str	r2, [r7, #12]
  return result;
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0b9      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f46:	4b6d      	ldr	r3, [pc, #436]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	496a      	ldr	r1, [pc, #424]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b66      	ldr	r3, [pc, #408]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a65      	ldr	r2, [pc, #404]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f78:	4b60      	ldr	r3, [pc, #384]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	f023 0203 	bic.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	495d      	ldr	r1, [pc, #372]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f96:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4956      	ldr	r1, [pc, #344]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb4:	4b51      	ldr	r3, [pc, #324]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	494e      	ldr	r1, [pc, #312]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	f023 0210 	bic.w	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4947      	ldr	r1, [pc, #284]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ff0:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	493f      	ldr	r1, [pc, #252]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800300e:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f023 0220 	bic.w	r2, r3, #32
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4938      	ldr	r1, [pc, #224]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800301c:	4313      	orrs	r3, r2
 800301e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800302c:	4b33      	ldr	r3, [pc, #204]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4930      	ldr	r1, [pc, #192]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800303a:	4313      	orrs	r3, r2
 800303c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800304a:	4b2c      	ldr	r3, [pc, #176]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	4929      	ldr	r1, [pc, #164]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003058:	4313      	orrs	r3, r2
 800305a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	4921      	ldr	r1, [pc, #132]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003086:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	491a      	ldr	r1, [pc, #104]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003094:	4313      	orrs	r3, r2
 8003096:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030a4:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	4912      	ldr	r1, [pc, #72]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	490b      	ldr	r1, [pc, #44]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ec:	4903      	ldr	r1, [pc, #12]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3748      	adds	r7, #72	@ 0x48
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09d      	b.n	800324e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003122:	d009      	beq.n	8003138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
 800312a:	e005      	b.n	8003138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fc1a 	bl	800098c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800316e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003178:	d902      	bls.n	8003180 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e002      	b.n	8003186 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003184:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800318e:	d007      	beq.n	80031a0 <HAL_SPI_Init+0xa0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	ea42 0103 	orr.w	r1, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	f003 0204 	and.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800321c:	ea42 0103 	orr.w	r1, r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10f      	bne.n	800329c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
    return;
 800329a:	e0d7      	b.n	800344c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_SPI_IRQHandler+0x66>
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	09db      	lsrs	r3, r3, #7
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
    return;
 80032bc:	e0c6      	b.n	800344c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10c      	bne.n	80032e4 <HAL_SPI_IRQHandler+0x8c>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80b4 	beq.w	800344c <HAL_SPI_IRQHandler+0x1f4>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80ad 	beq.w	800344c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d023      	beq.n	8003346 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d011      	beq.n	800332e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	e00b      	b.n	8003346 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
        return;
 8003344:	e082      	b.n	800344c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d014      	beq.n	800337c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00c      	beq.n	80033a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338c:	f043 0208 	orr.w	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d04f      	beq.n	800344a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_SPI_IRQHandler+0x17e>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0203 	bic.w	r2, r2, #3
 80033e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d011      	beq.n	8003412 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f2:	4a18      	ldr	r2, [pc, #96]	@ (8003454 <HAL_SPI_IRQHandler+0x1fc>)
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fee7 	bl	80011ce <HAL_DMA_Abort_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <HAL_SPI_IRQHandler+0x1fc>)
 8003420:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fed1 	bl	80011ce <HAL_DMA_Abort_IT>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800343e:	e003      	b.n	8003448 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f809 	bl	8003458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003446:	e000      	b.n	800344a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003448:	bf00      	nop
    return;
 800344a:	bf00      	nop
  }
}
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	0800346d 	.word	0x0800346d

08003458 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ffe5 	bl	8003458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e049      	b.n	800353c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd faaf 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 fa93 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d001      	beq.n	800355c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e04a      	b.n	80035f2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a21      	ldr	r2, [pc, #132]	@ (8003600 <HAL_TIM_Base_Start_IT+0xbc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d018      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x6c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003586:	d013      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1d      	ldr	r2, [pc, #116]	@ (8003604 <HAL_TIM_Base_Start_IT+0xc0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00e      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1c      	ldr	r2, [pc, #112]	@ (8003608 <HAL_TIM_Base_Start_IT+0xc4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x6c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <HAL_TIM_Base_Start_IT+0xc8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_TIM_Base_Start_IT+0x6c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_TIM_Base_Start_IT+0xcc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d115      	bne.n	80035dc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_TIM_Base_Start_IT+0xd0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d015      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0xaa>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d011      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	e008      	b.n	80035ee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e000      	b.n	80035f0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40012c00 	.word	0x40012c00
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40013400 	.word	0x40013400
 8003610:	40014000 	.word	0x40014000
 8003614:	00010007 	.word	0x00010007

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d020      	beq.n	800367c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0202 	mvn.w	r2, #2
 800364c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9ad 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f99f 	bl	80039ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f9b0 	bl	80039d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0204 	mvn.w	r2, #4
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f987 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f979 	bl	80039ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f98a 	bl	80039d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d020      	beq.n	8003714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01b      	beq.n	8003714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0208 	mvn.w	r2, #8
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2204      	movs	r2, #4
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f961 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f953 	bl	80039ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f964 	bl	80039d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d020      	beq.n	8003760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0210 	mvn.w	r2, #16
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2208      	movs	r2, #8
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f93b 	bl	80039c2 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f92d 	bl	80039ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f93e 	bl	80039d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0201 	mvn.w	r2, #1
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd f860 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 faec 	bl	8003d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fae4 	bl	8003d94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8fd 	bl	80039ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0220 	mvn.w	r2, #32
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 faac 	bl	8003d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIM_ConfigClockSource+0x1c>
 8003834:	2302      	movs	r3, #2
 8003836:	e0b6      	b.n	80039a6 <HAL_TIM_ConfigClockSource+0x18a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003856:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800385a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003874:	d03e      	beq.n	80038f4 <HAL_TIM_ConfigClockSource+0xd8>
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800387a:	f200 8087 	bhi.w	800398c <HAL_TIM_ConfigClockSource+0x170>
 800387e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003882:	f000 8086 	beq.w	8003992 <HAL_TIM_ConfigClockSource+0x176>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388a:	d87f      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 800388c:	2b70      	cmp	r3, #112	@ 0x70
 800388e:	d01a      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0xaa>
 8003890:	2b70      	cmp	r3, #112	@ 0x70
 8003892:	d87b      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 8003894:	2b60      	cmp	r3, #96	@ 0x60
 8003896:	d050      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x11e>
 8003898:	2b60      	cmp	r3, #96	@ 0x60
 800389a:	d877      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 800389c:	2b50      	cmp	r3, #80	@ 0x50
 800389e:	d03c      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xfe>
 80038a0:	2b50      	cmp	r3, #80	@ 0x50
 80038a2:	d873      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d058      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x13e>
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d86f      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 80038ac:	2b30      	cmp	r3, #48	@ 0x30
 80038ae:	d064      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x15e>
 80038b0:	2b30      	cmp	r3, #48	@ 0x30
 80038b2:	d86b      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d060      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x15e>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d867      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x170>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05c      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x15e>
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d05a      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x15e>
 80038c4:	e062      	b.n	800398c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d6:	f000 f9a9 	bl	8003c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	609a      	str	r2, [r3, #8]
      break;
 80038f2:	e04f      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	f000 f992 	bl	8003c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003916:	609a      	str	r2, [r3, #8]
      break;
 8003918:	e03c      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	461a      	mov	r2, r3
 8003928:	f000 f906 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2150      	movs	r1, #80	@ 0x50
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f95f 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003938:	e02c      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	461a      	mov	r2, r3
 8003948:	f000 f925 	bl	8003b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2160      	movs	r1, #96	@ 0x60
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f94f 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003958:	e01c      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	461a      	mov	r2, r3
 8003968:	f000 f8e6 	bl	8003b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2140      	movs	r1, #64	@ 0x40
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f93f 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 8003978:	e00c      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f000 f936 	bl	8003bf6 <TIM_ITRx_SetConfig>
      break;
 800398a:	e003      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e000      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3f      	ldr	r2, [pc, #252]	@ (8003b20 <TIM_Base_SetConfig+0x120>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b24 <TIM_Base_SetConfig+0x124>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3d      	ldr	r2, [pc, #244]	@ (8003b28 <TIM_Base_SetConfig+0x128>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a33      	ldr	r2, [pc, #204]	@ (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a58:	d017      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a30      	ldr	r2, [pc, #192]	@ (8003b20 <TIM_Base_SetConfig+0x120>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2f      	ldr	r2, [pc, #188]	@ (8003b24 <TIM_Base_SetConfig+0x124>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00f      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b28 <TIM_Base_SetConfig+0x128>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <TIM_Base_SetConfig+0x12c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b30 <TIM_Base_SetConfig+0x130>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2b      	ldr	r2, [pc, #172]	@ (8003b34 <TIM_Base_SetConfig+0x134>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <TIM_Base_SetConfig+0x11c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a17      	ldr	r2, [pc, #92]	@ (8003b28 <TIM_Base_SetConfig+0x128>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <TIM_Base_SetConfig+0x12c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a15      	ldr	r2, [pc, #84]	@ (8003b30 <TIM_Base_SetConfig+0x130>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0xe8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a14      	ldr	r2, [pc, #80]	@ (8003b34 <TIM_Base_SetConfig+0x134>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f023 0201 	bic.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40013400 	.word	0x40013400
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800

08003b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f023 0201 	bic.w	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 030a 	bic.w	r3, r3, #10
 8003b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0210 	bic.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f043 0307 	orr.w	r3, r3, #7
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e063      	b.n	8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf6:	d013      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a12      	ldr	r2, [pc, #72]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10c      	bne.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40014000 	.word	0x40014000

08003d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e040      	b.n	8003e3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fe4c 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	@ 0x24
 8003dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fdd0 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fbf9 	bl	80045ec <UART_SetConfig>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e01b      	b.n	8003e3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fe4f 	bl	8004ad8 <UART_CheckIdleState>
 8003e3a:	4603      	mov	r3, r0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	@ 0x28
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d177      	bne.n	8003f4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Transmit+0x24>
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e070      	b.n	8003f4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2221      	movs	r2, #33	@ 0x21
 8003e78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7a:	f7fd f84d 	bl	8000f18 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e98:	d108      	bne.n	8003eac <HAL_UART_Transmit+0x68>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e003      	b.n	8003eb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb4:	e02f      	b.n	8003f16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 feb1 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e03b      	b.n	8003f4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	3302      	adds	r3, #2
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e007      	b.n	8003f04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1c9      	bne.n	8003eb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2140      	movs	r1, #64	@ 0x40
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fe7b 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e005      	b.n	8003f4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b08a      	sub	sp, #40	@ 0x28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d132      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Receive_IT+0x24>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02b      	b.n	8003fd6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e6      	bne.n	8003f92 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fe9a 	bl	8004d04 <UART_Start_Receive_IT>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	e000      	b.n	8003fd6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3728      	adds	r7, #40	@ 0x28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800400a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800400e:	4013      	ands	r3, r2
 8004010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800401c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 82ab 	beq.w	8004594 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
      }
      return;
 8004046:	e2a5      	b.n	8004594 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8117 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800405e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004062:	4b85      	ldr	r3, [pc, #532]	@ (8004278 <HAL_UART_IRQHandler+0x298>)
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 810a 	beq.w	8004280 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2201      	movs	r2, #1
 800408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d011      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2202      	movs	r2, #2
 80040ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
 80040d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d017      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8211 	beq.w	8004598 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04f      	beq.n	8004262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fe52 	bl	8004e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	d141      	bne.n	800425a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3308      	adds	r3, #8
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800420e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800421a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	4a13      	ldr	r2, [pc, #76]	@ (800427c <HAL_UART_IRQHandler+0x29c>)
 8004230:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc ffc9 	bl	80011ce <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00f      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9b4 	bl	80045c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e00b      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9b0 	bl	80045c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e007      	b.n	8004272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9ac 	bl	80045c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004270:	e192      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	bf00      	nop
    return;
 8004274:	e190      	b.n	8004598 <HAL_UART_IRQHandler+0x5b8>
 8004276:	bf00      	nop
 8004278:	04000120 	.word	0x04000120
 800427c:	08004f35 	.word	0x08004f35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 814b 	bne.w	8004520 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8144 	beq.w	8004520 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 813d 	beq.w	8004520 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2210      	movs	r2, #16
 80042ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	f040 80b5 	bne.w	8004428 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8164 	beq.w	800459c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042de:	429a      	cmp	r2, r3
 80042e0:	f080 815c 	bcs.w	800459c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	f000 8086 	beq.w	8004406 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800430e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004312:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004316:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004328:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004330:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1da      	bne.n	80042fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004368:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800436c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004370:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800437a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e3      	bne.n	8004380 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e4      	bne.n	80043c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc fea6 	bl	8001152 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004418:	b29b      	uxth	r3, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8d7 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004426:	e0b9      	b.n	800459c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ab 	beq.w	80045a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800444a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a6 	beq.w	80045a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
 8004478:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800447c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e4      	bne.n	8004454 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3308      	adds	r3, #8
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	623b      	str	r3, [r7, #32]
   return(result);
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e3      	bne.n	800448a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e4      	bne.n	80044d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f85b 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800451e:	e03f      	b.n	80045a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <HAL_UART_IRQHandler+0x56a>
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fede 	bl	8005304 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004548:	e02d      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01c      	beq.n	80045a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
    }
    return;
 8004572:	e017      	b.n	80045a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d012      	beq.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
 8004580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fce7 	bl	8004f60 <UART_EndTransmit_IT>
    return;
 8004592:	e008      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004594:	bf00      	nop
 8004596:	e006      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004598:	bf00      	nop
 800459a:	e004      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800459c:	bf00      	nop
 800459e:	e002      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80045a4:	bf00      	nop
  }

}
 80045a6:	37e8      	adds	r7, #232	@ 0xe8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800461a:	f023 030c 	bic.w	r3, r3, #12
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4aa7      	ldr	r2, [pc, #668]	@ (8004904 <UART_SetConfig+0x318>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d120      	bne.n	80046ae <UART_SetConfig+0xc2>
 800466c:	4ba6      	ldr	r3, [pc, #664]	@ (8004908 <UART_SetConfig+0x31c>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b03      	cmp	r3, #3
 8004676:	d817      	bhi.n	80046a8 <UART_SetConfig+0xbc>
 8004678:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <UART_SetConfig+0x94>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	08004691 	.word	0x08004691
 8004684:	0800469d 	.word	0x0800469d
 8004688:	080046a3 	.word	0x080046a3
 800468c:	08004697 	.word	0x08004697
 8004690:	2301      	movs	r3, #1
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e0b5      	b.n	8004802 <UART_SetConfig+0x216>
 8004696:	2302      	movs	r3, #2
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e0b2      	b.n	8004802 <UART_SetConfig+0x216>
 800469c:	2304      	movs	r3, #4
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e0af      	b.n	8004802 <UART_SetConfig+0x216>
 80046a2:	2308      	movs	r3, #8
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e0ac      	b.n	8004802 <UART_SetConfig+0x216>
 80046a8:	2310      	movs	r3, #16
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e0a9      	b.n	8004802 <UART_SetConfig+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a96      	ldr	r2, [pc, #600]	@ (800490c <UART_SetConfig+0x320>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d124      	bne.n	8004702 <UART_SetConfig+0x116>
 80046b8:	4b93      	ldr	r3, [pc, #588]	@ (8004908 <UART_SetConfig+0x31c>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046c4:	d011      	beq.n	80046ea <UART_SetConfig+0xfe>
 80046c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046ca:	d817      	bhi.n	80046fc <UART_SetConfig+0x110>
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046d0:	d011      	beq.n	80046f6 <UART_SetConfig+0x10a>
 80046d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046d6:	d811      	bhi.n	80046fc <UART_SetConfig+0x110>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <UART_SetConfig+0xf8>
 80046dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e0:	d006      	beq.n	80046f0 <UART_SetConfig+0x104>
 80046e2:	e00b      	b.n	80046fc <UART_SetConfig+0x110>
 80046e4:	2300      	movs	r3, #0
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e08b      	b.n	8004802 <UART_SetConfig+0x216>
 80046ea:	2302      	movs	r3, #2
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e088      	b.n	8004802 <UART_SetConfig+0x216>
 80046f0:	2304      	movs	r3, #4
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e085      	b.n	8004802 <UART_SetConfig+0x216>
 80046f6:	2308      	movs	r3, #8
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e082      	b.n	8004802 <UART_SetConfig+0x216>
 80046fc:	2310      	movs	r3, #16
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e07f      	b.n	8004802 <UART_SetConfig+0x216>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a82      	ldr	r2, [pc, #520]	@ (8004910 <UART_SetConfig+0x324>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d124      	bne.n	8004756 <UART_SetConfig+0x16a>
 800470c:	4b7e      	ldr	r3, [pc, #504]	@ (8004908 <UART_SetConfig+0x31c>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004714:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004718:	d011      	beq.n	800473e <UART_SetConfig+0x152>
 800471a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800471e:	d817      	bhi.n	8004750 <UART_SetConfig+0x164>
 8004720:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004724:	d011      	beq.n	800474a <UART_SetConfig+0x15e>
 8004726:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800472a:	d811      	bhi.n	8004750 <UART_SetConfig+0x164>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <UART_SetConfig+0x14c>
 8004730:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004734:	d006      	beq.n	8004744 <UART_SetConfig+0x158>
 8004736:	e00b      	b.n	8004750 <UART_SetConfig+0x164>
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e061      	b.n	8004802 <UART_SetConfig+0x216>
 800473e:	2302      	movs	r3, #2
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e05e      	b.n	8004802 <UART_SetConfig+0x216>
 8004744:	2304      	movs	r3, #4
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e05b      	b.n	8004802 <UART_SetConfig+0x216>
 800474a:	2308      	movs	r3, #8
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e058      	b.n	8004802 <UART_SetConfig+0x216>
 8004750:	2310      	movs	r3, #16
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e055      	b.n	8004802 <UART_SetConfig+0x216>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6e      	ldr	r2, [pc, #440]	@ (8004914 <UART_SetConfig+0x328>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d124      	bne.n	80047aa <UART_SetConfig+0x1be>
 8004760:	4b69      	ldr	r3, [pc, #420]	@ (8004908 <UART_SetConfig+0x31c>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004768:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800476c:	d011      	beq.n	8004792 <UART_SetConfig+0x1a6>
 800476e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004772:	d817      	bhi.n	80047a4 <UART_SetConfig+0x1b8>
 8004774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004778:	d011      	beq.n	800479e <UART_SetConfig+0x1b2>
 800477a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800477e:	d811      	bhi.n	80047a4 <UART_SetConfig+0x1b8>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <UART_SetConfig+0x1a0>
 8004784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004788:	d006      	beq.n	8004798 <UART_SetConfig+0x1ac>
 800478a:	e00b      	b.n	80047a4 <UART_SetConfig+0x1b8>
 800478c:	2300      	movs	r3, #0
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e037      	b.n	8004802 <UART_SetConfig+0x216>
 8004792:	2302      	movs	r3, #2
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e034      	b.n	8004802 <UART_SetConfig+0x216>
 8004798:	2304      	movs	r3, #4
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e031      	b.n	8004802 <UART_SetConfig+0x216>
 800479e:	2308      	movs	r3, #8
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e02e      	b.n	8004802 <UART_SetConfig+0x216>
 80047a4:	2310      	movs	r3, #16
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e02b      	b.n	8004802 <UART_SetConfig+0x216>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004918 <UART_SetConfig+0x32c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d124      	bne.n	80047fe <UART_SetConfig+0x212>
 80047b4:	4b54      	ldr	r3, [pc, #336]	@ (8004908 <UART_SetConfig+0x31c>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80047bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047c0:	d011      	beq.n	80047e6 <UART_SetConfig+0x1fa>
 80047c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047c6:	d817      	bhi.n	80047f8 <UART_SetConfig+0x20c>
 80047c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047cc:	d011      	beq.n	80047f2 <UART_SetConfig+0x206>
 80047ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047d2:	d811      	bhi.n	80047f8 <UART_SetConfig+0x20c>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <UART_SetConfig+0x1f4>
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047dc:	d006      	beq.n	80047ec <UART_SetConfig+0x200>
 80047de:	e00b      	b.n	80047f8 <UART_SetConfig+0x20c>
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e00d      	b.n	8004802 <UART_SetConfig+0x216>
 80047e6:	2302      	movs	r3, #2
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e00a      	b.n	8004802 <UART_SetConfig+0x216>
 80047ec:	2304      	movs	r3, #4
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e007      	b.n	8004802 <UART_SetConfig+0x216>
 80047f2:	2308      	movs	r3, #8
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e004      	b.n	8004802 <UART_SetConfig+0x216>
 80047f8:	2310      	movs	r3, #16
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e001      	b.n	8004802 <UART_SetConfig+0x216>
 80047fe:	2310      	movs	r3, #16
 8004800:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480a:	d15b      	bne.n	80048c4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800480c:	7ffb      	ldrb	r3, [r7, #31]
 800480e:	2b08      	cmp	r3, #8
 8004810:	d827      	bhi.n	8004862 <UART_SetConfig+0x276>
 8004812:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <UART_SetConfig+0x22c>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004863 	.word	0x08004863
 8004828:	08004853 	.word	0x08004853
 800482c:	08004863 	.word	0x08004863
 8004830:	08004863 	.word	0x08004863
 8004834:	08004863 	.word	0x08004863
 8004838:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fe fa6e 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 8004840:	61b8      	str	r0, [r7, #24]
        break;
 8004842:	e013      	b.n	800486c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe fa8c 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8004848:	61b8      	str	r0, [r7, #24]
        break;
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b33      	ldr	r3, [pc, #204]	@ (800491c <UART_SetConfig+0x330>)
 800484e:	61bb      	str	r3, [r7, #24]
        break;
 8004850:	e00c      	b.n	800486c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe fa03 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8004856:	61b8      	str	r0, [r7, #24]
        break;
 8004858:	e008      	b.n	800486c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800485e:	61bb      	str	r3, [r7, #24]
        break;
 8004860:	e004      	b.n	800486c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	77bb      	strb	r3, [r7, #30]
        break;
 800486a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8082 	beq.w	8004978 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	005a      	lsls	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	441a      	add	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b0f      	cmp	r3, #15
 800488e:	d916      	bls.n	80048be <UART_SetConfig+0x2d2>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004896:	d212      	bcs.n	80048be <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f023 030f 	bic.w	r3, r3, #15
 80048a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	89fa      	ldrh	r2, [r7, #14]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	e05c      	b.n	8004978 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	77bb      	strb	r3, [r7, #30]
 80048c2:	e059      	b.n	8004978 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d835      	bhi.n	8004936 <UART_SetConfig+0x34a>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0x2e4>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004921 	.word	0x08004921
 80048dc:	08004937 	.word	0x08004937
 80048e0:	08004927 	.word	0x08004927
 80048e4:	08004937 	.word	0x08004937
 80048e8:	08004937 	.word	0x08004937
 80048ec:	08004937 	.word	0x08004937
 80048f0:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f4:	f7fe fa12 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 80048f8:	61b8      	str	r0, [r7, #24]
        break;
 80048fa:	e021      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe fa30 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8004900:	61b8      	str	r0, [r7, #24]
        break;
 8004902:	e01d      	b.n	8004940 <UART_SetConfig+0x354>
 8004904:	40013800 	.word	0x40013800
 8004908:	40021000 	.word	0x40021000
 800490c:	40004400 	.word	0x40004400
 8004910:	40004800 	.word	0x40004800
 8004914:	40004c00 	.word	0x40004c00
 8004918:	40005000 	.word	0x40005000
 800491c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <UART_SetConfig+0x3a4>)
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe f999 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 800492a:	61b8      	str	r0, [r7, #24]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004932:	61bb      	str	r3, [r7, #24]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	77bb      	strb	r3, [r7, #30]
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085a      	lsrs	r2, r3, #1
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d909      	bls.n	8004974 <UART_SetConfig+0x388>
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004966:	d205      	bcs.n	8004974 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e001      	b.n	8004978 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004984:	7fbb      	ldrb	r3, [r7, #30]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	007a1200 	.word	0x007a1200

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	@ 0x60
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc fa16 	bl	8000f18 <HAL_GetTick>
 8004aec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12e      	bne.n	8004b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f88c 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e062      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d149      	bne.n	8004bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f856 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03c      	beq.n	8004bfc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bd4:	61fa      	str	r2, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	617b      	str	r3, [r7, #20]
   return(result);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e011      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3758      	adds	r7, #88	@ 0x58
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	e04f      	b.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d04b      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fc f969 	bl	8000f18 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e04e      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d037      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d034      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d031      	beq.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d110      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8ed 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2208      	movs	r2, #8
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e029      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d111      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8d3 	bl	8004e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0a0      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b097      	sub	sp, #92	@ 0x5c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d36:	d10e      	bne.n	8004d56 <UART_Start_Receive_IT+0x52>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <UART_Start_Receive_IT+0x48>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004d46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d4a:	e01a      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	22ff      	movs	r2, #255	@ 0xff
 8004d50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d54:	e015      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <UART_Start_Receive_IT+0x76>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <UART_Start_Receive_IT+0x6c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22ff      	movs	r2, #255	@ 0xff
 8004d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d6e:	e008      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	227f      	movs	r2, #127	@ 0x7f
 8004d74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004d78:	e003      	b.n	8004d82 <UART_Start_Receive_IT+0x7e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2222      	movs	r2, #34	@ 0x22
 8004d8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3308      	adds	r3, #8
 8004db0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004db2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d107      	bne.n	8004de0 <UART_Start_Receive_IT+0xdc>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a22      	ldr	r2, [pc, #136]	@ (8004e64 <UART_Start_Receive_IT+0x160>)
 8004ddc:	669a      	str	r2, [r3, #104]	@ 0x68
 8004dde:	e002      	b.n	8004de6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <UART_Start_Receive_IT+0x164>)
 8004de4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e6      	bne.n	8004dee <UART_Start_Receive_IT+0xea>
 8004e20:	e018      	b.n	8004e54 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f043 0320 	orr.w	r3, r3, #32
 8004e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69f9      	ldr	r1, [r7, #28]
 8004e46:	6a3a      	ldr	r2, [r7, #32]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	375c      	adds	r7, #92	@ 0x5c
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	0800515d 	.word	0x0800515d
 8004e68:	08004fb5 	.word	0x08004fb5

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b095      	sub	sp, #84	@ 0x54
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d118      	bne.n	8004f14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f28:	bf00      	nop
 8004f2a:	3754      	adds	r7, #84	@ 0x54
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff fb34 	bl	80045c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	613b      	str	r3, [r7, #16]
   return(result);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fb00 	bl	80045ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b09c      	sub	sp, #112	@ 0x70
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fcc:	2b22      	cmp	r3, #34	@ 0x22
 8004fce:	f040 80b9 	bne.w	8005144 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004fd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004fe0:	b2d9      	uxtb	r1, r3
 8004fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	400a      	ands	r2, r1
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 809c 	bne.w	8005154 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800502a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005030:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800503a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800503c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800506e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800507c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d018      	beq.n	80050d6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	623b      	str	r3, [r7, #32]
   return(result);
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80050c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d12e      	bne.n	800513c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0310 	bic.w	r3, r3, #16
 80050f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	69b9      	ldr	r1, [r7, #24]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	617b      	str	r3, [r7, #20]
   return(result);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b10      	cmp	r3, #16
 8005122:	d103      	bne.n	800512c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2210      	movs	r2, #16
 800512a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fa4d 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800513a:	e00b      	b.n	8005154 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fb fad3 	bl	80006e8 <HAL_UART_RxCpltCallback>
}
 8005142:	e007      	b.n	8005154 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0208 	orr.w	r2, r2, #8
 8005152:	619a      	str	r2, [r3, #24]
}
 8005154:	bf00      	nop
 8005156:	3770      	adds	r7, #112	@ 0x70
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b09c      	sub	sp, #112	@ 0x70
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800516a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005174:	2b22      	cmp	r3, #34	@ 0x22
 8005176:	f040 80b9 	bne.w	80052ec <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005180:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005188:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800518a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800518e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005192:	4013      	ands	r3, r2
 8005194:	b29a      	uxth	r2, r3
 8005196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005198:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 809c 	bne.w	80052fc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80051d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80051e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80051e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	663b      	str	r3, [r7, #96]	@ 0x60
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005216:	643a      	str	r2, [r7, #64]	@ 0x40
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800521c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	61fb      	str	r3, [r7, #28]
   return(result);
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	2b01      	cmp	r3, #1
 8005284:	d12e      	bne.n	80052e4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	60bb      	str	r3, [r7, #8]
   return(result);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 0310 	bic.w	r3, r3, #16
 80052a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	613b      	str	r3, [r7, #16]
   return(result);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d103      	bne.n	80052d4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2210      	movs	r2, #16
 80052d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff f979 	bl	80045d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e2:	e00b      	b.n	80052fc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fb f9ff 	bl	80006e8 <HAL_UART_RxCpltCallback>
}
 80052ea:	e007      	b.n	80052fc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0208 	orr.w	r2, r2, #8
 80052fa:	619a      	str	r2, [r3, #24]
}
 80052fc:	bf00      	nop
 80052fe:	3770      	adds	r7, #112	@ 0x70
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005320:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005324:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	b29b      	uxth	r3, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	b29b      	uxth	r3, r3
 8005336:	4013      	ands	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <srand>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <srand+0x44>)
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005394:	4604      	mov	r4, r0
 8005396:	b9b3      	cbnz	r3, 80053c6 <srand+0x3a>
 8005398:	2018      	movs	r0, #24
 800539a:	f000 fa6f 	bl	800587c <malloc>
 800539e:	4602      	mov	r2, r0
 80053a0:	6328      	str	r0, [r5, #48]	@ 0x30
 80053a2:	b920      	cbnz	r0, 80053ae <srand+0x22>
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <srand+0x48>)
 80053a6:	480c      	ldr	r0, [pc, #48]	@ (80053d8 <srand+0x4c>)
 80053a8:	2146      	movs	r1, #70	@ 0x46
 80053aa:	f000 f9ff 	bl	80057ac <__assert_func>
 80053ae:	490b      	ldr	r1, [pc, #44]	@ (80053dc <srand+0x50>)
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <srand+0x54>)
 80053b2:	e9c0 1300 	strd	r1, r3, [r0]
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <srand+0x58>)
 80053b8:	6083      	str	r3, [r0, #8]
 80053ba:	230b      	movs	r3, #11
 80053bc:	8183      	strh	r3, [r0, #12]
 80053be:	2100      	movs	r1, #0
 80053c0:	2001      	movs	r0, #1
 80053c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80053c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	611c      	str	r4, [r3, #16]
 80053cc:	615a      	str	r2, [r3, #20]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	20000018 	.word	0x20000018
 80053d4:	080067b8 	.word	0x080067b8
 80053d8:	080067cf 	.word	0x080067cf
 80053dc:	abcd330e 	.word	0xabcd330e
 80053e0:	e66d1234 	.word	0xe66d1234
 80053e4:	0005deec 	.word	0x0005deec

080053e8 <rand>:
 80053e8:	4b16      	ldr	r3, [pc, #88]	@ (8005444 <rand+0x5c>)
 80053ea:	b510      	push	{r4, lr}
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80053f0:	b9b3      	cbnz	r3, 8005420 <rand+0x38>
 80053f2:	2018      	movs	r0, #24
 80053f4:	f000 fa42 	bl	800587c <malloc>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80053fc:	b920      	cbnz	r0, 8005408 <rand+0x20>
 80053fe:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <rand+0x60>)
 8005400:	4812      	ldr	r0, [pc, #72]	@ (800544c <rand+0x64>)
 8005402:	2152      	movs	r1, #82	@ 0x52
 8005404:	f000 f9d2 	bl	80057ac <__assert_func>
 8005408:	4911      	ldr	r1, [pc, #68]	@ (8005450 <rand+0x68>)
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <rand+0x6c>)
 800540c:	e9c0 1300 	strd	r1, r3, [r0]
 8005410:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <rand+0x70>)
 8005412:	6083      	str	r3, [r0, #8]
 8005414:	230b      	movs	r3, #11
 8005416:	8183      	strh	r3, [r0, #12]
 8005418:	2100      	movs	r1, #0
 800541a:	2001      	movs	r0, #1
 800541c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005422:	480e      	ldr	r0, [pc, #56]	@ (800545c <rand+0x74>)
 8005424:	690b      	ldr	r3, [r1, #16]
 8005426:	694c      	ldr	r4, [r1, #20]
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <rand+0x78>)
 800542a:	4358      	muls	r0, r3
 800542c:	fb02 0004 	mla	r0, r2, r4, r0
 8005430:	fba3 3202 	umull	r3, r2, r3, r2
 8005434:	3301      	adds	r3, #1
 8005436:	eb40 0002 	adc.w	r0, r0, r2
 800543a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800543e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005442:	bd10      	pop	{r4, pc}
 8005444:	20000018 	.word	0x20000018
 8005448:	080067b8 	.word	0x080067b8
 800544c:	080067cf 	.word	0x080067cf
 8005450:	abcd330e 	.word	0xabcd330e
 8005454:	e66d1234 	.word	0xe66d1234
 8005458:	0005deec 	.word	0x0005deec
 800545c:	5851f42d 	.word	0x5851f42d
 8005460:	4c957f2d 	.word	0x4c957f2d

08005464 <std>:
 8005464:	2300      	movs	r3, #0
 8005466:	b510      	push	{r4, lr}
 8005468:	4604      	mov	r4, r0
 800546a:	e9c0 3300 	strd	r3, r3, [r0]
 800546e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005472:	6083      	str	r3, [r0, #8]
 8005474:	8181      	strh	r1, [r0, #12]
 8005476:	6643      	str	r3, [r0, #100]	@ 0x64
 8005478:	81c2      	strh	r2, [r0, #14]
 800547a:	6183      	str	r3, [r0, #24]
 800547c:	4619      	mov	r1, r3
 800547e:	2208      	movs	r2, #8
 8005480:	305c      	adds	r0, #92	@ 0x5c
 8005482:	f000 f916 	bl	80056b2 <memset>
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <std+0x58>)
 8005488:	6263      	str	r3, [r4, #36]	@ 0x24
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <std+0x5c>)
 800548c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <std+0x60>)
 8005490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <std+0x64>)
 8005494:	6323      	str	r3, [r4, #48]	@ 0x30
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <std+0x68>)
 8005498:	6224      	str	r4, [r4, #32]
 800549a:	429c      	cmp	r4, r3
 800549c:	d006      	beq.n	80054ac <std+0x48>
 800549e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054a2:	4294      	cmp	r4, r2
 80054a4:	d002      	beq.n	80054ac <std+0x48>
 80054a6:	33d0      	adds	r3, #208	@ 0xd0
 80054a8:	429c      	cmp	r4, r3
 80054aa:	d105      	bne.n	80054b8 <std+0x54>
 80054ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b4:	f000 b976 	b.w	80057a4 <__retarget_lock_init_recursive>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	bf00      	nop
 80054bc:	0800562d 	.word	0x0800562d
 80054c0:	0800564f 	.word	0x0800564f
 80054c4:	08005687 	.word	0x08005687
 80054c8:	080056ab 	.word	0x080056ab
 80054cc:	200004fc 	.word	0x200004fc

080054d0 <stdio_exit_handler>:
 80054d0:	4a02      	ldr	r2, [pc, #8]	@ (80054dc <stdio_exit_handler+0xc>)
 80054d2:	4903      	ldr	r1, [pc, #12]	@ (80054e0 <stdio_exit_handler+0x10>)
 80054d4:	4803      	ldr	r0, [pc, #12]	@ (80054e4 <stdio_exit_handler+0x14>)
 80054d6:	f000 b869 	b.w	80055ac <_fwalk_sglue>
 80054da:	bf00      	nop
 80054dc:	2000000c 	.word	0x2000000c
 80054e0:	080060b9 	.word	0x080060b9
 80054e4:	2000001c 	.word	0x2000001c

080054e8 <cleanup_stdio>:
 80054e8:	6841      	ldr	r1, [r0, #4]
 80054ea:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <cleanup_stdio+0x34>)
 80054ec:	4299      	cmp	r1, r3
 80054ee:	b510      	push	{r4, lr}
 80054f0:	4604      	mov	r4, r0
 80054f2:	d001      	beq.n	80054f8 <cleanup_stdio+0x10>
 80054f4:	f000 fde0 	bl	80060b8 <_fflush_r>
 80054f8:	68a1      	ldr	r1, [r4, #8]
 80054fa:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <cleanup_stdio+0x38>)
 80054fc:	4299      	cmp	r1, r3
 80054fe:	d002      	beq.n	8005506 <cleanup_stdio+0x1e>
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fdd9 	bl	80060b8 <_fflush_r>
 8005506:	68e1      	ldr	r1, [r4, #12]
 8005508:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <cleanup_stdio+0x3c>)
 800550a:	4299      	cmp	r1, r3
 800550c:	d004      	beq.n	8005518 <cleanup_stdio+0x30>
 800550e:	4620      	mov	r0, r4
 8005510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005514:	f000 bdd0 	b.w	80060b8 <_fflush_r>
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	200004fc 	.word	0x200004fc
 8005520:	20000564 	.word	0x20000564
 8005524:	200005cc 	.word	0x200005cc

08005528 <global_stdio_init.part.0>:
 8005528:	b510      	push	{r4, lr}
 800552a:	4b0b      	ldr	r3, [pc, #44]	@ (8005558 <global_stdio_init.part.0+0x30>)
 800552c:	4c0b      	ldr	r4, [pc, #44]	@ (800555c <global_stdio_init.part.0+0x34>)
 800552e:	4a0c      	ldr	r2, [pc, #48]	@ (8005560 <global_stdio_init.part.0+0x38>)
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	4620      	mov	r0, r4
 8005534:	2200      	movs	r2, #0
 8005536:	2104      	movs	r1, #4
 8005538:	f7ff ff94 	bl	8005464 <std>
 800553c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005540:	2201      	movs	r2, #1
 8005542:	2109      	movs	r1, #9
 8005544:	f7ff ff8e 	bl	8005464 <std>
 8005548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800554c:	2202      	movs	r2, #2
 800554e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005552:	2112      	movs	r1, #18
 8005554:	f7ff bf86 	b.w	8005464 <std>
 8005558:	20000634 	.word	0x20000634
 800555c:	200004fc 	.word	0x200004fc
 8005560:	080054d1 	.word	0x080054d1

08005564 <__sfp_lock_acquire>:
 8005564:	4801      	ldr	r0, [pc, #4]	@ (800556c <__sfp_lock_acquire+0x8>)
 8005566:	f000 b91e 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 800556a:	bf00      	nop
 800556c:	2000063d 	.word	0x2000063d

08005570 <__sfp_lock_release>:
 8005570:	4801      	ldr	r0, [pc, #4]	@ (8005578 <__sfp_lock_release+0x8>)
 8005572:	f000 b919 	b.w	80057a8 <__retarget_lock_release_recursive>
 8005576:	bf00      	nop
 8005578:	2000063d 	.word	0x2000063d

0800557c <__sinit>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	f7ff fff0 	bl	8005564 <__sfp_lock_acquire>
 8005584:	6a23      	ldr	r3, [r4, #32]
 8005586:	b11b      	cbz	r3, 8005590 <__sinit+0x14>
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	f7ff bff0 	b.w	8005570 <__sfp_lock_release>
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <__sinit+0x28>)
 8005592:	6223      	str	r3, [r4, #32]
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <__sinit+0x2c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f5      	bne.n	8005588 <__sinit+0xc>
 800559c:	f7ff ffc4 	bl	8005528 <global_stdio_init.part.0>
 80055a0:	e7f2      	b.n	8005588 <__sinit+0xc>
 80055a2:	bf00      	nop
 80055a4:	080054e9 	.word	0x080054e9
 80055a8:	20000634 	.word	0x20000634

080055ac <_fwalk_sglue>:
 80055ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b0:	4607      	mov	r7, r0
 80055b2:	4688      	mov	r8, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	2600      	movs	r6, #0
 80055b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055bc:	f1b9 0901 	subs.w	r9, r9, #1
 80055c0:	d505      	bpl.n	80055ce <_fwalk_sglue+0x22>
 80055c2:	6824      	ldr	r4, [r4, #0]
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	d1f7      	bne.n	80055b8 <_fwalk_sglue+0xc>
 80055c8:	4630      	mov	r0, r6
 80055ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ce:	89ab      	ldrh	r3, [r5, #12]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d907      	bls.n	80055e4 <_fwalk_sglue+0x38>
 80055d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055d8:	3301      	adds	r3, #1
 80055da:	d003      	beq.n	80055e4 <_fwalk_sglue+0x38>
 80055dc:	4629      	mov	r1, r5
 80055de:	4638      	mov	r0, r7
 80055e0:	47c0      	blx	r8
 80055e2:	4306      	orrs	r6, r0
 80055e4:	3568      	adds	r5, #104	@ 0x68
 80055e6:	e7e9      	b.n	80055bc <_fwalk_sglue+0x10>

080055e8 <siprintf>:
 80055e8:	b40e      	push	{r1, r2, r3}
 80055ea:	b510      	push	{r4, lr}
 80055ec:	b09d      	sub	sp, #116	@ 0x74
 80055ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80055f0:	9002      	str	r0, [sp, #8]
 80055f2:	9006      	str	r0, [sp, #24]
 80055f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055f8:	480a      	ldr	r0, [pc, #40]	@ (8005624 <siprintf+0x3c>)
 80055fa:	9107      	str	r1, [sp, #28]
 80055fc:	9104      	str	r1, [sp, #16]
 80055fe:	490a      	ldr	r1, [pc, #40]	@ (8005628 <siprintf+0x40>)
 8005600:	f853 2b04 	ldr.w	r2, [r3], #4
 8005604:	9105      	str	r1, [sp, #20]
 8005606:	2400      	movs	r4, #0
 8005608:	a902      	add	r1, sp, #8
 800560a:	6800      	ldr	r0, [r0, #0]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005610:	f000 fa46 	bl	8005aa0 <_svfiprintf_r>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	701c      	strb	r4, [r3, #0]
 8005618:	b01d      	add	sp, #116	@ 0x74
 800561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800561e:	b003      	add	sp, #12
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000018 	.word	0x20000018
 8005628:	ffff0208 	.word	0xffff0208

0800562c <__sread>:
 800562c:	b510      	push	{r4, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	f000 f868 	bl	8005708 <_read_r>
 8005638:	2800      	cmp	r0, #0
 800563a:	bfab      	itete	ge
 800563c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800563e:	89a3      	ldrhlt	r3, [r4, #12]
 8005640:	181b      	addge	r3, r3, r0
 8005642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005646:	bfac      	ite	ge
 8005648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800564a:	81a3      	strhlt	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__swrite>:
 800564e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	461f      	mov	r7, r3
 8005654:	898b      	ldrh	r3, [r1, #12]
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	4616      	mov	r6, r2
 800565e:	d505      	bpl.n	800566c <__swrite+0x1e>
 8005660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005664:	2302      	movs	r3, #2
 8005666:	2200      	movs	r2, #0
 8005668:	f000 f83c 	bl	80056e4 <_lseek_r>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	4632      	mov	r2, r6
 800567a:	463b      	mov	r3, r7
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	f000 b853 	b.w	800572c <_write_r>

08005686 <__sseek>:
 8005686:	b510      	push	{r4, lr}
 8005688:	460c      	mov	r4, r1
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 f829 	bl	80056e4 <_lseek_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	bf15      	itete	ne
 8005698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800569a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800569e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056a2:	81a3      	strheq	r3, [r4, #12]
 80056a4:	bf18      	it	ne
 80056a6:	81a3      	strhne	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__sclose>:
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 b809 	b.w	80056c4 <_close_r>

080056b2 <memset>:
 80056b2:	4402      	add	r2, r0
 80056b4:	4603      	mov	r3, r0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	f803 1b01 	strb.w	r1, [r3], #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>
	...

080056c4 <_close_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d06      	ldr	r5, [pc, #24]	@ (80056e0 <_close_r+0x1c>)
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fb fb22 	bl	8000d18 <_close>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_close_r+0x1a>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_close_r+0x1a>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20000638 	.word	0x20000638

080056e4 <_lseek_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d07      	ldr	r5, [pc, #28]	@ (8005704 <_lseek_r+0x20>)
 80056e8:	4604      	mov	r4, r0
 80056ea:	4608      	mov	r0, r1
 80056ec:	4611      	mov	r1, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	602a      	str	r2, [r5, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f7fb fb37 	bl	8000d66 <_lseek>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_lseek_r+0x1e>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_lseek_r+0x1e>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000638 	.word	0x20000638

08005708 <_read_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d07      	ldr	r5, [pc, #28]	@ (8005728 <_read_r+0x20>)
 800570c:	4604      	mov	r4, r0
 800570e:	4608      	mov	r0, r1
 8005710:	4611      	mov	r1, r2
 8005712:	2200      	movs	r2, #0
 8005714:	602a      	str	r2, [r5, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f7fb fac5 	bl	8000ca6 <_read>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_read_r+0x1e>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_read_r+0x1e>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	20000638 	.word	0x20000638

0800572c <_write_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	@ (800574c <_write_r+0x20>)
 8005730:	4604      	mov	r4, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	602a      	str	r2, [r5, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fb fad0 	bl	8000ce0 <_write>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_write_r+0x1e>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_write_r+0x1e>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000638 	.word	0x20000638

08005750 <__errno>:
 8005750:	4b01      	ldr	r3, [pc, #4]	@ (8005758 <__errno+0x8>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000018 	.word	0x20000018

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4d0d      	ldr	r5, [pc, #52]	@ (8005794 <__libc_init_array+0x38>)
 8005760:	4c0d      	ldr	r4, [pc, #52]	@ (8005798 <__libc_init_array+0x3c>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	2600      	movs	r6, #0
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	4d0b      	ldr	r5, [pc, #44]	@ (800579c <__libc_init_array+0x40>)
 800576e:	4c0c      	ldr	r4, [pc, #48]	@ (80057a0 <__libc_init_array+0x44>)
 8005770:	f000 ffee 	bl	8006750 <_init>
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	2600      	movs	r6, #0
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	f855 3b04 	ldr.w	r3, [r5], #4
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	f855 3b04 	ldr.w	r3, [r5], #4
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	080068a0 	.word	0x080068a0
 8005798:	080068a0 	.word	0x080068a0
 800579c:	080068a0 	.word	0x080068a0
 80057a0:	080068a4 	.word	0x080068a4

080057a4 <__retarget_lock_init_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <__retarget_lock_acquire_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <__retarget_lock_release_recursive>:
 80057a8:	4770      	bx	lr
	...

080057ac <__assert_func>:
 80057ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057ae:	4614      	mov	r4, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <__assert_func+0x2c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4605      	mov	r5, r0
 80057b8:	68d8      	ldr	r0, [r3, #12]
 80057ba:	b14c      	cbz	r4, 80057d0 <__assert_func+0x24>
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <__assert_func+0x30>)
 80057be:	9100      	str	r1, [sp, #0]
 80057c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057c4:	4906      	ldr	r1, [pc, #24]	@ (80057e0 <__assert_func+0x34>)
 80057c6:	462b      	mov	r3, r5
 80057c8:	f000 fc9e 	bl	8006108 <fiprintf>
 80057cc:	f000 fce6 	bl	800619c <abort>
 80057d0:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <__assert_func+0x38>)
 80057d2:	461c      	mov	r4, r3
 80057d4:	e7f3      	b.n	80057be <__assert_func+0x12>
 80057d6:	bf00      	nop
 80057d8:	20000018 	.word	0x20000018
 80057dc:	08006827 	.word	0x08006827
 80057e0:	08006834 	.word	0x08006834
 80057e4:	08006862 	.word	0x08006862

080057e8 <_free_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4605      	mov	r5, r0
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d041      	beq.n	8005874 <_free_r+0x8c>
 80057f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f4:	1f0c      	subs	r4, r1, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfb8      	it	lt
 80057fa:	18e4      	addlt	r4, r4, r3
 80057fc:	f000 f8e8 	bl	80059d0 <__malloc_lock>
 8005800:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <_free_r+0x90>)
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	b933      	cbnz	r3, 8005814 <_free_r+0x2c>
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	4628      	mov	r0, r5
 800580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005810:	f000 b8e4 	b.w	80059dc <__malloc_unlock>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d908      	bls.n	800582a <_free_r+0x42>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	1821      	adds	r1, r4, r0
 800581c:	428b      	cmp	r3, r1
 800581e:	bf01      	itttt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	1809      	addeq	r1, r1, r0
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	e7ed      	b.n	8005806 <_free_r+0x1e>
 800582a:	461a      	mov	r2, r3
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b10b      	cbz	r3, 8005834 <_free_r+0x4c>
 8005830:	42a3      	cmp	r3, r4
 8005832:	d9fa      	bls.n	800582a <_free_r+0x42>
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	1850      	adds	r0, r2, r1
 8005838:	42a0      	cmp	r0, r4
 800583a:	d10b      	bne.n	8005854 <_free_r+0x6c>
 800583c:	6820      	ldr	r0, [r4, #0]
 800583e:	4401      	add	r1, r0
 8005840:	1850      	adds	r0, r2, r1
 8005842:	4283      	cmp	r3, r0
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	d1e0      	bne.n	800580a <_free_r+0x22>
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	4408      	add	r0, r1
 8005850:	6010      	str	r0, [r2, #0]
 8005852:	e7da      	b.n	800580a <_free_r+0x22>
 8005854:	d902      	bls.n	800585c <_free_r+0x74>
 8005856:	230c      	movs	r3, #12
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	e7d6      	b.n	800580a <_free_r+0x22>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	1821      	adds	r1, r4, r0
 8005860:	428b      	cmp	r3, r1
 8005862:	bf04      	itt	eq
 8005864:	6819      	ldreq	r1, [r3, #0]
 8005866:	685b      	ldreq	r3, [r3, #4]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	bf04      	itt	eq
 800586c:	1809      	addeq	r1, r1, r0
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6054      	str	r4, [r2, #4]
 8005872:	e7ca      	b.n	800580a <_free_r+0x22>
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	20000644 	.word	0x20000644

0800587c <malloc>:
 800587c:	4b02      	ldr	r3, [pc, #8]	@ (8005888 <malloc+0xc>)
 800587e:	4601      	mov	r1, r0
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	f000 b825 	b.w	80058d0 <_malloc_r>
 8005886:	bf00      	nop
 8005888:	20000018 	.word	0x20000018

0800588c <sbrk_aligned>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4e0f      	ldr	r6, [pc, #60]	@ (80058cc <sbrk_aligned+0x40>)
 8005890:	460c      	mov	r4, r1
 8005892:	6831      	ldr	r1, [r6, #0]
 8005894:	4605      	mov	r5, r0
 8005896:	b911      	cbnz	r1, 800589e <sbrk_aligned+0x12>
 8005898:	f000 fc62 	bl	8006160 <_sbrk_r>
 800589c:	6030      	str	r0, [r6, #0]
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fc5d 	bl	8006160 <_sbrk_r>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d103      	bne.n	80058b2 <sbrk_aligned+0x26>
 80058aa:	f04f 34ff 	mov.w	r4, #4294967295
 80058ae:	4620      	mov	r0, r4
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	1cc4      	adds	r4, r0, #3
 80058b4:	f024 0403 	bic.w	r4, r4, #3
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	d0f8      	beq.n	80058ae <sbrk_aligned+0x22>
 80058bc:	1a21      	subs	r1, r4, r0
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 fc4e 	bl	8006160 <_sbrk_r>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d1f2      	bne.n	80058ae <sbrk_aligned+0x22>
 80058c8:	e7ef      	b.n	80058aa <sbrk_aligned+0x1e>
 80058ca:	bf00      	nop
 80058cc:	20000640 	.word	0x20000640

080058d0 <_malloc_r>:
 80058d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	1ccd      	adds	r5, r1, #3
 80058d6:	f025 0503 	bic.w	r5, r5, #3
 80058da:	3508      	adds	r5, #8
 80058dc:	2d0c      	cmp	r5, #12
 80058de:	bf38      	it	cc
 80058e0:	250c      	movcc	r5, #12
 80058e2:	2d00      	cmp	r5, #0
 80058e4:	4606      	mov	r6, r0
 80058e6:	db01      	blt.n	80058ec <_malloc_r+0x1c>
 80058e8:	42a9      	cmp	r1, r5
 80058ea:	d904      	bls.n	80058f6 <_malloc_r+0x26>
 80058ec:	230c      	movs	r3, #12
 80058ee:	6033      	str	r3, [r6, #0]
 80058f0:	2000      	movs	r0, #0
 80058f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059cc <_malloc_r+0xfc>
 80058fa:	f000 f869 	bl	80059d0 <__malloc_lock>
 80058fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005902:	461c      	mov	r4, r3
 8005904:	bb44      	cbnz	r4, 8005958 <_malloc_r+0x88>
 8005906:	4629      	mov	r1, r5
 8005908:	4630      	mov	r0, r6
 800590a:	f7ff ffbf 	bl	800588c <sbrk_aligned>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	4604      	mov	r4, r0
 8005912:	d158      	bne.n	80059c6 <_malloc_r+0xf6>
 8005914:	f8d8 4000 	ldr.w	r4, [r8]
 8005918:	4627      	mov	r7, r4
 800591a:	2f00      	cmp	r7, #0
 800591c:	d143      	bne.n	80059a6 <_malloc_r+0xd6>
 800591e:	2c00      	cmp	r4, #0
 8005920:	d04b      	beq.n	80059ba <_malloc_r+0xea>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	4639      	mov	r1, r7
 8005926:	4630      	mov	r0, r6
 8005928:	eb04 0903 	add.w	r9, r4, r3
 800592c:	f000 fc18 	bl	8006160 <_sbrk_r>
 8005930:	4581      	cmp	r9, r0
 8005932:	d142      	bne.n	80059ba <_malloc_r+0xea>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	1a6d      	subs	r5, r5, r1
 8005938:	4629      	mov	r1, r5
 800593a:	4630      	mov	r0, r6
 800593c:	f7ff ffa6 	bl	800588c <sbrk_aligned>
 8005940:	3001      	adds	r0, #1
 8005942:	d03a      	beq.n	80059ba <_malloc_r+0xea>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	442b      	add	r3, r5
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	f8d8 3000 	ldr.w	r3, [r8]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	bb62      	cbnz	r2, 80059ac <_malloc_r+0xdc>
 8005952:	f8c8 7000 	str.w	r7, [r8]
 8005956:	e00f      	b.n	8005978 <_malloc_r+0xa8>
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	1b52      	subs	r2, r2, r5
 800595c:	d420      	bmi.n	80059a0 <_malloc_r+0xd0>
 800595e:	2a0b      	cmp	r2, #11
 8005960:	d917      	bls.n	8005992 <_malloc_r+0xc2>
 8005962:	1961      	adds	r1, r4, r5
 8005964:	42a3      	cmp	r3, r4
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	bf18      	it	ne
 800596a:	6059      	strne	r1, [r3, #4]
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	bf08      	it	eq
 8005970:	f8c8 1000 	streq.w	r1, [r8]
 8005974:	5162      	str	r2, [r4, r5]
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f82f 	bl	80059dc <__malloc_unlock>
 800597e:	f104 000b 	add.w	r0, r4, #11
 8005982:	1d23      	adds	r3, r4, #4
 8005984:	f020 0007 	bic.w	r0, r0, #7
 8005988:	1ac2      	subs	r2, r0, r3
 800598a:	bf1c      	itt	ne
 800598c:	1a1b      	subne	r3, r3, r0
 800598e:	50a3      	strne	r3, [r4, r2]
 8005990:	e7af      	b.n	80058f2 <_malloc_r+0x22>
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	bf0c      	ite	eq
 8005998:	f8c8 2000 	streq.w	r2, [r8]
 800599c:	605a      	strne	r2, [r3, #4]
 800599e:	e7eb      	b.n	8005978 <_malloc_r+0xa8>
 80059a0:	4623      	mov	r3, r4
 80059a2:	6864      	ldr	r4, [r4, #4]
 80059a4:	e7ae      	b.n	8005904 <_malloc_r+0x34>
 80059a6:	463c      	mov	r4, r7
 80059a8:	687f      	ldr	r7, [r7, #4]
 80059aa:	e7b6      	b.n	800591a <_malloc_r+0x4a>
 80059ac:	461a      	mov	r2, r3
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d1fb      	bne.n	80059ac <_malloc_r+0xdc>
 80059b4:	2300      	movs	r3, #0
 80059b6:	6053      	str	r3, [r2, #4]
 80059b8:	e7de      	b.n	8005978 <_malloc_r+0xa8>
 80059ba:	230c      	movs	r3, #12
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 f80c 	bl	80059dc <__malloc_unlock>
 80059c4:	e794      	b.n	80058f0 <_malloc_r+0x20>
 80059c6:	6005      	str	r5, [r0, #0]
 80059c8:	e7d6      	b.n	8005978 <_malloc_r+0xa8>
 80059ca:	bf00      	nop
 80059cc:	20000644 	.word	0x20000644

080059d0 <__malloc_lock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__malloc_lock+0x8>)
 80059d2:	f7ff bee8 	b.w	80057a6 <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	2000063c 	.word	0x2000063c

080059dc <__malloc_unlock>:
 80059dc:	4801      	ldr	r0, [pc, #4]	@ (80059e4 <__malloc_unlock+0x8>)
 80059de:	f7ff bee3 	b.w	80057a8 <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	2000063c 	.word	0x2000063c

080059e8 <__ssputs_r>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	688e      	ldr	r6, [r1, #8]
 80059ee:	461f      	mov	r7, r3
 80059f0:	42be      	cmp	r6, r7
 80059f2:	680b      	ldr	r3, [r1, #0]
 80059f4:	4682      	mov	sl, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	4690      	mov	r8, r2
 80059fa:	d82d      	bhi.n	8005a58 <__ssputs_r+0x70>
 80059fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a04:	d026      	beq.n	8005a54 <__ssputs_r+0x6c>
 8005a06:	6965      	ldr	r5, [r4, #20]
 8005a08:	6909      	ldr	r1, [r1, #16]
 8005a0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a0e:	eba3 0901 	sub.w	r9, r3, r1
 8005a12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a16:	1c7b      	adds	r3, r7, #1
 8005a18:	444b      	add	r3, r9
 8005a1a:	106d      	asrs	r5, r5, #1
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	bf38      	it	cc
 8005a20:	461d      	movcc	r5, r3
 8005a22:	0553      	lsls	r3, r2, #21
 8005a24:	d527      	bpl.n	8005a76 <__ssputs_r+0x8e>
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7ff ff52 	bl	80058d0 <_malloc_r>
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	b360      	cbz	r0, 8005a8a <__ssputs_r+0xa2>
 8005a30:	6921      	ldr	r1, [r4, #16]
 8005a32:	464a      	mov	r2, r9
 8005a34:	f000 fba4 	bl	8006180 <memcpy>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	6126      	str	r6, [r4, #16]
 8005a46:	6165      	str	r5, [r4, #20]
 8005a48:	444e      	add	r6, r9
 8005a4a:	eba5 0509 	sub.w	r5, r5, r9
 8005a4e:	6026      	str	r6, [r4, #0]
 8005a50:	60a5      	str	r5, [r4, #8]
 8005a52:	463e      	mov	r6, r7
 8005a54:	42be      	cmp	r6, r7
 8005a56:	d900      	bls.n	8005a5a <__ssputs_r+0x72>
 8005a58:	463e      	mov	r6, r7
 8005a5a:	6820      	ldr	r0, [r4, #0]
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4641      	mov	r1, r8
 8005a60:	f000 fb64 	bl	800612c <memmove>
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	1b9b      	subs	r3, r3, r6
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	4433      	add	r3, r6
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2000      	movs	r0, #0
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	462a      	mov	r2, r5
 8005a78:	f000 fb97 	bl	80061aa <_realloc_r>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d1e0      	bne.n	8005a44 <__ssputs_r+0x5c>
 8005a82:	6921      	ldr	r1, [r4, #16]
 8005a84:	4650      	mov	r0, sl
 8005a86:	f7ff feaf 	bl	80057e8 <_free_r>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f8ca 3000 	str.w	r3, [sl]
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e7e9      	b.n	8005a72 <__ssputs_r+0x8a>
	...

08005aa0 <_svfiprintf_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	4698      	mov	r8, r3
 8005aa6:	898b      	ldrh	r3, [r1, #12]
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	b09d      	sub	sp, #116	@ 0x74
 8005aac:	4607      	mov	r7, r0
 8005aae:	460d      	mov	r5, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	d510      	bpl.n	8005ad6 <_svfiprintf_r+0x36>
 8005ab4:	690b      	ldr	r3, [r1, #16]
 8005ab6:	b973      	cbnz	r3, 8005ad6 <_svfiprintf_r+0x36>
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	f7ff ff09 	bl	80058d0 <_malloc_r>
 8005abe:	6028      	str	r0, [r5, #0]
 8005ac0:	6128      	str	r0, [r5, #16]
 8005ac2:	b930      	cbnz	r0, 8005ad2 <_svfiprintf_r+0x32>
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	b01d      	add	sp, #116	@ 0x74
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2340      	movs	r3, #64	@ 0x40
 8005ad4:	616b      	str	r3, [r5, #20]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ada:	2320      	movs	r3, #32
 8005adc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae4:	2330      	movs	r3, #48	@ 0x30
 8005ae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c84 <_svfiprintf_r+0x1e4>
 8005aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005aee:	f04f 0901 	mov.w	r9, #1
 8005af2:	4623      	mov	r3, r4
 8005af4:	469a      	mov	sl, r3
 8005af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afa:	b10a      	cbz	r2, 8005b00 <_svfiprintf_r+0x60>
 8005afc:	2a25      	cmp	r2, #37	@ 0x25
 8005afe:	d1f9      	bne.n	8005af4 <_svfiprintf_r+0x54>
 8005b00:	ebba 0b04 	subs.w	fp, sl, r4
 8005b04:	d00b      	beq.n	8005b1e <_svfiprintf_r+0x7e>
 8005b06:	465b      	mov	r3, fp
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	f7ff ff6b 	bl	80059e8 <__ssputs_r>
 8005b12:	3001      	adds	r0, #1
 8005b14:	f000 80a7 	beq.w	8005c66 <_svfiprintf_r+0x1c6>
 8005b18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b1a:	445a      	add	r2, fp
 8005b1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 809f 	beq.w	8005c66 <_svfiprintf_r+0x1c6>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b32:	f10a 0a01 	add.w	sl, sl, #1
 8005b36:	9304      	str	r3, [sp, #16]
 8005b38:	9307      	str	r3, [sp, #28]
 8005b3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b40:	4654      	mov	r4, sl
 8005b42:	2205      	movs	r2, #5
 8005b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b48:	484e      	ldr	r0, [pc, #312]	@ (8005c84 <_svfiprintf_r+0x1e4>)
 8005b4a:	f7fa fb49 	bl	80001e0 <memchr>
 8005b4e:	9a04      	ldr	r2, [sp, #16]
 8005b50:	b9d8      	cbnz	r0, 8005b8a <_svfiprintf_r+0xea>
 8005b52:	06d0      	lsls	r0, r2, #27
 8005b54:	bf44      	itt	mi
 8005b56:	2320      	movmi	r3, #32
 8005b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b5c:	0711      	lsls	r1, r2, #28
 8005b5e:	bf44      	itt	mi
 8005b60:	232b      	movmi	r3, #43	@ 0x2b
 8005b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b66:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b6c:	d015      	beq.n	8005b9a <_svfiprintf_r+0xfa>
 8005b6e:	9a07      	ldr	r2, [sp, #28]
 8005b70:	4654      	mov	r4, sl
 8005b72:	2000      	movs	r0, #0
 8005b74:	f04f 0c0a 	mov.w	ip, #10
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b7e:	3b30      	subs	r3, #48	@ 0x30
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d94b      	bls.n	8005c1c <_svfiprintf_r+0x17c>
 8005b84:	b1b0      	cbz	r0, 8005bb4 <_svfiprintf_r+0x114>
 8005b86:	9207      	str	r2, [sp, #28]
 8005b88:	e014      	b.n	8005bb4 <_svfiprintf_r+0x114>
 8005b8a:	eba0 0308 	sub.w	r3, r0, r8
 8005b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b92:	4313      	orrs	r3, r2
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	46a2      	mov	sl, r4
 8005b98:	e7d2      	b.n	8005b40 <_svfiprintf_r+0xa0>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	1d19      	adds	r1, r3, #4
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	9103      	str	r1, [sp, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbb      	ittet	lt
 8005ba6:	425b      	neglt	r3, r3
 8005ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bac:	9307      	strge	r3, [sp, #28]
 8005bae:	9307      	strlt	r3, [sp, #28]
 8005bb0:	bfb8      	it	lt
 8005bb2:	9204      	strlt	r2, [sp, #16]
 8005bb4:	7823      	ldrb	r3, [r4, #0]
 8005bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb8:	d10a      	bne.n	8005bd0 <_svfiprintf_r+0x130>
 8005bba:	7863      	ldrb	r3, [r4, #1]
 8005bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bbe:	d132      	bne.n	8005c26 <_svfiprintf_r+0x186>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	9203      	str	r2, [sp, #12]
 8005bc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bcc:	3402      	adds	r4, #2
 8005bce:	9305      	str	r3, [sp, #20]
 8005bd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c94 <_svfiprintf_r+0x1f4>
 8005bd4:	7821      	ldrb	r1, [r4, #0]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	4650      	mov	r0, sl
 8005bda:	f7fa fb01 	bl	80001e0 <memchr>
 8005bde:	b138      	cbz	r0, 8005bf0 <_svfiprintf_r+0x150>
 8005be0:	9b04      	ldr	r3, [sp, #16]
 8005be2:	eba0 000a 	sub.w	r0, r0, sl
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	4082      	lsls	r2, r0
 8005bea:	4313      	orrs	r3, r2
 8005bec:	3401      	adds	r4, #1
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf4:	4824      	ldr	r0, [pc, #144]	@ (8005c88 <_svfiprintf_r+0x1e8>)
 8005bf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bfa:	2206      	movs	r2, #6
 8005bfc:	f7fa faf0 	bl	80001e0 <memchr>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d036      	beq.n	8005c72 <_svfiprintf_r+0x1d2>
 8005c04:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <_svfiprintf_r+0x1ec>)
 8005c06:	bb1b      	cbnz	r3, 8005c50 <_svfiprintf_r+0x1b0>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	3307      	adds	r3, #7
 8005c0c:	f023 0307 	bic.w	r3, r3, #7
 8005c10:	3308      	adds	r3, #8
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c16:	4433      	add	r3, r6
 8005c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1a:	e76a      	b.n	8005af2 <_svfiprintf_r+0x52>
 8005c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c20:	460c      	mov	r4, r1
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7a8      	b.n	8005b78 <_svfiprintf_r+0xd8>
 8005c26:	2300      	movs	r3, #0
 8005c28:	3401      	adds	r4, #1
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f04f 0c0a 	mov.w	ip, #10
 8005c32:	4620      	mov	r0, r4
 8005c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c38:	3a30      	subs	r2, #48	@ 0x30
 8005c3a:	2a09      	cmp	r2, #9
 8005c3c:	d903      	bls.n	8005c46 <_svfiprintf_r+0x1a6>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0c6      	beq.n	8005bd0 <_svfiprintf_r+0x130>
 8005c42:	9105      	str	r1, [sp, #20]
 8005c44:	e7c4      	b.n	8005bd0 <_svfiprintf_r+0x130>
 8005c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e7f0      	b.n	8005c32 <_svfiprintf_r+0x192>
 8005c50:	ab03      	add	r3, sp, #12
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	462a      	mov	r2, r5
 8005c56:	4b0e      	ldr	r3, [pc, #56]	@ (8005c90 <_svfiprintf_r+0x1f0>)
 8005c58:	a904      	add	r1, sp, #16
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f3af 8000 	nop.w
 8005c60:	1c42      	adds	r2, r0, #1
 8005c62:	4606      	mov	r6, r0
 8005c64:	d1d6      	bne.n	8005c14 <_svfiprintf_r+0x174>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	065b      	lsls	r3, r3, #25
 8005c6a:	f53f af2d 	bmi.w	8005ac8 <_svfiprintf_r+0x28>
 8005c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c70:	e72c      	b.n	8005acc <_svfiprintf_r+0x2c>
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	462a      	mov	r2, r5
 8005c78:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <_svfiprintf_r+0x1f0>)
 8005c7a:	a904      	add	r1, sp, #16
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f000 f879 	bl	8005d74 <_printf_i>
 8005c82:	e7ed      	b.n	8005c60 <_svfiprintf_r+0x1c0>
 8005c84:	08006863 	.word	0x08006863
 8005c88:	0800686d 	.word	0x0800686d
 8005c8c:	00000000 	.word	0x00000000
 8005c90:	080059e9 	.word	0x080059e9
 8005c94:	08006869 	.word	0x08006869

08005c98 <_printf_common>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	4698      	mov	r8, r3
 8005ca0:	688a      	ldr	r2, [r1, #8]
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	bfb8      	it	lt
 8005cac:	4613      	movlt	r3, r2
 8005cae:	6033      	str	r3, [r6, #0]
 8005cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	b10a      	cbz	r2, 8005cbe <_printf_common+0x26>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	0699      	lsls	r1, r3, #26
 8005cc2:	bf42      	ittt	mi
 8005cc4:	6833      	ldrmi	r3, [r6, #0]
 8005cc6:	3302      	addmi	r3, #2
 8005cc8:	6033      	strmi	r3, [r6, #0]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d106      	bne.n	8005ce0 <_printf_common+0x48>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	6832      	ldr	r2, [r6, #0]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc26      	bgt.n	8005d2e <_printf_common+0x96>
 8005ce0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	3b00      	subs	r3, #0
 8005ce8:	bf18      	it	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	0692      	lsls	r2, r2, #26
 8005cee:	d42b      	bmi.n	8005d48 <_printf_common+0xb0>
 8005cf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c8      	blx	r9
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d01e      	beq.n	8005d3c <_printf_common+0xa4>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	6922      	ldr	r2, [r4, #16]
 8005d02:	f003 0306 	and.w	r3, r3, #6
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	bf02      	ittt	eq
 8005d0a:	68e5      	ldreq	r5, [r4, #12]
 8005d0c:	6833      	ldreq	r3, [r6, #0]
 8005d0e:	1aed      	subeq	r5, r5, r3
 8005d10:	68a3      	ldr	r3, [r4, #8]
 8005d12:	bf0c      	ite	eq
 8005d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d18:	2500      	movne	r5, #0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bfc4      	itt	gt
 8005d1e:	1a9b      	subgt	r3, r3, r2
 8005d20:	18ed      	addgt	r5, r5, r3
 8005d22:	2600      	movs	r6, #0
 8005d24:	341a      	adds	r4, #26
 8005d26:	42b5      	cmp	r5, r6
 8005d28:	d11a      	bne.n	8005d60 <_printf_common+0xc8>
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e008      	b.n	8005d40 <_printf_common+0xa8>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4652      	mov	r2, sl
 8005d32:	4641      	mov	r1, r8
 8005d34:	4638      	mov	r0, r7
 8005d36:	47c8      	blx	r9
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d103      	bne.n	8005d44 <_printf_common+0xac>
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	3501      	adds	r5, #1
 8005d46:	e7c6      	b.n	8005cd6 <_printf_common+0x3e>
 8005d48:	18e1      	adds	r1, r4, r3
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	2030      	movs	r0, #48	@ 0x30
 8005d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d52:	4422      	add	r2, r4
 8005d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	e7c7      	b.n	8005cf0 <_printf_common+0x58>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4622      	mov	r2, r4
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c8      	blx	r9
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d0e6      	beq.n	8005d3c <_printf_common+0xa4>
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7d9      	b.n	8005d26 <_printf_common+0x8e>
	...

08005d74 <_printf_i>:
 8005d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	7e0f      	ldrb	r7, [r1, #24]
 8005d7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d7c:	2f78      	cmp	r7, #120	@ 0x78
 8005d7e:	4691      	mov	r9, r2
 8005d80:	4680      	mov	r8, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	469a      	mov	sl, r3
 8005d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d8a:	d807      	bhi.n	8005d9c <_printf_i+0x28>
 8005d8c:	2f62      	cmp	r7, #98	@ 0x62
 8005d8e:	d80a      	bhi.n	8005da6 <_printf_i+0x32>
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	f000 80d1 	beq.w	8005f38 <_printf_i+0x1c4>
 8005d96:	2f58      	cmp	r7, #88	@ 0x58
 8005d98:	f000 80b8 	beq.w	8005f0c <_printf_i+0x198>
 8005d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005da4:	e03a      	b.n	8005e1c <_printf_i+0xa8>
 8005da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005daa:	2b15      	cmp	r3, #21
 8005dac:	d8f6      	bhi.n	8005d9c <_printf_i+0x28>
 8005dae:	a101      	add	r1, pc, #4	@ (adr r1, 8005db4 <_printf_i+0x40>)
 8005db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005d9d 	.word	0x08005d9d
 8005dc0:	08005d9d 	.word	0x08005d9d
 8005dc4:	08005d9d 	.word	0x08005d9d
 8005dc8:	08005d9d 	.word	0x08005d9d
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005d9d 	.word	0x08005d9d
 8005dd4:	08005d9d 	.word	0x08005d9d
 8005dd8:	08005d9d 	.word	0x08005d9d
 8005ddc:	08005d9d 	.word	0x08005d9d
 8005de0:	08005f1f 	.word	0x08005f1f
 8005de4:	08005e4b 	.word	0x08005e4b
 8005de8:	08005ed9 	.word	0x08005ed9
 8005dec:	08005d9d 	.word	0x08005d9d
 8005df0:	08005d9d 	.word	0x08005d9d
 8005df4:	08005f41 	.word	0x08005f41
 8005df8:	08005d9d 	.word	0x08005d9d
 8005dfc:	08005e4b 	.word	0x08005e4b
 8005e00:	08005d9d 	.word	0x08005d9d
 8005e04:	08005d9d 	.word	0x08005d9d
 8005e08:	08005ee1 	.word	0x08005ee1
 8005e0c:	6833      	ldr	r3, [r6, #0]
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6032      	str	r2, [r6, #0]
 8005e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e09c      	b.n	8005f5a <_printf_i+0x1e6>
 8005e20:	6833      	ldr	r3, [r6, #0]
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	1d19      	adds	r1, r3, #4
 8005e26:	6031      	str	r1, [r6, #0]
 8005e28:	0606      	lsls	r6, r0, #24
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0xbc>
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	e003      	b.n	8005e38 <_printf_i+0xc4>
 8005e30:	0645      	lsls	r5, r0, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0xb8>
 8005e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	da03      	bge.n	8005e44 <_printf_i+0xd0>
 8005e3c:	232d      	movs	r3, #45	@ 0x2d
 8005e3e:	426d      	negs	r5, r5
 8005e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e44:	4858      	ldr	r0, [pc, #352]	@ (8005fa8 <_printf_i+0x234>)
 8005e46:	230a      	movs	r3, #10
 8005e48:	e011      	b.n	8005e6e <_printf_i+0xfa>
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	6833      	ldr	r3, [r6, #0]
 8005e4e:	0608      	lsls	r0, r1, #24
 8005e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e54:	d402      	bmi.n	8005e5c <_printf_i+0xe8>
 8005e56:	0649      	lsls	r1, r1, #25
 8005e58:	bf48      	it	mi
 8005e5a:	b2ad      	uxthmi	r5, r5
 8005e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e5e:	4852      	ldr	r0, [pc, #328]	@ (8005fa8 <_printf_i+0x234>)
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	bf14      	ite	ne
 8005e64:	230a      	movne	r3, #10
 8005e66:	2308      	moveq	r3, #8
 8005e68:	2100      	movs	r1, #0
 8005e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e6e:	6866      	ldr	r6, [r4, #4]
 8005e70:	60a6      	str	r6, [r4, #8]
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	db05      	blt.n	8005e82 <_printf_i+0x10e>
 8005e76:	6821      	ldr	r1, [r4, #0]
 8005e78:	432e      	orrs	r6, r5
 8005e7a:	f021 0104 	bic.w	r1, r1, #4
 8005e7e:	6021      	str	r1, [r4, #0]
 8005e80:	d04b      	beq.n	8005f1a <_printf_i+0x1a6>
 8005e82:	4616      	mov	r6, r2
 8005e84:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e88:	fb03 5711 	mls	r7, r3, r1, r5
 8005e8c:	5dc7      	ldrb	r7, [r0, r7]
 8005e8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e92:	462f      	mov	r7, r5
 8005e94:	42bb      	cmp	r3, r7
 8005e96:	460d      	mov	r5, r1
 8005e98:	d9f4      	bls.n	8005e84 <_printf_i+0x110>
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d10b      	bne.n	8005eb6 <_printf_i+0x142>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	07df      	lsls	r7, r3, #31
 8005ea2:	d508      	bpl.n	8005eb6 <_printf_i+0x142>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6861      	ldr	r1, [r4, #4]
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	bfde      	ittt	le
 8005eac:	2330      	movle	r3, #48	@ 0x30
 8005eae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eb6:	1b92      	subs	r2, r2, r6
 8005eb8:	6122      	str	r2, [r4, #16]
 8005eba:	f8cd a000 	str.w	sl, [sp]
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	aa03      	add	r2, sp, #12
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	f7ff fee7 	bl	8005c98 <_printf_common>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d14a      	bne.n	8005f64 <_printf_i+0x1f0>
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed2:	b004      	add	sp, #16
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f043 0320 	orr.w	r3, r3, #32
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	4832      	ldr	r0, [pc, #200]	@ (8005fac <_printf_i+0x238>)
 8005ee2:	2778      	movs	r7, #120	@ 0x78
 8005ee4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	6831      	ldr	r1, [r6, #0]
 8005eec:	061f      	lsls	r7, r3, #24
 8005eee:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ef2:	d402      	bmi.n	8005efa <_printf_i+0x186>
 8005ef4:	065f      	lsls	r7, r3, #25
 8005ef6:	bf48      	it	mi
 8005ef8:	b2ad      	uxthmi	r5, r5
 8005efa:	6031      	str	r1, [r6, #0]
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	bf44      	itt	mi
 8005f00:	f043 0320 	orrmi.w	r3, r3, #32
 8005f04:	6023      	strmi	r3, [r4, #0]
 8005f06:	b11d      	cbz	r5, 8005f10 <_printf_i+0x19c>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	e7ad      	b.n	8005e68 <_printf_i+0xf4>
 8005f0c:	4826      	ldr	r0, [pc, #152]	@ (8005fa8 <_printf_i+0x234>)
 8005f0e:	e7e9      	b.n	8005ee4 <_printf_i+0x170>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	e7f6      	b.n	8005f08 <_printf_i+0x194>
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	e7bd      	b.n	8005e9a <_printf_i+0x126>
 8005f1e:	6833      	ldr	r3, [r6, #0]
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	6961      	ldr	r1, [r4, #20]
 8005f24:	1d18      	adds	r0, r3, #4
 8005f26:	6030      	str	r0, [r6, #0]
 8005f28:	062e      	lsls	r6, r5, #24
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0x1be>
 8005f2e:	6019      	str	r1, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <_printf_i+0x1c4>
 8005f32:	0668      	lsls	r0, r5, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0x1ba>
 8005f36:	8019      	strh	r1, [r3, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	e7bc      	b.n	8005eba <_printf_i+0x146>
 8005f40:	6833      	ldr	r3, [r6, #0]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	6032      	str	r2, [r6, #0]
 8005f46:	681e      	ldr	r6, [r3, #0]
 8005f48:	6862      	ldr	r2, [r4, #4]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7fa f947 	bl	80001e0 <memchr>
 8005f52:	b108      	cbz	r0, 8005f58 <_printf_i+0x1e4>
 8005f54:	1b80      	subs	r0, r0, r6
 8005f56:	6060      	str	r0, [r4, #4]
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f62:	e7aa      	b.n	8005eba <_printf_i+0x146>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	4632      	mov	r2, r6
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	47d0      	blx	sl
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0ad      	beq.n	8005ece <_printf_i+0x15a>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	079b      	lsls	r3, r3, #30
 8005f76:	d413      	bmi.n	8005fa0 <_printf_i+0x22c>
 8005f78:	68e0      	ldr	r0, [r4, #12]
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	4298      	cmp	r0, r3
 8005f7e:	bfb8      	it	lt
 8005f80:	4618      	movlt	r0, r3
 8005f82:	e7a6      	b.n	8005ed2 <_printf_i+0x15e>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4632      	mov	r2, r6
 8005f88:	4649      	mov	r1, r9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	47d0      	blx	sl
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d09d      	beq.n	8005ece <_printf_i+0x15a>
 8005f92:	3501      	adds	r5, #1
 8005f94:	68e3      	ldr	r3, [r4, #12]
 8005f96:	9903      	ldr	r1, [sp, #12]
 8005f98:	1a5b      	subs	r3, r3, r1
 8005f9a:	42ab      	cmp	r3, r5
 8005f9c:	dcf2      	bgt.n	8005f84 <_printf_i+0x210>
 8005f9e:	e7eb      	b.n	8005f78 <_printf_i+0x204>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	f104 0619 	add.w	r6, r4, #25
 8005fa6:	e7f5      	b.n	8005f94 <_printf_i+0x220>
 8005fa8:	08006874 	.word	0x08006874
 8005fac:	08006885 	.word	0x08006885

08005fb0 <__sflush_r>:
 8005fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	0716      	lsls	r6, r2, #28
 8005fba:	4605      	mov	r5, r0
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	d454      	bmi.n	800606a <__sflush_r+0xba>
 8005fc0:	684b      	ldr	r3, [r1, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc02      	bgt.n	8005fcc <__sflush_r+0x1c>
 8005fc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dd48      	ble.n	800605e <__sflush_r+0xae>
 8005fcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d045      	beq.n	800605e <__sflush_r+0xae>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fd8:	682f      	ldr	r7, [r5, #0]
 8005fda:	6a21      	ldr	r1, [r4, #32]
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	d030      	beq.n	8006042 <__sflush_r+0x92>
 8005fe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	0759      	lsls	r1, r3, #29
 8005fe6:	d505      	bpl.n	8005ff4 <__sflush_r+0x44>
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fee:	b10b      	cbz	r3, 8005ff4 <__sflush_r+0x44>
 8005ff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ff8:	6a21      	ldr	r1, [r4, #32]
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b0      	blx	r6
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	d106      	bne.n	8006012 <__sflush_r+0x62>
 8006004:	6829      	ldr	r1, [r5, #0]
 8006006:	291d      	cmp	r1, #29
 8006008:	d82b      	bhi.n	8006062 <__sflush_r+0xb2>
 800600a:	4a2a      	ldr	r2, [pc, #168]	@ (80060b4 <__sflush_r+0x104>)
 800600c:	40ca      	lsrs	r2, r1
 800600e:	07d6      	lsls	r6, r2, #31
 8006010:	d527      	bpl.n	8006062 <__sflush_r+0xb2>
 8006012:	2200      	movs	r2, #0
 8006014:	6062      	str	r2, [r4, #4]
 8006016:	04d9      	lsls	r1, r3, #19
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	d504      	bpl.n	8006028 <__sflush_r+0x78>
 800601e:	1c42      	adds	r2, r0, #1
 8006020:	d101      	bne.n	8006026 <__sflush_r+0x76>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	b903      	cbnz	r3, 8006028 <__sflush_r+0x78>
 8006026:	6560      	str	r0, [r4, #84]	@ 0x54
 8006028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800602a:	602f      	str	r7, [r5, #0]
 800602c:	b1b9      	cbz	r1, 800605e <__sflush_r+0xae>
 800602e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006032:	4299      	cmp	r1, r3
 8006034:	d002      	beq.n	800603c <__sflush_r+0x8c>
 8006036:	4628      	mov	r0, r5
 8006038:	f7ff fbd6 	bl	80057e8 <_free_r>
 800603c:	2300      	movs	r3, #0
 800603e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006040:	e00d      	b.n	800605e <__sflush_r+0xae>
 8006042:	2301      	movs	r3, #1
 8006044:	4628      	mov	r0, r5
 8006046:	47b0      	blx	r6
 8006048:	4602      	mov	r2, r0
 800604a:	1c50      	adds	r0, r2, #1
 800604c:	d1c9      	bne.n	8005fe2 <__sflush_r+0x32>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0c6      	beq.n	8005fe2 <__sflush_r+0x32>
 8006054:	2b1d      	cmp	r3, #29
 8006056:	d001      	beq.n	800605c <__sflush_r+0xac>
 8006058:	2b16      	cmp	r3, #22
 800605a:	d11e      	bne.n	800609a <__sflush_r+0xea>
 800605c:	602f      	str	r7, [r5, #0]
 800605e:	2000      	movs	r0, #0
 8006060:	e022      	b.n	80060a8 <__sflush_r+0xf8>
 8006062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006066:	b21b      	sxth	r3, r3
 8006068:	e01b      	b.n	80060a2 <__sflush_r+0xf2>
 800606a:	690f      	ldr	r7, [r1, #16]
 800606c:	2f00      	cmp	r7, #0
 800606e:	d0f6      	beq.n	800605e <__sflush_r+0xae>
 8006070:	0793      	lsls	r3, r2, #30
 8006072:	680e      	ldr	r6, [r1, #0]
 8006074:	bf08      	it	eq
 8006076:	694b      	ldreq	r3, [r1, #20]
 8006078:	600f      	str	r7, [r1, #0]
 800607a:	bf18      	it	ne
 800607c:	2300      	movne	r3, #0
 800607e:	eba6 0807 	sub.w	r8, r6, r7
 8006082:	608b      	str	r3, [r1, #8]
 8006084:	f1b8 0f00 	cmp.w	r8, #0
 8006088:	dde9      	ble.n	800605e <__sflush_r+0xae>
 800608a:	6a21      	ldr	r1, [r4, #32]
 800608c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800608e:	4643      	mov	r3, r8
 8006090:	463a      	mov	r2, r7
 8006092:	4628      	mov	r0, r5
 8006094:	47b0      	blx	r6
 8006096:	2800      	cmp	r0, #0
 8006098:	dc08      	bgt.n	80060ac <__sflush_r+0xfc>
 800609a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ac:	4407      	add	r7, r0
 80060ae:	eba8 0800 	sub.w	r8, r8, r0
 80060b2:	e7e7      	b.n	8006084 <__sflush_r+0xd4>
 80060b4:	20400001 	.word	0x20400001

080060b8 <_fflush_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	690b      	ldr	r3, [r1, #16]
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b913      	cbnz	r3, 80060c8 <_fflush_r+0x10>
 80060c2:	2500      	movs	r5, #0
 80060c4:	4628      	mov	r0, r5
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	b118      	cbz	r0, 80060d2 <_fflush_r+0x1a>
 80060ca:	6a03      	ldr	r3, [r0, #32]
 80060cc:	b90b      	cbnz	r3, 80060d2 <_fflush_r+0x1a>
 80060ce:	f7ff fa55 	bl	800557c <__sinit>
 80060d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f3      	beq.n	80060c2 <_fflush_r+0xa>
 80060da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060dc:	07d0      	lsls	r0, r2, #31
 80060de:	d404      	bmi.n	80060ea <_fflush_r+0x32>
 80060e0:	0599      	lsls	r1, r3, #22
 80060e2:	d402      	bmi.n	80060ea <_fflush_r+0x32>
 80060e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e6:	f7ff fb5e 	bl	80057a6 <__retarget_lock_acquire_recursive>
 80060ea:	4628      	mov	r0, r5
 80060ec:	4621      	mov	r1, r4
 80060ee:	f7ff ff5f 	bl	8005fb0 <__sflush_r>
 80060f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f4:	07da      	lsls	r2, r3, #31
 80060f6:	4605      	mov	r5, r0
 80060f8:	d4e4      	bmi.n	80060c4 <_fflush_r+0xc>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	059b      	lsls	r3, r3, #22
 80060fe:	d4e1      	bmi.n	80060c4 <_fflush_r+0xc>
 8006100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006102:	f7ff fb51 	bl	80057a8 <__retarget_lock_release_recursive>
 8006106:	e7dd      	b.n	80060c4 <_fflush_r+0xc>

08006108 <fiprintf>:
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	b503      	push	{r0, r1, lr}
 800610c:	4601      	mov	r1, r0
 800610e:	ab03      	add	r3, sp, #12
 8006110:	4805      	ldr	r0, [pc, #20]	@ (8006128 <fiprintf+0x20>)
 8006112:	f853 2b04 	ldr.w	r2, [r3], #4
 8006116:	6800      	ldr	r0, [r0, #0]
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	f000 f89d 	bl	8006258 <_vfiprintf_r>
 800611e:	b002      	add	sp, #8
 8006120:	f85d eb04 	ldr.w	lr, [sp], #4
 8006124:	b003      	add	sp, #12
 8006126:	4770      	bx	lr
 8006128:	20000018 	.word	0x20000018

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4402      	add	r2, r0
 800614e:	4601      	mov	r1, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	@ (800617c <_sbrk_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fa fe08 	bl	8000d80 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000638 	.word	0x20000638

08006180 <memcpy>:
 8006180:	440a      	add	r2, r1
 8006182:	4291      	cmp	r1, r2
 8006184:	f100 33ff 	add.w	r3, r0, #4294967295
 8006188:	d100      	bne.n	800618c <memcpy+0xc>
 800618a:	4770      	bx	lr
 800618c:	b510      	push	{r4, lr}
 800618e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006196:	4291      	cmp	r1, r2
 8006198:	d1f9      	bne.n	800618e <memcpy+0xe>
 800619a:	bd10      	pop	{r4, pc}

0800619c <abort>:
 800619c:	b508      	push	{r3, lr}
 800619e:	2006      	movs	r0, #6
 80061a0:	f000 fa2e 	bl	8006600 <raise>
 80061a4:	2001      	movs	r0, #1
 80061a6:	f7fa fd73 	bl	8000c90 <_exit>

080061aa <_realloc_r>:
 80061aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ae:	4607      	mov	r7, r0
 80061b0:	4614      	mov	r4, r2
 80061b2:	460d      	mov	r5, r1
 80061b4:	b921      	cbnz	r1, 80061c0 <_realloc_r+0x16>
 80061b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	4611      	mov	r1, r2
 80061bc:	f7ff bb88 	b.w	80058d0 <_malloc_r>
 80061c0:	b92a      	cbnz	r2, 80061ce <_realloc_r+0x24>
 80061c2:	f7ff fb11 	bl	80057e8 <_free_r>
 80061c6:	4625      	mov	r5, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ce:	f000 fa33 	bl	8006638 <_malloc_usable_size_r>
 80061d2:	4284      	cmp	r4, r0
 80061d4:	4606      	mov	r6, r0
 80061d6:	d802      	bhi.n	80061de <_realloc_r+0x34>
 80061d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061dc:	d8f4      	bhi.n	80061c8 <_realloc_r+0x1e>
 80061de:	4621      	mov	r1, r4
 80061e0:	4638      	mov	r0, r7
 80061e2:	f7ff fb75 	bl	80058d0 <_malloc_r>
 80061e6:	4680      	mov	r8, r0
 80061e8:	b908      	cbnz	r0, 80061ee <_realloc_r+0x44>
 80061ea:	4645      	mov	r5, r8
 80061ec:	e7ec      	b.n	80061c8 <_realloc_r+0x1e>
 80061ee:	42b4      	cmp	r4, r6
 80061f0:	4622      	mov	r2, r4
 80061f2:	4629      	mov	r1, r5
 80061f4:	bf28      	it	cs
 80061f6:	4632      	movcs	r2, r6
 80061f8:	f7ff ffc2 	bl	8006180 <memcpy>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4638      	mov	r0, r7
 8006200:	f7ff faf2 	bl	80057e8 <_free_r>
 8006204:	e7f1      	b.n	80061ea <_realloc_r+0x40>

08006206 <__sfputc_r>:
 8006206:	6893      	ldr	r3, [r2, #8]
 8006208:	3b01      	subs	r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	b410      	push	{r4}
 800620e:	6093      	str	r3, [r2, #8]
 8006210:	da08      	bge.n	8006224 <__sfputc_r+0x1e>
 8006212:	6994      	ldr	r4, [r2, #24]
 8006214:	42a3      	cmp	r3, r4
 8006216:	db01      	blt.n	800621c <__sfputc_r+0x16>
 8006218:	290a      	cmp	r1, #10
 800621a:	d103      	bne.n	8006224 <__sfputc_r+0x1e>
 800621c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006220:	f000 b932 	b.w	8006488 <__swbuf_r>
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	1c58      	adds	r0, r3, #1
 8006228:	6010      	str	r0, [r2, #0]
 800622a:	7019      	strb	r1, [r3, #0]
 800622c:	4608      	mov	r0, r1
 800622e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006232:	4770      	bx	lr

08006234 <__sfputs_r>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	4606      	mov	r6, r0
 8006238:	460f      	mov	r7, r1
 800623a:	4614      	mov	r4, r2
 800623c:	18d5      	adds	r5, r2, r3
 800623e:	42ac      	cmp	r4, r5
 8006240:	d101      	bne.n	8006246 <__sfputs_r+0x12>
 8006242:	2000      	movs	r0, #0
 8006244:	e007      	b.n	8006256 <__sfputs_r+0x22>
 8006246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624a:	463a      	mov	r2, r7
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff ffda 	bl	8006206 <__sfputc_r>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	d1f3      	bne.n	800623e <__sfputs_r+0xa>
 8006256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006258 <_vfiprintf_r>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	460d      	mov	r5, r1
 800625e:	b09d      	sub	sp, #116	@ 0x74
 8006260:	4614      	mov	r4, r2
 8006262:	4698      	mov	r8, r3
 8006264:	4606      	mov	r6, r0
 8006266:	b118      	cbz	r0, 8006270 <_vfiprintf_r+0x18>
 8006268:	6a03      	ldr	r3, [r0, #32]
 800626a:	b90b      	cbnz	r3, 8006270 <_vfiprintf_r+0x18>
 800626c:	f7ff f986 	bl	800557c <__sinit>
 8006270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006272:	07d9      	lsls	r1, r3, #31
 8006274:	d405      	bmi.n	8006282 <_vfiprintf_r+0x2a>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	059a      	lsls	r2, r3, #22
 800627a:	d402      	bmi.n	8006282 <_vfiprintf_r+0x2a>
 800627c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800627e:	f7ff fa92 	bl	80057a6 <__retarget_lock_acquire_recursive>
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	071b      	lsls	r3, r3, #28
 8006286:	d501      	bpl.n	800628c <_vfiprintf_r+0x34>
 8006288:	692b      	ldr	r3, [r5, #16]
 800628a:	b99b      	cbnz	r3, 80062b4 <_vfiprintf_r+0x5c>
 800628c:	4629      	mov	r1, r5
 800628e:	4630      	mov	r0, r6
 8006290:	f000 f938 	bl	8006504 <__swsetup_r>
 8006294:	b170      	cbz	r0, 80062b4 <_vfiprintf_r+0x5c>
 8006296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006298:	07dc      	lsls	r4, r3, #31
 800629a:	d504      	bpl.n	80062a6 <_vfiprintf_r+0x4e>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	b01d      	add	sp, #116	@ 0x74
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	0598      	lsls	r0, r3, #22
 80062aa:	d4f7      	bmi.n	800629c <_vfiprintf_r+0x44>
 80062ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062ae:	f7ff fa7b 	bl	80057a8 <__retarget_lock_release_recursive>
 80062b2:	e7f3      	b.n	800629c <_vfiprintf_r+0x44>
 80062b4:	2300      	movs	r3, #0
 80062b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b8:	2320      	movs	r3, #32
 80062ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062be:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c2:	2330      	movs	r3, #48	@ 0x30
 80062c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006474 <_vfiprintf_r+0x21c>
 80062c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062cc:	f04f 0901 	mov.w	r9, #1
 80062d0:	4623      	mov	r3, r4
 80062d2:	469a      	mov	sl, r3
 80062d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d8:	b10a      	cbz	r2, 80062de <_vfiprintf_r+0x86>
 80062da:	2a25      	cmp	r2, #37	@ 0x25
 80062dc:	d1f9      	bne.n	80062d2 <_vfiprintf_r+0x7a>
 80062de:	ebba 0b04 	subs.w	fp, sl, r4
 80062e2:	d00b      	beq.n	80062fc <_vfiprintf_r+0xa4>
 80062e4:	465b      	mov	r3, fp
 80062e6:	4622      	mov	r2, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ffa2 	bl	8006234 <__sfputs_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	f000 80a7 	beq.w	8006444 <_vfiprintf_r+0x1ec>
 80062f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f8:	445a      	add	r2, fp
 80062fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 809f 	beq.w	8006444 <_vfiprintf_r+0x1ec>
 8006306:	2300      	movs	r3, #0
 8006308:	f04f 32ff 	mov.w	r2, #4294967295
 800630c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006310:	f10a 0a01 	add.w	sl, sl, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800631c:	931a      	str	r3, [sp, #104]	@ 0x68
 800631e:	4654      	mov	r4, sl
 8006320:	2205      	movs	r2, #5
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4853      	ldr	r0, [pc, #332]	@ (8006474 <_vfiprintf_r+0x21c>)
 8006328:	f7f9 ff5a 	bl	80001e0 <memchr>
 800632c:	9a04      	ldr	r2, [sp, #16]
 800632e:	b9d8      	cbnz	r0, 8006368 <_vfiprintf_r+0x110>
 8006330:	06d1      	lsls	r1, r2, #27
 8006332:	bf44      	itt	mi
 8006334:	2320      	movmi	r3, #32
 8006336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800633a:	0713      	lsls	r3, r2, #28
 800633c:	bf44      	itt	mi
 800633e:	232b      	movmi	r3, #43	@ 0x2b
 8006340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b2a      	cmp	r3, #42	@ 0x2a
 800634a:	d015      	beq.n	8006378 <_vfiprintf_r+0x120>
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	4654      	mov	r4, sl
 8006350:	2000      	movs	r0, #0
 8006352:	f04f 0c0a 	mov.w	ip, #10
 8006356:	4621      	mov	r1, r4
 8006358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635c:	3b30      	subs	r3, #48	@ 0x30
 800635e:	2b09      	cmp	r3, #9
 8006360:	d94b      	bls.n	80063fa <_vfiprintf_r+0x1a2>
 8006362:	b1b0      	cbz	r0, 8006392 <_vfiprintf_r+0x13a>
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	e014      	b.n	8006392 <_vfiprintf_r+0x13a>
 8006368:	eba0 0308 	sub.w	r3, r0, r8
 800636c:	fa09 f303 	lsl.w	r3, r9, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	46a2      	mov	sl, r4
 8006376:	e7d2      	b.n	800631e <_vfiprintf_r+0xc6>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	1d19      	adds	r1, r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	9103      	str	r1, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	bfbb      	ittet	lt
 8006384:	425b      	neglt	r3, r3
 8006386:	f042 0202 	orrlt.w	r2, r2, #2
 800638a:	9307      	strge	r3, [sp, #28]
 800638c:	9307      	strlt	r3, [sp, #28]
 800638e:	bfb8      	it	lt
 8006390:	9204      	strlt	r2, [sp, #16]
 8006392:	7823      	ldrb	r3, [r4, #0]
 8006394:	2b2e      	cmp	r3, #46	@ 0x2e
 8006396:	d10a      	bne.n	80063ae <_vfiprintf_r+0x156>
 8006398:	7863      	ldrb	r3, [r4, #1]
 800639a:	2b2a      	cmp	r3, #42	@ 0x2a
 800639c:	d132      	bne.n	8006404 <_vfiprintf_r+0x1ac>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063aa:	3402      	adds	r4, #2
 80063ac:	9305      	str	r3, [sp, #20]
 80063ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006484 <_vfiprintf_r+0x22c>
 80063b2:	7821      	ldrb	r1, [r4, #0]
 80063b4:	2203      	movs	r2, #3
 80063b6:	4650      	mov	r0, sl
 80063b8:	f7f9 ff12 	bl	80001e0 <memchr>
 80063bc:	b138      	cbz	r0, 80063ce <_vfiprintf_r+0x176>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	eba0 000a 	sub.w	r0, r0, sl
 80063c4:	2240      	movs	r2, #64	@ 0x40
 80063c6:	4082      	lsls	r2, r0
 80063c8:	4313      	orrs	r3, r2
 80063ca:	3401      	adds	r4, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d2:	4829      	ldr	r0, [pc, #164]	@ (8006478 <_vfiprintf_r+0x220>)
 80063d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063d8:	2206      	movs	r2, #6
 80063da:	f7f9 ff01 	bl	80001e0 <memchr>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d03f      	beq.n	8006462 <_vfiprintf_r+0x20a>
 80063e2:	4b26      	ldr	r3, [pc, #152]	@ (800647c <_vfiprintf_r+0x224>)
 80063e4:	bb1b      	cbnz	r3, 800642e <_vfiprintf_r+0x1d6>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	3308      	adds	r3, #8
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f4:	443b      	add	r3, r7
 80063f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f8:	e76a      	b.n	80062d0 <_vfiprintf_r+0x78>
 80063fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	e7a8      	b.n	8006356 <_vfiprintf_r+0xfe>
 8006404:	2300      	movs	r3, #0
 8006406:	3401      	adds	r4, #1
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4619      	mov	r1, r3
 800640c:	f04f 0c0a 	mov.w	ip, #10
 8006410:	4620      	mov	r0, r4
 8006412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006416:	3a30      	subs	r2, #48	@ 0x30
 8006418:	2a09      	cmp	r2, #9
 800641a:	d903      	bls.n	8006424 <_vfiprintf_r+0x1cc>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0c6      	beq.n	80063ae <_vfiprintf_r+0x156>
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	e7c4      	b.n	80063ae <_vfiprintf_r+0x156>
 8006424:	fb0c 2101 	mla	r1, ip, r1, r2
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	e7f0      	b.n	8006410 <_vfiprintf_r+0x1b8>
 800642e:	ab03      	add	r3, sp, #12
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	462a      	mov	r2, r5
 8006434:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <_vfiprintf_r+0x228>)
 8006436:	a904      	add	r1, sp, #16
 8006438:	4630      	mov	r0, r6
 800643a:	f3af 8000 	nop.w
 800643e:	4607      	mov	r7, r0
 8006440:	1c78      	adds	r0, r7, #1
 8006442:	d1d6      	bne.n	80063f2 <_vfiprintf_r+0x19a>
 8006444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006446:	07d9      	lsls	r1, r3, #31
 8006448:	d405      	bmi.n	8006456 <_vfiprintf_r+0x1fe>
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	059a      	lsls	r2, r3, #22
 800644e:	d402      	bmi.n	8006456 <_vfiprintf_r+0x1fe>
 8006450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006452:	f7ff f9a9 	bl	80057a8 <__retarget_lock_release_recursive>
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	065b      	lsls	r3, r3, #25
 800645a:	f53f af1f 	bmi.w	800629c <_vfiprintf_r+0x44>
 800645e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006460:	e71e      	b.n	80062a0 <_vfiprintf_r+0x48>
 8006462:	ab03      	add	r3, sp, #12
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	462a      	mov	r2, r5
 8006468:	4b05      	ldr	r3, [pc, #20]	@ (8006480 <_vfiprintf_r+0x228>)
 800646a:	a904      	add	r1, sp, #16
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff fc81 	bl	8005d74 <_printf_i>
 8006472:	e7e4      	b.n	800643e <_vfiprintf_r+0x1e6>
 8006474:	08006863 	.word	0x08006863
 8006478:	0800686d 	.word	0x0800686d
 800647c:	00000000 	.word	0x00000000
 8006480:	08006235 	.word	0x08006235
 8006484:	08006869 	.word	0x08006869

08006488 <__swbuf_r>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	460e      	mov	r6, r1
 800648c:	4614      	mov	r4, r2
 800648e:	4605      	mov	r5, r0
 8006490:	b118      	cbz	r0, 800649a <__swbuf_r+0x12>
 8006492:	6a03      	ldr	r3, [r0, #32]
 8006494:	b90b      	cbnz	r3, 800649a <__swbuf_r+0x12>
 8006496:	f7ff f871 	bl	800557c <__sinit>
 800649a:	69a3      	ldr	r3, [r4, #24]
 800649c:	60a3      	str	r3, [r4, #8]
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	071a      	lsls	r2, r3, #28
 80064a2:	d501      	bpl.n	80064a8 <__swbuf_r+0x20>
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	b943      	cbnz	r3, 80064ba <__swbuf_r+0x32>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 f82a 	bl	8006504 <__swsetup_r>
 80064b0:	b118      	cbz	r0, 80064ba <__swbuf_r+0x32>
 80064b2:	f04f 37ff 	mov.w	r7, #4294967295
 80064b6:	4638      	mov	r0, r7
 80064b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	6922      	ldr	r2, [r4, #16]
 80064be:	1a98      	subs	r0, r3, r2
 80064c0:	6963      	ldr	r3, [r4, #20]
 80064c2:	b2f6      	uxtb	r6, r6
 80064c4:	4283      	cmp	r3, r0
 80064c6:	4637      	mov	r7, r6
 80064c8:	dc05      	bgt.n	80064d6 <__swbuf_r+0x4e>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7ff fdf3 	bl	80060b8 <_fflush_r>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d1ed      	bne.n	80064b2 <__swbuf_r+0x2a>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	3b01      	subs	r3, #1
 80064da:	60a3      	str	r3, [r4, #8]
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	701e      	strb	r6, [r3, #0]
 80064e4:	6962      	ldr	r2, [r4, #20]
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d004      	beq.n	80064f6 <__swbuf_r+0x6e>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	07db      	lsls	r3, r3, #31
 80064f0:	d5e1      	bpl.n	80064b6 <__swbuf_r+0x2e>
 80064f2:	2e0a      	cmp	r6, #10
 80064f4:	d1df      	bne.n	80064b6 <__swbuf_r+0x2e>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7ff fddd 	bl	80060b8 <_fflush_r>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d0d9      	beq.n	80064b6 <__swbuf_r+0x2e>
 8006502:	e7d6      	b.n	80064b2 <__swbuf_r+0x2a>

08006504 <__swsetup_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4b29      	ldr	r3, [pc, #164]	@ (80065ac <__swsetup_r+0xa8>)
 8006508:	4605      	mov	r5, r0
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	460c      	mov	r4, r1
 800650e:	b118      	cbz	r0, 8006518 <__swsetup_r+0x14>
 8006510:	6a03      	ldr	r3, [r0, #32]
 8006512:	b90b      	cbnz	r3, 8006518 <__swsetup_r+0x14>
 8006514:	f7ff f832 	bl	800557c <__sinit>
 8006518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651c:	0719      	lsls	r1, r3, #28
 800651e:	d422      	bmi.n	8006566 <__swsetup_r+0x62>
 8006520:	06da      	lsls	r2, r3, #27
 8006522:	d407      	bmi.n	8006534 <__swsetup_r+0x30>
 8006524:	2209      	movs	r2, #9
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	e033      	b.n	800659c <__swsetup_r+0x98>
 8006534:	0758      	lsls	r0, r3, #29
 8006536:	d512      	bpl.n	800655e <__swsetup_r+0x5a>
 8006538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800653a:	b141      	cbz	r1, 800654e <__swsetup_r+0x4a>
 800653c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006540:	4299      	cmp	r1, r3
 8006542:	d002      	beq.n	800654a <__swsetup_r+0x46>
 8006544:	4628      	mov	r0, r5
 8006546:	f7ff f94f 	bl	80057e8 <_free_r>
 800654a:	2300      	movs	r3, #0
 800654c:	6363      	str	r3, [r4, #52]	@ 0x34
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	2300      	movs	r3, #0
 8006558:	6063      	str	r3, [r4, #4]
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f043 0308 	orr.w	r3, r3, #8
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	b94b      	cbnz	r3, 800657e <__swsetup_r+0x7a>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006574:	d003      	beq.n	800657e <__swsetup_r+0x7a>
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f88b 	bl	8006694 <__smakebuf_r>
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	f013 0201 	ands.w	r2, r3, #1
 8006586:	d00a      	beq.n	800659e <__swsetup_r+0x9a>
 8006588:	2200      	movs	r2, #0
 800658a:	60a2      	str	r2, [r4, #8]
 800658c:	6962      	ldr	r2, [r4, #20]
 800658e:	4252      	negs	r2, r2
 8006590:	61a2      	str	r2, [r4, #24]
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	b942      	cbnz	r2, 80065a8 <__swsetup_r+0xa4>
 8006596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800659a:	d1c5      	bne.n	8006528 <__swsetup_r+0x24>
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	0799      	lsls	r1, r3, #30
 80065a0:	bf58      	it	pl
 80065a2:	6962      	ldrpl	r2, [r4, #20]
 80065a4:	60a2      	str	r2, [r4, #8]
 80065a6:	e7f4      	b.n	8006592 <__swsetup_r+0x8e>
 80065a8:	2000      	movs	r0, #0
 80065aa:	e7f7      	b.n	800659c <__swsetup_r+0x98>
 80065ac:	20000018 	.word	0x20000018

080065b0 <_raise_r>:
 80065b0:	291f      	cmp	r1, #31
 80065b2:	b538      	push	{r3, r4, r5, lr}
 80065b4:	4605      	mov	r5, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	d904      	bls.n	80065c4 <_raise_r+0x14>
 80065ba:	2316      	movs	r3, #22
 80065bc:	6003      	str	r3, [r0, #0]
 80065be:	f04f 30ff 	mov.w	r0, #4294967295
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065c6:	b112      	cbz	r2, 80065ce <_raise_r+0x1e>
 80065c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065cc:	b94b      	cbnz	r3, 80065e2 <_raise_r+0x32>
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f830 	bl	8006634 <_getpid_r>
 80065d4:	4622      	mov	r2, r4
 80065d6:	4601      	mov	r1, r0
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065de:	f000 b817 	b.w	8006610 <_kill_r>
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d00a      	beq.n	80065fc <_raise_r+0x4c>
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	d103      	bne.n	80065f2 <_raise_r+0x42>
 80065ea:	2316      	movs	r3, #22
 80065ec:	6003      	str	r3, [r0, #0]
 80065ee:	2001      	movs	r0, #1
 80065f0:	e7e7      	b.n	80065c2 <_raise_r+0x12>
 80065f2:	2100      	movs	r1, #0
 80065f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065f8:	4620      	mov	r0, r4
 80065fa:	4798      	blx	r3
 80065fc:	2000      	movs	r0, #0
 80065fe:	e7e0      	b.n	80065c2 <_raise_r+0x12>

08006600 <raise>:
 8006600:	4b02      	ldr	r3, [pc, #8]	@ (800660c <raise+0xc>)
 8006602:	4601      	mov	r1, r0
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f7ff bfd3 	b.w	80065b0 <_raise_r>
 800660a:	bf00      	nop
 800660c:	20000018 	.word	0x20000018

08006610 <_kill_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d07      	ldr	r5, [pc, #28]	@ (8006630 <_kill_r+0x20>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	f7fa fb27 	bl	8000c70 <_kill>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d102      	bne.n	800662c <_kill_r+0x1c>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	b103      	cbz	r3, 800662c <_kill_r+0x1c>
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	bd38      	pop	{r3, r4, r5, pc}
 800662e:	bf00      	nop
 8006630:	20000638 	.word	0x20000638

08006634 <_getpid_r>:
 8006634:	f7fa bb14 	b.w	8000c60 <_getpid>

08006638 <_malloc_usable_size_r>:
 8006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663c:	1f18      	subs	r0, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbc      	itt	lt
 8006642:	580b      	ldrlt	r3, [r1, r0]
 8006644:	18c0      	addlt	r0, r0, r3
 8006646:	4770      	bx	lr

08006648 <__swhatbuf_r>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	460c      	mov	r4, r1
 800664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006650:	2900      	cmp	r1, #0
 8006652:	b096      	sub	sp, #88	@ 0x58
 8006654:	4615      	mov	r5, r2
 8006656:	461e      	mov	r6, r3
 8006658:	da0d      	bge.n	8006676 <__swhatbuf_r+0x2e>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	bf14      	ite	ne
 8006666:	2340      	movne	r3, #64	@ 0x40
 8006668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800666c:	2000      	movs	r0, #0
 800666e:	6031      	str	r1, [r6, #0]
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	b016      	add	sp, #88	@ 0x58
 8006674:	bd70      	pop	{r4, r5, r6, pc}
 8006676:	466a      	mov	r2, sp
 8006678:	f000 f848 	bl	800670c <_fstat_r>
 800667c:	2800      	cmp	r0, #0
 800667e:	dbec      	blt.n	800665a <__swhatbuf_r+0x12>
 8006680:	9901      	ldr	r1, [sp, #4]
 8006682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800668a:	4259      	negs	r1, r3
 800668c:	4159      	adcs	r1, r3
 800668e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006692:	e7eb      	b.n	800666c <__swhatbuf_r+0x24>

08006694 <__smakebuf_r>:
 8006694:	898b      	ldrh	r3, [r1, #12]
 8006696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006698:	079d      	lsls	r5, r3, #30
 800669a:	4606      	mov	r6, r0
 800669c:	460c      	mov	r4, r1
 800669e:	d507      	bpl.n	80066b0 <__smakebuf_r+0x1c>
 80066a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	2301      	movs	r3, #1
 80066aa:	6163      	str	r3, [r4, #20]
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	ab01      	add	r3, sp, #4
 80066b2:	466a      	mov	r2, sp
 80066b4:	f7ff ffc8 	bl	8006648 <__swhatbuf_r>
 80066b8:	9f00      	ldr	r7, [sp, #0]
 80066ba:	4605      	mov	r5, r0
 80066bc:	4639      	mov	r1, r7
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff f906 	bl	80058d0 <_malloc_r>
 80066c4:	b948      	cbnz	r0, 80066da <__smakebuf_r+0x46>
 80066c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ca:	059a      	lsls	r2, r3, #22
 80066cc:	d4ee      	bmi.n	80066ac <__smakebuf_r+0x18>
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	f043 0302 	orr.w	r3, r3, #2
 80066d6:	81a3      	strh	r3, [r4, #12]
 80066d8:	e7e2      	b.n	80066a0 <__smakebuf_r+0xc>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	6020      	str	r0, [r4, #0]
 80066de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066ea:	b15b      	cbz	r3, 8006704 <__smakebuf_r+0x70>
 80066ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f81d 	bl	8006730 <_isatty_r>
 80066f6:	b128      	cbz	r0, 8006704 <__smakebuf_r+0x70>
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	431d      	orrs	r5, r3
 8006708:	81a5      	strh	r5, [r4, #12]
 800670a:	e7cf      	b.n	80066ac <__smakebuf_r+0x18>

0800670c <_fstat_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d07      	ldr	r5, [pc, #28]	@ (800672c <_fstat_r+0x20>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	f7fa fb09 	bl	8000d30 <_fstat>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d102      	bne.n	8006728 <_fstat_r+0x1c>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	b103      	cbz	r3, 8006728 <_fstat_r+0x1c>
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop
 800672c:	20000638 	.word	0x20000638

08006730 <_isatty_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	@ (800674c <_isatty_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fa fb08 	bl	8000d50 <_isatty>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_isatty_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_isatty_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	20000638 	.word	0x20000638

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
