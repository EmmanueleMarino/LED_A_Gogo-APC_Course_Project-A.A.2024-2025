
LED-A-Gogo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a08c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a220  0800a220  0000b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  0000c250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  0000c250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0000b644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0800a64c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c250  2**0
                  CONTENTS
 10 .bss          000006bc  20000250  20000250  0000c250  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000090c  2000090c  0000c250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a699  00000000  00000000  0000c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003797  00000000  00000000  00026919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f1  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002134a  00000000  00000000  0002c9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb03  00000000  00000000  0004dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2fb4  00000000  00000000  0006a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d7a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072fc  00000000  00000000  0012d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00134ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a204 	.word	0x0800a204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800a204 	.word	0x0800a204

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000bb6:	f000 fc77 	bl	80014a8 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fcb3 	bl	8001534 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000bd8:	f107 030f 	add.w	r3, r7, #15
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2123      	movs	r1, #35	@ 0x23
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fca7 	bl	8001534 <GYRO_IO_Write>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c02:	f000 fc51 	bl	80014a8 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2201      	movs	r2, #1
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fcc3 	bl	8001598 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2201      	movs	r2, #1
 8000c26:	2124      	movs	r1, #36	@ 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fcb5 	bl	8001598 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2124      	movs	r1, #36	@ 0x24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fc78 	bl	8001534 <GYRO_IO_Write>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fc63 	bl	8001534 <GYRO_IO_Write>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	2300      	movs	r3, #0
 8000c86:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000c88:	f107 030f 	add.w	r3, r7, #15
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2130      	movs	r1, #48	@ 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fc81 	bl	8001598 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000c96:	f107 030e 	add.w	r3, r7, #14
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2122      	movs	r1, #34	@ 0x22
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fc7a 	bl	8001598 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	121b      	asrs	r3, r3, #8
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000cd8:	f107 030f 	add.w	r3, r7, #15
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2130      	movs	r1, #48	@ 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fc27 	bl	8001534 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000ce6:	f107 030e 	add.w	r3, r7, #14
 8000cea:	2201      	movs	r2, #1
 8000cec:	2122      	movs	r1, #34	@ 0x22
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fc20 	bl	8001534 <GYRO_IO_Write>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d06:	f107 030f 	add.w	r3, r7, #15
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2122      	movs	r1, #34	@ 0x22
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fc42 	bl	8001598 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e00c      	b.n	8000d4a <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d109      	bne.n	8000d4a <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0308 	bic.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d4a:	f107 030f 	add.w	r3, r7, #15
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2122      	movs	r1, #34	@ 0x22
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fbee 	bl	8001534 <GYRO_IO_Write>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2122      	movs	r1, #34	@ 0x22
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fc10 	bl	8001598 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e009      	b.n	8000da2 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0308 	bic.w	r3, r3, #8
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	2201      	movs	r2, #1
 8000da8:	2122      	movs	r1, #34	@ 0x22
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fbc2 	bl	8001534 <GYRO_IO_Write>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2121      	movs	r1, #33	@ 0x21
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fbe4 	bl	8001598 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	2121      	movs	r1, #33	@ 0x21
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fba1 	bl	8001534 <GYRO_IO_Write>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2124      	movs	r1, #36	@ 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fbc3 	bl	8001598 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	f023 0310 	bic.w	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000e26:	f107 030f 	add.w	r3, r7, #15
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2124      	movs	r1, #36	@ 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb80 	bl	8001534 <GYRO_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000e66:	f107 030f 	add.w	r3, r7, #15
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2123      	movs	r1, #35	@ 0x23
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb92 	bl	8001598 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	2206      	movs	r2, #6
 8000e7a:	2128      	movs	r1, #40	@ 0x28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fb8b 	bl	8001598 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d121      	bne.n	8000ed0 <I3G4250D_ReadXYZAngRate+0x94>
  {
    for (i = 0; i < 3; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	e01a      	b.n	8000ec8 <I3G4250D_ReadXYZAngRate+0x8c>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	3301      	adds	r3, #1
 8000e98:	3328      	adds	r3, #40	@ 0x28
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	6a3a      	ldr	r2, [r7, #32]
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	3228      	adds	r2, #40	@ 0x28
 8000eaa:	443a      	add	r2, r7
 8000eac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	3328      	adds	r3, #40	@ 0x28
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	dde1      	ble.n	8000e92 <I3G4250D_ReadXYZAngRate+0x56>
 8000ece:	e020      	b.n	8000f12 <I3G4250D_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
 8000ed4:	e01a      	b.n	8000f0c <I3G4250D_ReadXYZAngRate+0xd0>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	3328      	adds	r3, #40	@ 0x28
 8000edc:	443b      	add	r3, r7
 8000ede:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	0052      	lsls	r2, r2, #1
 8000eea:	3201      	adds	r2, #1
 8000eec:	3228      	adds	r2, #40	@ 0x28
 8000eee:	443a      	add	r2, r7
 8000ef0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	3328      	adds	r3, #40	@ 0x28
 8000f00:	443b      	add	r3, r7
 8000f02:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	dde1      	ble.n	8000ed6 <I3G4250D_ReadXYZAngRate+0x9a>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000f18:	2b20      	cmp	r3, #32
 8000f1a:	d00c      	beq.n	8000f36 <I3G4250D_ReadXYZAngRate+0xfa>
 8000f1c:	2b20      	cmp	r3, #32
 8000f1e:	dc0d      	bgt.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <I3G4250D_ReadXYZAngRate+0xee>
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d003      	beq.n	8000f30 <I3G4250D_ReadXYZAngRate+0xf4>
 8000f28:	e008      	b.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <I3G4250D_ReadXYZAngRate+0x144>)
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000f2e:	e005      	b.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <I3G4250D_ReadXYZAngRate+0x148>)
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000f34:	e002      	b.n	8000f3c <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <I3G4250D_ReadXYZAngRate+0x14c>)
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000f3a:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	e016      	b.n	8000f70 <I3G4250D_ReadXYZAngRate+0x134>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	3328      	adds	r3, #40	@ 0x28
 8000f48:	443b      	add	r3, r7
 8000f4a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	dde5      	ble.n	8000f42 <I3G4250D_ReadXYZAngRate+0x106>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	410c0000 	.word	0x410c0000
 8000f84:	418c0000 	.word	0x418c0000
 8000f88:	428c0000 	.word	0x428c0000

08000f8c <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f9a:	f000 fa85 	bl	80014a8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000fa4:	f107 030f 	add.w	r3, r7, #15
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2120      	movs	r1, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fac1 	bl	8001534 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000fbc:	f107 030f 	add.w	r3, r7, #15
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2123      	movs	r1, #35	@ 0x23
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fab5 	bl	8001534 <GYRO_IO_Write>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000fe6:	f000 fa5f 	bl	80014a8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2201      	movs	r2, #1
 8000fee:	210f      	movs	r1, #15
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fad1 	bl	8001598 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001006:	1dfb      	adds	r3, r7, #7
 8001008:	2201      	movs	r2, #1
 800100a:	2124      	movs	r1, #36	@ 0x24
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fac3 	bl	8001598 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	2201      	movs	r2, #1
 8001020:	2124      	movs	r1, #36	@ 0x24
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fa86 	bl	8001534 <GYRO_IO_Write>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001044:	f107 030f 	add.w	r3, r7, #15
 8001048:	2201      	movs	r2, #1
 800104a:	2120      	movs	r1, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fa71 	bl	8001534 <GYRO_IO_Write>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800106c:	f107 030f 	add.w	r3, r7, #15
 8001070:	2201      	movs	r2, #1
 8001072:	2130      	movs	r1, #48	@ 0x30
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fa8f 	bl	8001598 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800107a:	f107 030e 	add.w	r3, r7, #14
 800107e:	2201      	movs	r2, #1
 8001080:	2122      	movs	r1, #34	@ 0x22
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fa88 	bl	8001598 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	121b      	asrs	r3, r3, #8
 8001098:	b25a      	sxtb	r2, r3
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	f023 0320 	bic.w	r3, r3, #32
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80010bc:	f107 030f 	add.w	r3, r7, #15
 80010c0:	2201      	movs	r2, #1
 80010c2:	2130      	movs	r1, #48	@ 0x30
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fa35 	bl	8001534 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80010ca:	f107 030e 	add.w	r3, r7, #14
 80010ce:	2201      	movs	r2, #1
 80010d0:	2122      	movs	r1, #34	@ 0x22
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fa2e 	bl	8001534 <GYRO_IO_Write>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010ea:	f107 030f 	add.w	r3, r7, #15
 80010ee:	2201      	movs	r2, #1
 80010f0:	2122      	movs	r1, #34	@ 0x22
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fa50 	bl	8001598 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001104:	b2db      	uxtb	r3, r3
 8001106:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800110e:	b2db      	uxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e00c      	b.n	800112e <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d109      	bne.n	800112e <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f023 0308 	bic.w	r3, r3, #8
 8001120:	b2db      	uxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	b2db      	uxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800112e:	f107 030f 	add.w	r3, r7, #15
 8001132:	2201      	movs	r2, #1
 8001134:	2122      	movs	r1, #34	@ 0x22
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f9fc 	bl	8001534 <GYRO_IO_Write>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800114e:	f107 030f 	add.w	r3, r7, #15
 8001152:	2201      	movs	r2, #1
 8001154:	2122      	movs	r1, #34	@ 0x22
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fa1e 	bl	8001598 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d107      	bne.n	8001172 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001168:	b2db      	uxtb	r3, r3
 800116a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e009      	b.n	8001186 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d106      	bne.n	8001186 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 0308 	bic.w	r3, r3, #8
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001186:	f107 030f 	add.w	r3, r7, #15
 800118a:	2201      	movs	r2, #1
 800118c:	2122      	movs	r1, #34	@ 0x22
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f9d0 	bl	8001534 <GYRO_IO_Write>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011a6:	f107 030f 	add.w	r3, r7, #15
 80011aa:	2201      	movs	r2, #1
 80011ac:	2121      	movs	r1, #33	@ 0x21
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f9f2 	bl	8001598 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80011c8:	f107 030f 	add.w	r3, r7, #15
 80011cc:	2201      	movs	r2, #1
 80011ce:	2121      	movs	r1, #33	@ 0x21
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f9af 	bl	8001534 <GYRO_IO_Write>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80011e8:	f107 030f 	add.w	r3, r7, #15
 80011ec:	2201      	movs	r2, #1
 80011ee:	2124      	movs	r1, #36	@ 0x24
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f9d1 	bl	8001598 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f023 0310 	bic.w	r3, r3, #16
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4313      	orrs	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800120a:	f107 030f 	add.w	r3, r7, #15
 800120e:	2201      	movs	r2, #1
 8001210:	2124      	movs	r1, #36	@ 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f98e 	bl	8001534 <GYRO_IO_Write>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	2201      	movs	r2, #1
 8001250:	2123      	movs	r1, #35	@ 0x23
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f9a0 	bl	8001598 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	2206      	movs	r2, #6
 800125e:	2128      	movs	r1, #40	@ 0x28
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f999 	bl	8001598 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d121      	bne.n	80012b4 <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	e01a      	b.n	80012ac <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3301      	adds	r3, #1
 800127c:	3328      	adds	r3, #40	@ 0x28
 800127e:	443b      	add	r3, r7
 8001280:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b29b      	uxth	r3, r3
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	3228      	adds	r2, #40	@ 0x28
 800128e:	443a      	add	r2, r7
 8001290:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3328      	adds	r3, #40	@ 0x28
 80012a0:	443b      	add	r3, r7
 80012a2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	3301      	adds	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	dde1      	ble.n	8001276 <L3GD20_ReadXYZAngRate+0x56>
 80012b2:	e020      	b.n	80012f6 <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	e01a      	b.n	80012f0 <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	3328      	adds	r3, #40	@ 0x28
 80012c0:	443b      	add	r3, r7
 80012c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	3201      	adds	r2, #1
 80012d0:	3228      	adds	r2, #40	@ 0x28
 80012d2:	443a      	add	r2, r7
 80012d4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b21a      	sxth	r2, r3
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	3328      	adds	r3, #40	@ 0x28
 80012e4:	443b      	add	r3, r7
 80012e6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	dde1      	ble.n	80012ba <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012fc:	2b20      	cmp	r3, #32
 80012fe:	d00c      	beq.n	800131a <L3GD20_ReadXYZAngRate+0xfa>
 8001300:	2b20      	cmp	r3, #32
 8001302:	dc0d      	bgt.n	8001320 <L3GD20_ReadXYZAngRate+0x100>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <L3GD20_ReadXYZAngRate+0xee>
 8001308:	2b10      	cmp	r3, #16
 800130a:	d003      	beq.n	8001314 <L3GD20_ReadXYZAngRate+0xf4>
 800130c:	e008      	b.n	8001320 <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <L3GD20_ReadXYZAngRate+0x144>)
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001312:	e005      	b.n	8001320 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <L3GD20_ReadXYZAngRate+0x148>)
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001318:	e002      	b.n	8001320 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <L3GD20_ReadXYZAngRate+0x14c>)
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800131e:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	e016      	b.n	8001354 <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	3328      	adds	r3, #40	@ 0x28
 800132c:	443b      	add	r3, r7
 800132e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	3301      	adds	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b02      	cmp	r3, #2
 8001358:	dde5      	ble.n	8001326 <L3GD20_ReadXYZAngRate+0x106>
  }
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	410c0000 	.word	0x410c0000
 8001368:	418c0000 	.word	0x418c0000
 800136c:	428c0000 	.word	0x428c0000

08001370 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001374:	481a      	ldr	r0, [pc, #104]	@ (80013e0 <SPIx_Init+0x70>)
 8001376:	f003 ff2f 	bl	80051d8 <HAL_SPI_GetState>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d12c      	bne.n	80013da <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <SPIx_Init+0x70>)
 8001382:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <SPIx_Init+0x74>)
 8001384:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <SPIx_Init+0x70>)
 8001388:	2218      	movs	r2, #24
 800138a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <SPIx_Init+0x70>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <SPIx_Init+0x70>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <SPIx_Init+0x70>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <SPIx_Init+0x70>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <SPIx_Init+0x70>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	@ (80013e0 <SPIx_Init+0x70>)
 80013ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013b0:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <SPIx_Init+0x70>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <SPIx_Init+0x70>)
 80013ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013be:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <SPIx_Init+0x70>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <SPIx_Init+0x70>)
 80013c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013cc:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <SPIx_Init+0x70>)
 80013d0:	f000 f836 	bl	8001440 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <SPIx_Init+0x70>)
 80013d6:	f003 faff 	bl	80049d8 <HAL_SPI_Init>
  }
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000026c 	.word	0x2000026c
 80013e4:	40013000 	.word	0x40013000

080013e8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <SPIx_WriteRead+0x38>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f107 020f 	add.w	r2, r7, #15
 80013fe:	1df9      	adds	r1, r7, #7
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	4807      	ldr	r0, [pc, #28]	@ (8001424 <SPIx_WriteRead+0x3c>)
 8001406:	f003 fbba 	bl	8004b7e <HAL_SPI_TransmitReceive>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001410:	f000 f80a 	bl	8001428 <SPIx_Error>
  }
  
  return receivedbyte;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000068 	.word	0x20000068
 8001424:	2000026c 	.word	0x2000026c

08001428 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <SPIx_Error+0x14>)
 800142e:	f003 fb7e 	bl	8004b2e <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI communication BUS */
  SPIx_Init();
 8001432:	f7ff ff9d 	bl	8001370 <SPIx_Init>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000026c 	.word	0x2000026c

08001440 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <SPIx_MspInit+0x64>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <SPIx_MspInit+0x64>)
 800144e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <SPIx_MspInit+0x64>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <SPIx_MspInit+0x64>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <SPIx_MspInit+0x64>)
 8001466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146a:	6153      	str	r3, [r2, #20]
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <SPIx_MspInit+0x64>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001478:	23e0      	movs	r3, #224	@ 0xe0
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001488:	2305      	movs	r3, #5
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001496:	f001 fa51 	bl	800293c <HAL_GPIO_Init>
}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <GYRO_IO_Init+0x84>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <GYRO_IO_Init+0x84>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b8:	6153      	str	r3, [r2, #20]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <GYRO_IO_Init+0x84>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80014c6:	2308      	movs	r3, #8
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4814      	ldr	r0, [pc, #80]	@ (8001530 <GYRO_IO_Init+0x88>)
 80014de:	f001 fa2d 	bl	800293c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80014e2:	2201      	movs	r2, #1
 80014e4:	2108      	movs	r1, #8
 80014e6:	4812      	ldr	r0, [pc, #72]	@ (8001530 <GYRO_IO_Init+0x88>)
 80014e8:	f001 fc7e 	bl	8002de8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <GYRO_IO_Init+0x84>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <GYRO_IO_Init+0x84>)
 80014f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f6:	6153      	str	r3, [r2, #20]
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <GYRO_IO_Init+0x84>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001504:	2303      	movs	r3, #3
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <GYRO_IO_Init+0x88>)
 800151c:	f001 fa0e 	bl	800293c <HAL_GPIO_Init>
  
  SPIx_Init();
 8001520:	f7ff ff26 	bl	8001370 <SPIx_Init>
}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	48001000 	.word	0x48001000

08001534 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	4613      	mov	r3, r2
 8001542:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001544:	883b      	ldrh	r3, [r7, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d903      	bls.n	8001552 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001550:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001552:	2200      	movs	r2, #0
 8001554:	2108      	movs	r1, #8
 8001556:	480f      	ldr	r0, [pc, #60]	@ (8001594 <GYRO_IO_Write+0x60>)
 8001558:	f001 fc46 	bl	8002de8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff42 	bl	80013e8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001564:	e00a      	b.n	800157c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff3c 	bl	80013e8 <SPIx_WriteRead>
    NumByteToWrite--;
 8001570:	883b      	ldrh	r3, [r7, #0]
 8001572:	3b01      	subs	r3, #1
 8001574:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f1      	bne.n	8001566 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001582:	2201      	movs	r2, #1
 8001584:	2108      	movs	r1, #8
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <GYRO_IO_Write+0x60>)
 8001588:	f001 fc2e 	bl	8002de8 <HAL_GPIO_WritePin>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	48001000 	.word	0x48001000

08001598 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80015a8:	883b      	ldrh	r3, [r7, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d904      	bls.n	80015b8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	e003      	b.n	80015c0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015be:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015c0:	2200      	movs	r2, #0
 80015c2:	2108      	movs	r1, #8
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <GYRO_IO_Read+0x70>)
 80015c6:	f001 fc0f 	bl	8002de8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff0b 	bl	80013e8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80015d2:	e00c      	b.n	80015ee <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff ff07 	bl	80013e8 <SPIx_WriteRead>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ef      	bne.n	80015d4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80015f4:	2201      	movs	r2, #1
 80015f6:	2108      	movs	r1, #8
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <GYRO_IO_Read+0x70>)
 80015fa:	f001 fbf5 	bl	8002de8 <HAL_GPIO_WritePin>
}  
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	48001000 	.word	0x48001000

0800160c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001616:	2300      	movs	r3, #0
 8001618:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800161a:	2300      	movs	r3, #0
 800161c:	703b      	strb	r3, [r7, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001622:	4b51      	ldr	r3, [pc, #324]	@ (8001768 <BSP_GYRO_Init+0x15c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4798      	blx	r3
 8001628:	4603      	mov	r3, r0
 800162a:	2bd4      	cmp	r3, #212	@ 0xd4
 800162c:	d005      	beq.n	800163a <BSP_GYRO_Init+0x2e>
 800162e:	4b4e      	ldr	r3, [pc, #312]	@ (8001768 <BSP_GYRO_Init+0x15c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4798      	blx	r3
 8001634:	4603      	mov	r3, r0
 8001636:	2bd5      	cmp	r3, #213	@ 0xd5
 8001638:	d145      	bne.n	80016c6 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800163a:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <BSP_GYRO_Init+0x160>)
 800163c:	4a4a      	ldr	r2, [pc, #296]	@ (8001768 <BSP_GYRO_Init+0x15c>)
 800163e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001640:	2308      	movs	r3, #8
 8001642:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001644:	2300      	movs	r3, #0
 8001646:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001648:	2307      	movs	r3, #7
 800164a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800164c:	2330      	movs	r3, #48	@ 0x30
 800164e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001650:	2300      	movs	r3, #0
 8001652:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001654:	2300      	movs	r3, #0
 8001656:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001658:	2310      	movs	r3, #16
 800165a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800165c:	793a      	ldrb	r2, [r7, #4]
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	4313      	orrs	r3, r2
 8001662:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001664:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001666:	4313      	orrs	r3, r2
 8001668:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800166a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800166c:	4313      	orrs	r3, r2
 800166e:	b2db      	uxtb	r3, r3
 8001670:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001672:	7a3a      	ldrb	r2, [r7, #8]
 8001674:	7a7b      	ldrb	r3, [r7, #9]
 8001676:	4313      	orrs	r3, r2
 8001678:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800167a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800167c:	4313      	orrs	r3, r2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b29a      	uxth	r2, r3
 8001684:	89bb      	ldrh	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800168a:	4b38      	ldr	r3, [pc, #224]	@ (800176c <BSP_GYRO_Init+0x160>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	89ba      	ldrh	r2, [r7, #12]
 8001692:	4610      	mov	r0, r2
 8001694:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001696:	2300      	movs	r3, #0
 8001698:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800169a:	2300      	movs	r3, #0
 800169c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800169e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80016a0:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <BSP_GYRO_Init+0x160>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	89ba      	ldrh	r2, [r7, #12]
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	4610      	mov	r0, r2
 80016b4:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80016b6:	4b2d      	ldr	r3, [pc, #180]	@ (800176c <BSP_GYRO_Init+0x160>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	2010      	movs	r0, #16
 80016be:	4798      	blx	r3

    ret = GYRO_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e04a      	b.n	800175c <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <BSP_GYRO_Init+0x164>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4798      	blx	r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	2bd3      	cmp	r3, #211	@ 0xd3
 80016d0:	d144      	bne.n	800175c <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <BSP_GYRO_Init+0x160>)
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <BSP_GYRO_Init+0x164>)
 80016d6:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80016d8:	2308      	movs	r3, #8
 80016da:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80016dc:	2300      	movs	r3, #0
 80016de:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80016e0:	2307      	movs	r3, #7
 80016e2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 80016e4:	2330      	movs	r3, #48	@ 0x30
 80016e6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 80016e8:	2300      	movs	r3, #0
 80016ea:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 80016ec:	2300      	movs	r3, #0
 80016ee:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 80016f0:	2310      	movs	r3, #16
 80016f2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80016f4:	793a      	ldrb	r2, [r7, #4]
 80016f6:	797b      	ldrb	r3, [r7, #5]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80016fc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80016fe:	4313      	orrs	r3, r2
 8001700:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001702:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001704:	4313      	orrs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800170a:	7a3a      	ldrb	r2, [r7, #8]
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	4313      	orrs	r3, r2
 8001710:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8001712:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001714:	4313      	orrs	r3, r2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b29a      	uxth	r2, r3
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <BSP_GYRO_Init+0x160>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	89ba      	ldrh	r2, [r7, #12]
 800172a:	4610      	mov	r0, r2
 800172c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800172e:	2300      	movs	r3, #0
 8001730:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8001732:	2300      	movs	r3, #0
 8001734:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8001736:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001738:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800173a:	4313      	orrs	r3, r2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <BSP_GYRO_Init+0x160>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	89ba      	ldrh	r2, [r7, #12]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	4610      	mov	r0, r2
 800174c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800174e:	4b07      	ldr	r3, [pc, #28]	@ (800176c <BSP_GYRO_Init+0x160>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	2010      	movs	r0, #16
 8001756:	4798      	blx	r3

    ret = GYRO_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000034 	.word	0x20000034
 800176c:	200002d0 	.word	0x200002d0
 8001770:	20000000 	.word	0x20000000

08001774 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <BSP_GYRO_GetXYZ+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <BSP_GYRO_GetXYZ+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4798      	blx	r3
  }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002d0 	.word	0x200002d0

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f000 fea6 	bl	80024f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (BSP_GYRO_Init() != GYRO_OK) {
 80017a4:	f7ff ff32 	bl	800160c <BSP_GYRO_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <main+0x16>
          Error_Handler();
 80017ae:	f000 fb9f 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b2:	f000 f823 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b6:	f000 f9a3 	bl	8001b00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ba:	f000 f883 	bl	80018c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017be:	f000 f8c1 	bl	8001944 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80017c2:	f000 f97b 	bl	8001abc <MX_USB_PCD_Init>
  MX_UART5_Init();
 80017c6:	f000 f949 	bl	8001a5c <MX_UART5_Init>
  MX_TIM2_Init();
 80017ca:	f000 f8f9 	bl	80019c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	4907      	ldr	r1, [pc, #28]	@ (80017f0 <main+0x54>)
 80017d2:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <main+0x58>)
 80017d4:	f004 fbbe 	bl	8005f54 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80017d8:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <main+0x5c>)
 80017da:	f003 fedd 	bl	8005598 <HAL_TIM_Base_Start_IT>
  srand(HAL_GetTick());
 80017de:	f000 fee1 	bl	80025a4 <HAL_GetTick>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fe7f 	bl	80074e8 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ea:	bf00      	nop
 80017ec:	e7fd      	b.n	80017ea <main+0x4e>
 80017ee:	bf00      	nop
 80017f0:	20000740 	.word	0x20000740
 80017f4:	200003d8 	.word	0x200003d8
 80017f8:	2000038c 	.word	0x2000038c

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09e      	sub	sp, #120	@ 0x78
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001806:	2228      	movs	r2, #40	@ 0x28
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f006 fc2b 	bl	8008066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	223c      	movs	r2, #60	@ 0x3c
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f006 fc1d 	bl	8008066 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800182c:	2303      	movs	r3, #3
 800182e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001830:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001834:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183a:	2301      	movs	r3, #1
 800183c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800183e:	2310      	movs	r3, #16
 8001840:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001846:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800184a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800184c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001850:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fcf0 	bl	800323c <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001862:	f000 fb45 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2302      	movs	r3, #2
 800186c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800187c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001880:	2101      	movs	r1, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fce8 	bl	8004258 <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800188e:	f000 fb2f 	bl	8001ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <SystemClock_Config+0xc4>)
 8001894:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800189e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fee8 	bl	800467c <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80018b2:	f000 fb1d 	bl	8001ef0 <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	@ 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	00020030 	.word	0x00020030

080018c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <MX_I2C1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <MX_I2C1_Init+0x7c>)
 80018d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018dc:	2201      	movs	r2, #1
 80018de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_I2C1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fe:	480e      	ldr	r0, [pc, #56]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001900:	f001 faa2 	bl	8002e48 <HAL_I2C_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800190a:	f000 faf1 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190e:	2100      	movs	r1, #0
 8001910:	4809      	ldr	r0, [pc, #36]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001912:	f001 fb34 	bl	8002f7e <HAL_I2CEx_ConfigAnalogFilter>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800191c:	f000 fae8 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001920:	2100      	movs	r1, #0
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_I2C1_Init+0x74>)
 8001924:	f001 fb76 	bl	8003014 <HAL_I2CEx_ConfigDigitalFilter>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800192e:	f000 fadf 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200002d4 	.word	0x200002d4
 800193c:	40005400 	.word	0x40005400
 8001940:	2000090e 	.word	0x2000090e

08001944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <MX_SPI1_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800195e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001962:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001976:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800197a:	2208      	movs	r2, #8
 800197c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001992:	2207      	movs	r2, #7
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI1_Init+0x74>)
 800199e:	2208      	movs	r2, #8
 80019a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_SPI1_Init+0x74>)
 80019a4:	f003 f818 	bl	80049d8 <HAL_SPI_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 fa9f 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000328 	.word	0x20000328
 80019bc:	40013000 	.word	0x40013000

080019c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <MX_TIM2_Init+0x98>)
 80019e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_TIM2_Init+0x98>)
 80019e8:	f242 3227 	movw	r2, #8999	@ 0x2327
 80019ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_TIM2_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <MX_TIM2_Init+0x98>)
 80019f6:	224f      	movs	r2, #79	@ 0x4f
 80019f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <MX_TIM2_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <MX_TIM2_Init+0x98>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a06:	4814      	ldr	r0, [pc, #80]	@ (8001a58 <MX_TIM2_Init+0x98>)
 8001a08:	f003 fd6e 	bl	80054e8 <HAL_TIM_Base_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a12:	f000 fa6d 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <MX_TIM2_Init+0x98>)
 8001a24:	f003 ff24 	bl	8005870 <HAL_TIM_ConfigClockSource>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a2e:	f000 fa5f 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_TIM2_Init+0x98>)
 8001a40:	f004 f93e 	bl	8005cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a4a:	f000 fa51 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000038c 	.word	0x2000038c

08001a5c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <MX_UART5_Init+0x5c>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_UART5_Init+0x58>)
 8001aa0:	f004 f9ac 	bl	8005dfc <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f000 fa21 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003d8 	.word	0x200003d8
 8001ab8:	40005000 	.word	0x40005000

08001abc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8001afc <MX_USB_PCD_Init+0x40>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ac8:	2208      	movs	r2, #8
 8001aca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_USB_PCD_Init+0x3c>)
 8001ae6:	f001 fae1 	bl	80030ac <HAL_PCD_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001af0:	f000 f9fe 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000460 	.word	0x20000460
 8001afc:	40005c00 	.word	0x40005c00

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	@ 0x30
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a41      	ldr	r2, [pc, #260]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b20:	6153      	str	r3, [r2, #20]
 8001b22:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4a3b      	ldr	r2, [pc, #236]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b38:	6153      	str	r3, [r2, #20]
 8001b3a:	4b39      	ldr	r3, [pc, #228]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b46:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a35      	ldr	r2, [pc, #212]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b33      	ldr	r3, [pc, #204]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b30      	ldr	r3, [pc, #192]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a2f      	ldr	r2, [pc, #188]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b2a      	ldr	r3, [pc, #168]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a29      	ldr	r2, [pc, #164]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b80:	6153      	str	r3, [r2, #20]
 8001b82:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a23      	ldr	r2, [pc, #140]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_GPIO_Init+0x120>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001bac:	481d      	ldr	r0, [pc, #116]	@ (8001c24 <MX_GPIO_Init+0x124>)
 8001bae:	f001 f91b 	bl	8002de8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8001bb2:	2336      	movs	r3, #54	@ 0x36
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bb6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4817      	ldr	r0, [pc, #92]	@ (8001c24 <MX_GPIO_Init+0x124>)
 8001bc8:	f000 feb8 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001bcc:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001bd0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	480f      	ldr	r0, [pc, #60]	@ (8001c24 <MX_GPIO_Init+0x124>)
 8001be6:	f000 fea9 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c02:	f000 fe9b 	bl	800293c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2006      	movs	r0, #6
 8001c0c:	f000 fdd5 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c10:	2006      	movs	r0, #6
 8001c12:	f000 fdee 	bl	80027f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3730      	adds	r7, #48	@ 0x30
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48001000 	.word	0x48001000

08001c28 <turn_off_led>:

/* USER CODE BEGIN 4 */

// Function which turns all of the LEDs off
void turn_off_led(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin|
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001c32:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <turn_off_led+0x14>)
 8001c34:	f001 f8d8 	bl	8002de8 <HAL_GPIO_WritePin>
                            LD7_Pin|LD8_Pin|LD9_Pin|LD10_Pin, GPIO_PIN_RESET);
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	48001000 	.word	0x48001000

08001c40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a47      	ldr	r2, [pc, #284]	@ (8001d6c <HAL_UART_RxCpltCallback+0x12c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	f040 8087 	bne.w	8001d62 <HAL_UART_RxCpltCallback+0x122>
		*/

        static uint8_t i = 0;
        static char rx_buffer[10];

        if (rx_byte != '\n' && rx_byte != '\r' && i < sizeof(rx_buffer) - 1)
 8001c54:	4b46      	ldr	r3, [pc, #280]	@ (8001d70 <HAL_UART_RxCpltCallback+0x130>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d013      	beq.n	8001c84 <HAL_UART_RxCpltCallback+0x44>
 8001c5c:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_UART_RxCpltCallback+0x130>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b0d      	cmp	r3, #13
 8001c62:	d00f      	beq.n	8001c84 <HAL_UART_RxCpltCallback+0x44>
 8001c64:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_UART_RxCpltCallback+0x134>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d80b      	bhi.n	8001c84 <HAL_UART_RxCpltCallback+0x44>
        {
            rx_buffer[i++] = rx_byte;
 8001c6c:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <HAL_UART_RxCpltCallback+0x134>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	b2d1      	uxtb	r1, r2
 8001c74:	4a3f      	ldr	r2, [pc, #252]	@ (8001d74 <HAL_UART_RxCpltCallback+0x134>)
 8001c76:	7011      	strb	r1, [r2, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_UART_RxCpltCallback+0x130>)
 8001c7c:	7819      	ldrb	r1, [r3, #0]
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_UART_RxCpltCallback+0x138>)
 8001c80:	5499      	strb	r1, [r3, r2]
 8001c82:	e069      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
        }
        else
        {
            rx_buffer[i] = '\0';
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_UART_RxCpltCallback+0x134>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_UART_RxCpltCallback+0x138>)
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]
            i = 0;
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <HAL_UART_RxCpltCallback+0x134>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

            uint8_t valid_command = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]

            if (rx_buffer[1] != '\0')
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_UART_RxCpltCallback+0x138>)
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_UART_RxCpltCallback+0x68>
            {
                valid_command = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e057      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
            }
            else
            {
                switch (rx_buffer[0])
 8001ca8:	4b33      	ldr	r3, [pc, #204]	@ (8001d78 <HAL_UART_RxCpltCallback+0x138>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3b30      	subs	r3, #48	@ 0x30
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d84f      	bhi.n	8001d52 <HAL_UART_RxCpltCallback+0x112>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <HAL_UART_RxCpltCallback+0x78>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001cdd 	.word	0x08001cdd
 8001cbc:	08001ce3 	.word	0x08001ce3
 8001cc0:	08001cf1 	.word	0x08001cf1
 8001cc4:	08001cff 	.word	0x08001cff
 8001cc8:	08001d0d 	.word	0x08001d0d
 8001ccc:	08001d1b 	.word	0x08001d1b
 8001cd0:	08001d29 	.word	0x08001d29
 8001cd4:	08001d37 	.word	0x08001d37
 8001cd8:	08001d45 	.word	0x08001d45
                {
                    case '0':
                        turn_off_led();
 8001cdc:	f7ff ffa4 	bl	8001c28 <turn_off_led>
                        /*	[FOR DEBUGGING PURPOSES]
                        {
                            char complete_msg[] = "Game complete!!\r\n";
                            HAL_UART_Transmit(&huart5, (uint8_t*)complete_msg, strlen(complete_msg), 100);
                        }*/
                        break;
 8001ce0:	e03a      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>

                    case '1': HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET); break;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce8:	4824      	ldr	r0, [pc, #144]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001cea:	f001 f87d 	bl	8002de8 <HAL_GPIO_WritePin>
 8001cee:	e033      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '2': HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET); break;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cf6:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001cf8:	f001 f876 	bl	8002de8 <HAL_GPIO_WritePin>
 8001cfc:	e02c      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '3': HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET); break;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d04:	481d      	ldr	r0, [pc, #116]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d06:	f001 f86f 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d0a:	e025      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '4': HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET); break;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d12:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d14:	f001 f868 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d18:	e01e      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '5': HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET); break;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d20:	4816      	ldr	r0, [pc, #88]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d22:	f001 f861 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d26:	e017      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '6': HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET); break;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d30:	f001 f85a 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d34:	e010      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '7': HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET); break;
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d3c:	480f      	ldr	r0, [pc, #60]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d3e:	f001 f853 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d42:	e009      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>
                    case '8': HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET); break;
 8001d44:	2201      	movs	r2, #1
 8001d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d4a:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <HAL_UART_RxCpltCallback+0x13c>)
 8001d4c:	f001 f84c 	bl	8002de8 <HAL_GPIO_WritePin>
 8001d50:	e002      	b.n	8001d58 <HAL_UART_RxCpltCallback+0x118>

                    default:
                        valid_command = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
                        break;
 8001d56:	bf00      	nop
				HAL_UART_Transmit(&huart5, (uint8_t*)ok, strlen(ok), 100);
            }
            */
        }

        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4905      	ldr	r1, [pc, #20]	@ (8001d70 <HAL_UART_RxCpltCallback+0x130>)
 8001d5c:	4808      	ldr	r0, [pc, #32]	@ (8001d80 <HAL_UART_RxCpltCallback+0x140>)
 8001d5e:	f004 f8f9 	bl	8005f54 <HAL_UART_Receive_IT>
    }
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40005000 	.word	0x40005000
 8001d70:	20000740 	.word	0x20000740
 8001d74:	200007a8 	.word	0x200007a8
 8001d78:	200007ac 	.word	0x200007ac
 8001d7c:	48001000 	.word	0x48001000
 8001d80:	200003d8 	.word	0x200003d8

08001d84 <HAL_UART_TxCpltCallback>:

// Function which gets executed at the end of
// a transmission on the UART (which sets the
// "busy state") of the UART at zero again.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <HAL_UART_TxCpltCallback+0x4c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d118      	bne.n	8001dc8 <HAL_UART_TxCpltCallback+0x44>
    	// If there was an override
    	// message, it will have to be sent.
        if (override_pending) {
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_UART_TxCpltCallback+0x50>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_UART_TxCpltCallback+0x3e>
            override_pending = 0;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_UART_TxCpltCallback+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
            tx_busy = 1;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_UART_TxCpltCallback+0x54>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart5, (uint8_t*)override_msg, strlen(override_msg));
 8001dac:	480b      	ldr	r0, [pc, #44]	@ (8001ddc <HAL_UART_TxCpltCallback+0x58>)
 8001dae:	f7fe fa5f 	bl	8000270 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <HAL_UART_TxCpltCallback+0x58>)
 8001dba:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <HAL_UART_TxCpltCallback+0x5c>)
 8001dbc:	f004 f86c 	bl	8005e98 <HAL_UART_Transmit_IT>
        } else {
            tx_busy = 0;
        }
    }
}
 8001dc0:	e002      	b.n	8001dc8 <HAL_UART_TxCpltCallback+0x44>
            tx_busy = 0;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_UART_TxCpltCallback+0x54>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40005000 	.word	0x40005000
 8001dd4:	20000742 	.word	0x20000742
 8001dd8:	20000741 	.word	0x20000741
 8001ddc:	20000070 	.word	0x20000070
 8001de0:	200003d8 	.word	0x200003d8

08001de4 <HAL_TIM_PeriodElapsedCallback>:

// This function handles the interrupt generated when
// a timer's period elapses (when it happens, the function
// simply transmits the gyroscope readings to the paired device)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df4:	d140      	bne.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
    {
    	// If there's a transmission going on, or there's an override message pending (these
    	// are messages coming from the EXTI0 callback), the current transmission gets skipped
    	// (even if we lose gyro "packets/message", the game does not require a huge precision)
    	if (tx_busy || override_pending)
 8001df6:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d13a      	bne.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0x92>
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d135      	bne.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0x92>
    	            return;

    	BSP_GYRO_GetXYZ(gyroscope_measurements);
 8001e0a:	481f      	ldr	r0, [pc, #124]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e0c:	f7ff fcb2 	bl	8001774 <BSP_GYRO_GetXYZ>
		snprintf(tx_msg, sizeof(tx_msg),
				 "HgyroP%.6f,%.6f\n",
				 gyroscope_measurements[0] / max_module,	// Each reading gets normalized
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e12:	ed93 7a00 	vldr	s14, [r3]
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
		snprintf(tx_msg, sizeof(tx_msg),
 8001e20:	ee16 0a90 	vmov	r0, s13
 8001e24:	f7fe fb90 	bl	8000548 <__aeabi_f2d>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
				 gyroscope_measurements[1] / max_module);   // in the [-1,1] interval
 8001e2c:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	eec7 6a27 	vdiv.f32	s13, s14, s15
		snprintf(tx_msg, sizeof(tx_msg),
 8001e3c:	ee16 0a90 	vmov	r0, s13
 8001e40:	f7fe fb82 	bl	8000548 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e4c:	e9cd 4500 	strd	r4, r5, [sp]
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e52:	2164      	movs	r1, #100	@ 0x64
 8001e54:	480f      	ldr	r0, [pc, #60]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e56:	f006 f88d 	bl	8007f74 <sniprintf>

				// We don't need readings on the "Z" axis, for out movement is bidimensional

		// The UART will have to transmit
		// the message, so it gets "busy"
		tx_busy = 1;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart5, (uint8_t*)tx_msg, strlen(tx_msg));
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e62:	f7fe fa05 	bl	8000270 <strlen>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4909      	ldr	r1, [pc, #36]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e6e:	480a      	ldr	r0, [pc, #40]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e70:	f004 f812 	bl	8005e98 <HAL_UART_Transmit_IT>
 8001e74:	e000      	b.n	8001e78 <HAL_TIM_PeriodElapsedCallback+0x94>
    	            return;
 8001e76:	bf00      	nop
    }
}
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000741 	.word	0x20000741
 8001e84:	20000742 	.word	0x20000742
 8001e88:	20000734 	.word	0x20000734
 8001e8c:	2000006c 	.word	0x2000006c
 8001e90:	0800a220 	.word	0x0800a220
 8001e94:	20000744 	.word	0x20000744
 8001e98:	200003d8 	.word	0x200003d8

08001e9c <HAL_GPIO_EXTI_Callback>:
// Interrupt generated by the pressing of the "USER"
// button, it will get used to send the message which
// guarantees the consumption of the power up by a
// player
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)  // User Button
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d115      	bne.n	8001ed8 <HAL_GPIO_EXTI_Callback+0x3c>
    {
        // If the UART is not transmitting, the
    	// transmission gets started.
        if (!tx_busy)
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0x36>
        {
            tx_busy = 1;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart5, (uint8_t*)override_msg, strlen(override_msg));
 8001ebc:	4809      	ldr	r0, [pc, #36]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001ebe:	f7fe f9d7 	bl	8000270 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4906      	ldr	r1, [pc, #24]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001eca:	4807      	ldr	r0, [pc, #28]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ecc:	f003 ffe4 	bl	8005e98 <HAL_UART_Transmit_IT>
        	// (rembember: messages from the User Button CANNOT be lost,
        	// contrary to the gyroscope readings).
            override_pending = 1;
        }
    }
}
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_EXTI_Callback+0x3c>
            override_pending = 1;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_GPIO_EXTI_Callback+0x50>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000741 	.word	0x20000741
 8001ee4:	20000070 	.word	0x20000070
 8001ee8:	200003d8 	.word	0x200003d8
 8001eec:	20000742 	.word	0x20000742

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <Error_Handler+0x8>

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4a0e      	ldr	r2, [pc, #56]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6193      	str	r3, [r2, #24]
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001f32:	2006      	movs	r0, #6
 8001f34:	f000 fc36 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_I2C_MspInit+0x7c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d127      	bne.n	8001fb6 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a16      	ldr	r2, [pc, #88]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6153      	str	r3, [r2, #20]
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001f7e:	23c0      	movs	r3, #192	@ 0xc0
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f82:	2312      	movs	r3, #18
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	480b      	ldr	r0, [pc, #44]	@ (8001fc8 <HAL_I2C_MspInit+0x84>)
 8001f9a:	f000 fccf 	bl	800293c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	@ 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_SPI_MspInit+0x8c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d130      	bne.n	8002050 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_SPI_MspInit+0x90>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_SPI_MspInit+0x90>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_SPI_MspInit+0x90>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_SPI_MspInit+0x90>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_SPI_MspInit+0x90>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002010:	6153      	str	r3, [r2, #20]
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_SPI_MspInit+0x90>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800201e:	23e0      	movs	r3, #224	@ 0xe0
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202e:	2305      	movs	r3, #5
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203c:	f000 fc7e 	bl	800293c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	2023      	movs	r0, #35	@ 0x23
 8002046:	f000 fbb8 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800204a:	2023      	movs	r0, #35	@ 0x23
 800204c:	f000 fbd1 	bl	80027f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	@ 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013000 	.word	0x40013000
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_SPI_MspDeInit+0x38>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10d      	bne.n	800208e <HAL_SPI_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_SPI_MspDeInit+0x3c>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_SPI_MspDeInit+0x3c>)
 8002078:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800207c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 800207e:	21e0      	movs	r1, #224	@ 0xe0
 8002080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002084:	f000 fdd4 	bl	8002c30 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8002088:	2023      	movs	r0, #35	@ 0x23
 800208a:	f000 fbc0 	bl	800280e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40013000 	.word	0x40013000
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b0:	d113      	bne.n	80020da <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_TIM_Base_MspInit+0x44>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	201c      	movs	r0, #28
 80020d0:	f000 fb73 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d4:	201c      	movs	r0, #28
 80020d6:	f000 fb8c 	bl	80027f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <HAL_UART_MspInit+0xc4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d14c      	bne.n	80021a4 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a28      	ldr	r2, [pc, #160]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	4b23      	ldr	r3, [pc, #140]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002128:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800212c:	6153      	str	r3, [r2, #20]
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002140:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <HAL_UART_MspInit+0xc8>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002164:	2305      	movs	r3, #5
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <HAL_UART_MspInit+0xcc>)
 8002170:	f000 fbe4 	bl	800293c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002174:	2304      	movs	r3, #4
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002184:	2305      	movs	r3, #5
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <HAL_UART_MspInit+0xd0>)
 8002190:	f000 fbd4 	bl	800293c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2101      	movs	r1, #1
 8002198:	2035      	movs	r0, #53	@ 0x35
 800219a:	f000 fb0e 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800219e:	2035      	movs	r0, #53	@ 0x35
 80021a0:	f000 fb27 	bl	80027f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	@ 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005000 	.word	0x40005000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00

080021bc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a18      	ldr	r2, [pc, #96]	@ (800223c <HAL_PCD_MspInit+0x80>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d129      	bne.n	8002232 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	6153      	str	r3, [r2, #20]
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80021f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002208:	230e      	movs	r3, #14
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002216:	f000 fb91 	bl	800293c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 8002220:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_PCD_MspInit+0x84>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40005c00 	.word	0x40005c00
 8002240:	40021000 	.word	0x40021000

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <NMI_Handler+0x4>

0800224c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <MemManage_Handler+0x4>

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <UsageFault_Handler+0x4>

0800226c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229a:	f000 f96f 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fdb6 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <TIM2_IRQHandler+0x10>)
 80022b6:	f003 f9d9 	bl	800566c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000038c 	.word	0x2000038c

080022c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <SPI1_IRQHandler+0x10>)
 80022ca:	f002 fe7b 	bl	8004fc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000328 	.word	0x20000328

080022d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <UART5_IRQHandler+0x10>)
 80022de:	f003 fe7d 	bl	8005fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200003d8 	.word	0x200003d8

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002306:	f005 ff01 	bl	800810c <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800232e:	bf00      	nop
 8002330:	e7fd      	b.n	800232e <_exit+0x12>

08002332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002344:	f3af 8000 	nop.w
 8002348:	4601      	mov	r1, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	60ba      	str	r2, [r7, #8]
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf0      	blt.n	8002344 <_read+0x12>
  }

  return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e009      	b.n	8002392 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf1      	blt.n	800237e <_write+0x12>
  }
  return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_close>:

int _close(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023cc:	605a      	str	r2, [r3, #4]
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_isatty>:

int _isatty(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f005 fe66 	bl	800810c <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000a000 	.word	0x2000a000
 800246c:	00000400 	.word	0x00000400
 8002470:	200007b8 	.word	0x200007b8
 8002474:	20000910 	.word	0x20000910

08002478 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800249c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff ffea 	bl	8002478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	@ (80024dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f005 fe25 	bl	8008118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ce:	f7ff f965 	bl	800179c <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80024e0:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 80024e4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80024e8:	2000090c 	.word	0x2000090c

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_Init+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <HAL_Init+0x28>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f000 f94f 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002506:	2000      	movs	r0, #0
 8002508:	f000 f808 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250c:	f7ff fcf6 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f975 	bl	800282a <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 f92f 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000007c 	.word	0x2000007c
 8002574:	20000084 	.word	0x20000084
 8002578:	20000080 	.word	0x20000080

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	@ (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000084 	.word	0x20000084
 80025a0:	200007bc 	.word	0x200007bc

080025a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a8:	4b03      	ldr	r3, [pc, #12]	@ (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	200007bc 	.word	0x200007bc

080025bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <__NVIC_SetPriorityGrouping+0x44>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <__NVIC_GetPriorityGrouping+0x18>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	f003 0307 	and.w	r3, r3, #7
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db0b      	blt.n	800264a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4907      	ldr	r1, [pc, #28]	@ (8002658 <__NVIC_EnableIRQ+0x38>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000e100 	.word	0xe000e100

0800265c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db12      	blt.n	8002694 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	490a      	ldr	r1, [pc, #40]	@ (80026a0 <__NVIC_DisableIRQ+0x44>)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	3320      	adds	r3, #32
 8002684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002688:	f3bf 8f4f 	dsb	sy
}
 800268c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800268e:	f3bf 8f6f 	isb	sy
}
 8002692:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff05 	bl	80025bc <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff1a 	bl	8002604 <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff8e 	bl	80026f8 <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5d 	bl	80026a4 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff0d 	bl	8002620 <__NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff1d 	bl	800265c <__NVIC_DisableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff94 	bl	8002760 <SysTick_Config>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e02e      	b.n	80028b2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800285a:	2b02      	cmp	r3, #2
 800285c:	d008      	beq.n	8002870 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e020      	b.n	80028b2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020e 	bic.w	r2, r2, #14
 800287e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d005      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e027      	b.n	8002930 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 020e 	bic.w	r2, r2, #14
 80028ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
    }
  }
  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294a:	e154      	b.n	8002bf6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	4013      	ands	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8146 	beq.w	8002bf0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d005      	beq.n	800297c <HAL_GPIO_Init+0x40>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d130      	bne.n	80029de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b2:	2201      	movs	r2, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f003 0201 	and.w	r2, r3, #1
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d017      	beq.n	8002a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d123      	bne.n	8002a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	6939      	ldr	r1, [r7, #16]
 8002a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0203 	and.w	r2, r3, #3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a0 	beq.w	8002bf0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab0:	4b58      	ldr	r3, [pc, #352]	@ (8002c14 <HAL_GPIO_Init+0x2d8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a57      	ldr	r2, [pc, #348]	@ (8002c14 <HAL_GPIO_Init+0x2d8>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b55      	ldr	r3, [pc, #340]	@ (8002c14 <HAL_GPIO_Init+0x2d8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac8:	4a53      	ldr	r2, [pc, #332]	@ (8002c18 <HAL_GPIO_Init+0x2dc>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	220f      	movs	r2, #15
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002af2:	d019      	beq.n	8002b28 <HAL_GPIO_Init+0x1ec>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a49      	ldr	r2, [pc, #292]	@ (8002c1c <HAL_GPIO_Init+0x2e0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x1e8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a48      	ldr	r2, [pc, #288]	@ (8002c20 <HAL_GPIO_Init+0x2e4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_GPIO_Init+0x1e4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a47      	ldr	r2, [pc, #284]	@ (8002c24 <HAL_GPIO_Init+0x2e8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d007      	beq.n	8002b1c <HAL_GPIO_Init+0x1e0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a46      	ldr	r2, [pc, #280]	@ (8002c28 <HAL_GPIO_Init+0x2ec>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_GPIO_Init+0x1dc>
 8002b14:	2304      	movs	r3, #4
 8002b16:	e008      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b18:	2305      	movs	r3, #5
 8002b1a:	e006      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e004      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e002      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_GPIO_Init+0x1ee>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f002 0203 	and.w	r2, r2, #3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4093      	lsls	r3, r2
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3a:	4937      	ldr	r1, [pc, #220]	@ (8002c18 <HAL_GPIO_Init+0x2dc>)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b48:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b72:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b96:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9c:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bea:	4a10      	ldr	r2, [pc, #64]	@ (8002c2c <HAL_GPIO_Init+0x2f0>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f aea3 	bne.w	800294c <HAL_GPIO_Init+0x10>
  }
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48001000 	.word	0x48001000
 8002c2c:	40010400 	.word	0x40010400

08002c30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002c3e:	e0b8      	b.n	8002db2 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002c40:	2201      	movs	r2, #1
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ab 	beq.w	8002dac <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c56:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_GPIO_DeInit+0x1a0>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c7e:	d019      	beq.n	8002cb4 <HAL_GPIO_DeInit+0x84>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a54      	ldr	r2, [pc, #336]	@ (8002dd4 <HAL_GPIO_DeInit+0x1a4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_GPIO_DeInit+0x80>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a53      	ldr	r2, [pc, #332]	@ (8002dd8 <HAL_GPIO_DeInit+0x1a8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00d      	beq.n	8002cac <HAL_GPIO_DeInit+0x7c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_GPIO_DeInit+0x1ac>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_DeInit+0x78>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a51      	ldr	r2, [pc, #324]	@ (8002de0 <HAL_GPIO_DeInit+0x1b0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_GPIO_DeInit+0x74>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e008      	b.n	8002cb6 <HAL_GPIO_DeInit+0x86>
 8002ca4:	2305      	movs	r3, #5
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_DeInit+0x86>
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_DeInit+0x86>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_DeInit+0x86>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_DeInit+0x86>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d132      	bne.n	8002d2c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002cc6:	4b47      	ldr	r3, [pc, #284]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4945      	ldr	r1, [pc, #276]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002cd4:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	4941      	ldr	r1, [pc, #260]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ce2:	4b40      	ldr	r3, [pc, #256]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	493e      	ldr	r1, [pc, #248]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	493a      	ldr	r1, [pc, #232]	@ (8002de4 <HAL_GPIO_DeInit+0x1b4>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d0e:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <HAL_GPIO_DeInit+0x1a0>)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	482c      	ldr	r0, [pc, #176]	@ (8002dd0 <HAL_GPIO_DeInit+0x1a0>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	400a      	ands	r2, r1
 8002d26:	3302      	adds	r3, #2
 8002d28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	2103      	movs	r1, #3
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	08d2      	lsrs	r2, r2, #3
 8002d62:	4019      	ands	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2103      	movs	r1, #3
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	2101      	movs	r1, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2103      	movs	r1, #3
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f47f af40 	bne.w	8002c40 <HAL_GPIO_DeInit+0x10>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	48000400 	.word	0x48000400
 8002dd8:	48000800 	.word	0x48000800
 8002ddc:	48000c00 	.word	0x48000c00
 8002de0:	48001000 	.word	0x48001000
 8002de4:	40010400 	.word	0x40010400

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f830 	bl	8001e9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e08d      	b.n	8002f76 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff f868 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	@ 0x24
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e006      	b.n	8002ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d108      	bne.n	8002eea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	e007      	b.n	8002efa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d138      	bne.n	8003006 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e032      	b.n	8003008 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	@ 0x24
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	d139      	bne.n	800309e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003034:	2302      	movs	r3, #2
 8003036:	e033      	b.n	80030a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	@ 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003066:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0b9      	b.n	8003232 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f872 	bl	80021bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2203      	movs	r2, #3
 80030dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 f9c6 	bl	8007476 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e03e      	b.n	800316e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	3311      	adds	r3, #17
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3310      	adds	r3, #16
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	3313      	adds	r3, #19
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3320      	adds	r3, #32
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	3324      	adds	r3, #36	@ 0x24
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	3301      	adds	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	791b      	ldrb	r3, [r3, #4]
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	429a      	cmp	r2, r3
 8003176:	d3bb      	bcc.n	80030f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e044      	b.n	8003208 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	3301      	adds	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	429a      	cmp	r2, r3
 8003210:	d3b5      	bcc.n	800317e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800321e:	f004 f945 	bl	80074ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003242:	af00      	add	r7, sp, #0
 8003244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800324e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f000 bff4 	b.w	800424a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 816d 	beq.w	8003552 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003278:	4bb4      	ldr	r3, [pc, #720]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b04      	cmp	r3, #4
 8003282:	d00c      	beq.n	800329e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003284:	4bb1      	ldr	r3, [pc, #708]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d157      	bne.n	8003340 <HAL_RCC_OscConfig+0x104>
 8003290:	4bae      	ldr	r3, [pc, #696]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329c:	d150      	bne.n	8003340 <HAL_RCC_OscConfig+0x104>
 800329e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80032be:	d802      	bhi.n	80032c6 <HAL_RCC_OscConfig+0x8a>
 80032c0:	4ba2      	ldr	r3, [pc, #648]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0xb6>
 80032c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032ca:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80032da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032de:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80032e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80032ee:	4b97      	ldr	r3, [pc, #604]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032f6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80032fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003306:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8114 	beq.w	8003550 <HAL_RCC_OscConfig+0x314>
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 810b 	bne.w	8003550 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f000 bf85 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003350:	d106      	bne.n	8003360 <HAL_RCC_OscConfig+0x124>
 8003352:	4b7e      	ldr	r3, [pc, #504]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7d      	ldr	r2, [pc, #500]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e036      	b.n	80033ce <HAL_RCC_OscConfig+0x192>
 8003360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10c      	bne.n	800338a <HAL_RCC_OscConfig+0x14e>
 8003370:	4b76      	ldr	r3, [pc, #472]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a75      	ldr	r2, [pc, #468]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a72      	ldr	r2, [pc, #456]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e021      	b.n	80033ce <HAL_RCC_OscConfig+0x192>
 800338a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800339a:	d10c      	bne.n	80033b6 <HAL_RCC_OscConfig+0x17a>
 800339c:	4b6b      	ldr	r3, [pc, #428]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6a      	ldr	r2, [pc, #424]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b68      	ldr	r3, [pc, #416]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a67      	ldr	r2, [pc, #412]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e00b      	b.n	80033ce <HAL_RCC_OscConfig+0x192>
 80033b6:	4b65      	ldr	r3, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a64      	ldr	r2, [pc, #400]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b62      	ldr	r3, [pc, #392]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a61      	ldr	r2, [pc, #388]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ce:	4b5f      	ldr	r3, [pc, #380]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	495a      	ldr	r1, [pc, #360]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d054      	beq.n	80034a2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff f8d4 	bl	80025a4 <HAL_GetTick>
 80033fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003402:	f7ff f8cf 	bl	80025a4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d902      	bls.n	8003418 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	f000 bf19 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 8003418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800341c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800342c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b3f      	cmp	r3, #63	@ 0x3f
 8003438:	d802      	bhi.n	8003440 <HAL_RCC_OscConfig+0x204>
 800343a:	4b44      	ldr	r3, [pc, #272]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e015      	b.n	800346c <HAL_RCC_OscConfig+0x230>
 8003440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003444:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800344c:	fa93 f3a3 	rbit	r3, r3
 8003450:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003458:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800345c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003468:	4b38      	ldr	r3, [pc, #224]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003470:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003474:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003480:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0b0      	beq.n	8003402 <HAL_RCC_OscConfig+0x1c6>
 80034a0:	e057      	b.n	8003552 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7ff f87f 	bl	80025a4 <HAL_GetTick>
 80034a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ac:	f7ff f87a 	bl	80025a4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	@ 0x64
 80034ba:	d902      	bls.n	80034c2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	f000 bec4 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 80034c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80034d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034e2:	d802      	bhi.n	80034ea <HAL_RCC_OscConfig+0x2ae>
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	e015      	b.n	8003516 <HAL_RCC_OscConfig+0x2da>
 80034ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ee:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80034fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003502:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003506:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <HAL_RCC_OscConfig+0x310>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800351a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800351e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003522:	fa92 f2a2 	rbit	r2, r2
 8003526:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800352a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800352e:	fab2 f282 	clz	r2, r2
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f042 0220 	orr.w	r2, r2, #32
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	f002 021f 	and.w	r2, r2, #31
 800353e:	2101      	movs	r1, #1
 8003540:	fa01 f202 	lsl.w	r2, r1, r2
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1b0      	bne.n	80034ac <HAL_RCC_OscConfig+0x270>
 800354a:	e002      	b.n	8003552 <HAL_RCC_OscConfig+0x316>
 800354c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 816c 	beq.w	8003840 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003568:	4bcc      	ldr	r3, [pc, #816]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003574:	4bc9      	ldr	r3, [pc, #804]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d16d      	bne.n	800365c <HAL_RCC_OscConfig+0x420>
 8003580:	4bc6      	ldr	r3, [pc, #792]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d167      	bne.n	800365c <HAL_RCC_OscConfig+0x420>
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800359e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80035aa:	d802      	bhi.n	80035b2 <HAL_RCC_OscConfig+0x376>
 80035ac:	4bbb      	ldr	r3, [pc, #748]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e013      	b.n	80035da <HAL_RCC_OscConfig+0x39e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80035c4:	2302      	movs	r3, #2
 80035c6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80035ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80035d6:	4bb1      	ldr	r3, [pc, #708]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2202      	movs	r2, #2
 80035dc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80035e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80035e4:	fa92 f2a2 	rbit	r2, r2
 80035e8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80035ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCC_OscConfig+0x3e6>
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d002      	beq.n	8003622 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f000 be14 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b9e      	ldr	r3, [pc, #632]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	21f8      	movs	r1, #248	@ 0xf8
 8003638:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003640:	fa91 f1a1 	rbit	r1, r1
 8003644:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003648:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800364c:	fab1 f181 	clz	r1, r1
 8003650:	b2c9      	uxtb	r1, r1
 8003652:	408b      	lsls	r3, r1
 8003654:	4991      	ldr	r1, [pc, #580]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e0f1      	b.n	8003840 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8083 	beq.w	8003774 <HAL_RCC_OscConfig+0x538>
 800366e:	2301      	movs	r3, #1
 8003670:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003680:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800368e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	461a      	mov	r2, r3
 8003696:	2301      	movs	r3, #1
 8003698:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe ff83 	bl	80025a4 <HAL_GetTick>
 800369e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe ff7e 	bl	80025a4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d902      	bls.n	80036ba <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	f000 bdc8 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 80036ba:	2302      	movs	r3, #2
 80036bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80036cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80036d8:	d802      	bhi.n	80036e0 <HAL_RCC_OscConfig+0x4a4>
 80036da:	4b70      	ldr	r3, [pc, #448]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e013      	b.n	8003708 <HAL_RCC_OscConfig+0x4cc>
 80036e0:	2302      	movs	r3, #2
 80036e2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80036f2:	2302      	movs	r3, #2
 80036f4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80036f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003704:	4b65      	ldr	r3, [pc, #404]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800370e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800371a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0b4      	beq.n	80036a4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b58      	ldr	r3, [pc, #352]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	21f8      	movs	r1, #248	@ 0xf8
 8003750:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003758:	fa91 f1a1 	rbit	r1, r1
 800375c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003760:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003764:	fab1 f181 	clz	r1, r1
 8003768:	b2c9      	uxtb	r1, r1
 800376a:	408b      	lsls	r3, r1
 800376c:	494b      	ldr	r1, [pc, #300]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
 8003772:	e065      	b.n	8003840 <HAL_RCC_OscConfig+0x604>
 8003774:	2301      	movs	r3, #1
 8003776:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003786:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003794:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe ff00 	bl	80025a4 <HAL_GetTick>
 80037a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fe fefb 	bl	80025a4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	f000 bd45 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 80037c0:	2302      	movs	r3, #2
 80037c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80037d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80037de:	d802      	bhi.n	80037e6 <HAL_RCC_OscConfig+0x5aa>
 80037e0:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	e013      	b.n	800380e <HAL_RCC_OscConfig+0x5d2>
 80037e6:	2302      	movs	r3, #2
 80037e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80037f8:	2302      	movs	r3, #2
 80037fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80037fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800380a:	4b24      	ldr	r3, [pc, #144]	@ (800389c <HAL_RCC_OscConfig+0x660>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	2202      	movs	r2, #2
 8003810:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003814:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003820:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f042 0220 	orr.w	r2, r2, #32
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f002 021f 	and.w	r2, r2, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1b4      	bne.n	80037aa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8115 	beq.w	8003a80 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d07e      	beq.n	8003964 <HAL_RCC_OscConfig+0x728>
 8003866:	2301      	movs	r3, #1
 8003868:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x664>)
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	461a      	mov	r2, r3
 800388c:	2301      	movs	r3, #1
 800388e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7fe fe88 	bl	80025a4 <HAL_GetTick>
 8003894:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003898:	e00f      	b.n	80038ba <HAL_RCC_OscConfig+0x67e>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fe7e 	bl	80025a4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f000 bcc8 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038d4:	2202      	movs	r2, #2
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003912:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003914:	4bb0      	ldr	r3, [pc, #704]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003920:	2102      	movs	r1, #2
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003928:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f1a3 	rbit	r1, r3
 8003932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003936:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800393a:	6019      	str	r1, [r3, #0]
  return result;
 800393c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0a0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x668>
 8003962:	e08d      	b.n	8003a80 <HAL_RCC_OscConfig+0x844>
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003974:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003982:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003986:	601a      	str	r2, [r3, #0]
  return result;
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003990:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	4b90      	ldr	r3, [pc, #576]	@ (8003bdc <HAL_RCC_OscConfig+0x9a0>)
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	461a      	mov	r2, r3
 80039a2:	2300      	movs	r3, #0
 80039a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fdfd 	bl	80025a4 <HAL_GetTick>
 80039aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fe fdf8 	bl	80025a4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d902      	bls.n	80039c6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	f000 bc42 	b.w	800424a <HAL_RCC_OscConfig+0x100e>
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039ce:	2202      	movs	r2, #2
 80039d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	fa93 f2a3 	rbit	r2, r3
 80039e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039f2:	2202      	movs	r2, #2
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fa93 f2a3 	rbit	r2, r3
 8003a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a16:	2202      	movs	r2, #2
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003a30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a32:	4b69      	ldr	r3, [pc, #420]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a3e:	2102      	movs	r1, #2
 8003a40:	6019      	str	r1, [r3, #0]
 8003a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f1a3 	rbit	r1, r3
 8003a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a58:	6019      	str	r1, [r3, #0]
  return result;
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d197      	bne.n	80039b0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 819e 	beq.w	8003dd2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
 8003ab4:	4b48      	ldr	r3, [pc, #288]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ace:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b42      	ldr	r3, [pc, #264]	@ (8003be0 <HAL_RCC_OscConfig+0x9a4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11a      	bne.n	8003b18 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8003be0 <HAL_RCC_OscConfig+0x9a4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8003be0 <HAL_RCC_OscConfig+0x9a4>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fd59 	bl	80025a4 <HAL_GetTick>
 8003af2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	e009      	b.n	8003b0c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fe fd54 	bl	80025a4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	@ 0x64
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e39e      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_OscConfig+0x9a4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x8fa>
 8003b28:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6213      	str	r3, [r2, #32]
 8003b34:	e035      	b.n	8003ba2 <HAL_RCC_OscConfig+0x966>
 8003b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x924>
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a23      	ldr	r2, [pc, #140]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a20      	ldr	r2, [pc, #128]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b58:	f023 0304 	bic.w	r3, r3, #4
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	e020      	b.n	8003ba2 <HAL_RCC_OscConfig+0x966>
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x94e>
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6213      	str	r3, [r2, #32]
 8003b7c:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x966>
 8003b8a:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6213      	str	r3, [r2, #32]
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd8 <HAL_RCC_OscConfig+0x99c>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8087 	beq.w	8003cc2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fcf6 	bl	80025a4 <HAL_GetTick>
 8003bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e012      	b.n	8003be4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe fcf1 	bl	80025a4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d908      	bls.n	8003be4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e339      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	10908120 	.word	0x10908120
 8003be0:	40007000 	.word	0x40007000
 8003be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003bec:	2202      	movs	r2, #2
 8003bee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	fa93 f2a3 	rbit	r2, r3
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003c34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_RCC_OscConfig+0xa10>
 8003c46:	4b98      	ldr	r3, [pc, #608]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	e013      	b.n	8003c74 <HAL_RCC_OscConfig+0xa38>
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c54:	2202      	movs	r2, #2
 8003c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	fa93 f2a3 	rbit	r2, r3
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c78:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	6011      	str	r1, [r2, #0]
 8003c80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c84:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	fa92 f1a2 	rbit	r1, r2
 8003c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c96:	6011      	str	r1, [r2, #0]
  return result;
 8003c98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c9c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	fab2 f282 	clz	r2, r2
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	f002 021f 	and.w	r2, r2, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f43f af7f 	beq.w	8003bbe <HAL_RCC_OscConfig+0x982>
 8003cc0:	e07d      	b.n	8003dbe <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fc6f 	bl	80025a4 <HAL_GetTick>
 8003cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fe fc6a 	bl	80025a4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e2b2      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8003ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003cec:	2202      	movs	r2, #2
 8003cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d02:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d10:	2202      	movs	r2, #2
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d18:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	fa93 f2a3 	rbit	r2, r3
 8003d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d26:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d2a:	601a      	str	r2, [r3, #0]
  return result;
 8003d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d30:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003d34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_RCC_OscConfig+0xb10>
 8003d46:	4b58      	ldr	r3, [pc, #352]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	e013      	b.n	8003d74 <HAL_RCC_OscConfig+0xb38>
 8003d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d54:	2202      	movs	r2, #2
 8003d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	fa93 f2a3 	rbit	r2, r3
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d78:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6011      	str	r1, [r2, #0]
 8003d80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d84:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	fa92 f1a2 	rbit	r1, r2
 8003d8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d92:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003d96:	6011      	str	r1, [r2, #0]
  return result;
 8003d98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d9c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fab2 f282 	clz	r2, r2
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	f002 021f 	and.w	r2, r2, #31
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d186      	bne.n	8003ccc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dbe:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b38      	ldr	r3, [pc, #224]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a37      	ldr	r2, [pc, #220]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8232 	beq.w	8004248 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	f000 8201 	beq.w	80041f4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	f040 8157 	bne.w	80040b2 <HAL_RCC_OscConfig+0xe76>
 8003e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e08:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e16:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	fa93 f2a3 	rbit	r2, r3
 8003e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e24:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e28:	601a      	str	r2, [r3, #0]
  return result;
 8003e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003e32:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fbab 	bl	80025a4 <HAL_GetTick>
 8003e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e009      	b.n	8003e68 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fba6 	bl	80025a4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e1f0      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e8c:	601a      	str	r2, [r3, #0]
  return result;
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ea0:	d804      	bhi.n	8003eac <HAL_RCC_OscConfig+0xc70>
 8003ea2:	4b01      	ldr	r3, [pc, #4]	@ (8003ea8 <HAL_RCC_OscConfig+0xc6c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	e029      	b.n	8003efc <HAL_RCC_OscConfig+0xcc0>
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003eb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f2a3 	rbit	r2, r3
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003eda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	4bc3      	ldr	r3, [pc, #780]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f00:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f04:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f0e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	fa92 f1a2 	rbit	r1, r2
 8003f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f1c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f20:	6011      	str	r1, [r2, #0]
  return result;
 8003f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fab2 f282 	clz	r2, r2
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	f002 021f 	and.w	r2, r2, #31
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d185      	bne.n	8003e54 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	4baf      	ldr	r3, [pc, #700]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	49a7      	ldr	r1, [pc, #668]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
 8003f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f82:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f90:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f94:	601a      	str	r2, [r3, #0]
  return result;
 8003f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f9e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003faa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fe faf5 	bl	80025a4 <HAL_GetTick>
 8003fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fe faf0 	bl	80025a4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e13a      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8003fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003ff8:	601a      	str	r2, [r3, #0]
  return result;
 8003ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004002:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b3f      	cmp	r3, #63	@ 0x3f
 800400c:	d802      	bhi.n	8004014 <HAL_RCC_OscConfig+0xdd8>
 800400e:	4b7e      	ldr	r3, [pc, #504]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	e027      	b.n	8004064 <HAL_RCC_OscConfig+0xe28>
 8004014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004018:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800401c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	fa93 f2a3 	rbit	r2, r3
 8004030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004034:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	fa93 f2a3 	rbit	r2, r3
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	4b69      	ldr	r3, [pc, #420]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004068:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800406c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004076:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	fa92 f1a2 	rbit	r1, r2
 8004080:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004084:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004088:	6011      	str	r1, [r2, #0]
  return result;
 800408a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800408e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	fab2 f282 	clz	r2, r2
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f042 0220 	orr.w	r2, r2, #32
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	f002 021f 	and.w	r2, r2, #31
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d087      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xd84>
 80040b0:	e0ca      	b.n	8004248 <HAL_RCC_OscConfig+0x100c>
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fa93 f2a3 	rbit	r2, r3
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040d6:	601a      	str	r2, [r3, #0]
  return result;
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	461a      	mov	r2, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe fa54 	bl	80025a4 <HAL_GetTick>
 80040fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004100:	e009      	b.n	8004116 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fe fa4f 	bl	80025a4 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e099      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8004116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800411e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800413a:	601a      	str	r2, [r3, #0]
  return result;
 800413c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004140:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004144:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b3f      	cmp	r3, #63	@ 0x3f
 800414e:	d802      	bhi.n	8004156 <HAL_RCC_OscConfig+0xf1a>
 8004150:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	e027      	b.n	80041a6 <HAL_RCC_OscConfig+0xf6a>
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800415e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004168:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	fa93 f2a3 	rbit	r2, r3
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004180:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	fa93 f2a3 	rbit	r2, r3
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCC_OscConfig+0xfcc>)
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041aa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041b2:	6011      	str	r1, [r2, #0]
 80041b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041b8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	fa92 f1a2 	rbit	r1, r2
 80041c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041c6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041ca:	6011      	str	r1, [r2, #0]
  return result;
 80041cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041d0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	fab2 f282 	clz	r2, r2
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	f042 0220 	orr.w	r2, r2, #32
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	f002 021f 	and.w	r2, r2, #31
 80041e6:	2101      	movs	r1, #1
 80041e8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d187      	bne.n	8004102 <HAL_RCC_OscConfig+0xec6>
 80041f2:	e029      	b.n	8004248 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d103      	bne.n	800420c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e020      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
 8004208:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800420c:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <HAL_RCC_OscConfig+0x1018>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004214:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004218:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800421c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004220:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	429a      	cmp	r2, r3
 800422a:	d10b      	bne.n	8004244 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800422c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004230:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b09e      	sub	sp, #120	@ 0x78
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e154      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b89      	ldr	r3, [pc, #548]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d910      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b86      	ldr	r3, [pc, #536]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 0207 	bic.w	r2, r3, #7
 8004286:	4984      	ldr	r1, [pc, #528]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b82      	ldr	r3, [pc, #520]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e13c      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b7b      	ldr	r3, [pc, #492]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4978      	ldr	r1, [pc, #480]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80cd 	beq.w	8004466 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d137      	bne.n	8004344 <HAL_RCC_ClockConfig+0xec>
 80042d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e4:	fab3 f383 	clz	r3, r3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80042ec:	d802      	bhi.n	80042f4 <HAL_RCC_ClockConfig+0x9c>
 80042ee:	4b6b      	ldr	r3, [pc, #428]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	e00f      	b.n	8004314 <HAL_RCC_ClockConfig+0xbc>
 80042f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	667b      	str	r3, [r7, #100]	@ 0x64
 8004302:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
 8004308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004310:	4b62      	ldr	r3, [pc, #392]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004318:	65ba      	str	r2, [r7, #88]	@ 0x58
 800431a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800431c:	fa92 f2a2 	rbit	r2, r2
 8004320:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004322:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004324:	fab2 f282 	clz	r2, r2
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f042 0220 	orr.w	r2, r2, #32
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	f002 021f 	and.w	r2, r2, #31
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f202 	lsl.w	r2, r1, r2
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d171      	bne.n	8004424 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0ea      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d137      	bne.n	80043bc <HAL_RCC_ClockConfig+0x164>
 800434c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004350:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800435a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b3f      	cmp	r3, #63	@ 0x3f
 8004364:	d802      	bhi.n	800436c <HAL_RCC_ClockConfig+0x114>
 8004366:	4b4d      	ldr	r3, [pc, #308]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e00f      	b.n	800438c <HAL_RCC_ClockConfig+0x134>
 800436c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	647b      	str	r3, [r7, #68]	@ 0x44
 800437a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004388:	4b44      	ldr	r3, [pc, #272]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004390:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004394:	fa92 f2a2 	rbit	r2, r2
 8004398:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800439a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800439c:	fab2 f282 	clz	r2, r2
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	f042 0220 	orr.w	r2, r2, #32
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	f002 021f 	and.w	r2, r2, #31
 80043ac:	2101      	movs	r1, #1
 80043ae:	fa01 f202 	lsl.w	r2, r1, r2
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d135      	bne.n	8004424 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0ae      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
 80043bc:	2302      	movs	r3, #2
 80043be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80043d2:	d802      	bhi.n	80043da <HAL_RCC_ClockConfig+0x182>
 80043d4:	4b31      	ldr	r3, [pc, #196]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	e00d      	b.n	80043f6 <HAL_RCC_ClockConfig+0x19e>
 80043da:	2302      	movs	r3, #2
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e6:	2302      	movs	r3, #2
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	4b2a      	ldr	r3, [pc, #168]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	2202      	movs	r2, #2
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	fa92 f2a2 	rbit	r2, r2
 8004400:	617a      	str	r2, [r7, #20]
  return result;
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f002 021f 	and.w	r2, r2, #31
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f202 	lsl.w	r2, r1, r2
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e07a      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	491a      	ldr	r1, [pc, #104]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004436:	f7fe f8b5 	bl	80025a4 <HAL_GetTick>
 800443a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443c:	e00a      	b.n	8004454 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443e:	f7fe f8b1 	bl	80025a4 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e062      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004454:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_RCC_ClockConfig+0x244>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 020c 	and.w	r2, r3, #12
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	429a      	cmp	r2, r3
 8004464:	d1eb      	bne.n	800443e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004466:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d215      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004474:	4b08      	ldr	r3, [pc, #32]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 0207 	bic.w	r2, r3, #7
 800447c:	4906      	ldr	r1, [pc, #24]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004484:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <HAL_RCC_ClockConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d006      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_RCC_ClockConfig+0x2c2>
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_RCC_ClockConfig+0x2cc>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	491a      	ldr	r1, [pc, #104]	@ (8004524 <HAL_RCC_ClockConfig+0x2cc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ca:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_RCC_ClockConfig+0x2cc>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4912      	ldr	r1, [pc, #72]	@ (8004524 <HAL_RCC_ClockConfig+0x2cc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044de:	f000 f829 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044e2:	4601      	mov	r1, r0
 80044e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <HAL_RCC_ClockConfig+0x2cc>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044ec:	22f0      	movs	r2, #240	@ 0xf0
 80044ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	60fa      	str	r2, [r7, #12]
  return result;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	40d3      	lsrs	r3, r2
 8004502:	4a09      	ldr	r2, [pc, #36]	@ (8004528 <HAL_RCC_ClockConfig+0x2d0>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	fa21 f303 	lsr.w	r3, r1, r3
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <HAL_RCC_ClockConfig+0x2d4>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800450e:	4b08      	ldr	r3, [pc, #32]	@ (8004530 <HAL_RCC_ClockConfig+0x2d8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe f802 	bl	800251c <HAL_InitTick>
  
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3778      	adds	r7, #120	@ 0x78
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	0800a234 	.word	0x0800a234
 800452c:	2000007c 	.word	0x2000007c
 8004530:	20000080 	.word	0x20000080

08004534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800454e:	4b1e      	ldr	r3, [pc, #120]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b04      	cmp	r3, #4
 800455c:	d002      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x30>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d003      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x36>
 8004562:	e026      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004564:	4b19      	ldr	r3, [pc, #100]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004566:	613b      	str	r3, [r7, #16]
      break;
 8004568:	e026      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	0c9b      	lsrs	r3, r3, #18
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a17      	ldr	r2, [pc, #92]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004578:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x94>)
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	4a14      	ldr	r2, [pc, #80]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004590:	4a0e      	ldr	r2, [pc, #56]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x98>)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	fbb2 f2f3 	udiv	r2, r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e004      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]
      break;
 80045b0:	e002      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x98>)
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b8:	693b      	ldr	r3, [r7, #16]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	007a1200 	.word	0x007a1200
 80045d0:	0800a24c 	.word	0x0800a24c
 80045d4:	0800a25c 	.word	0x0800a25c
 80045d8:	003d0900 	.word	0x003d0900

080045dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e0:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e2:	681b      	ldr	r3, [r3, #0]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000007c 	.word	0x2000007c

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045fa:	f7ff ffef 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 80045fe:	4601      	mov	r1, r0
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004608:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800460c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	fa92 f2a2 	rbit	r2, r2
 8004614:	603a      	str	r2, [r7, #0]
  return result;
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	fab2 f282 	clz	r2, r2
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	40d3      	lsrs	r3, r2
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004622:	5cd3      	ldrb	r3, [r2, r3]
 8004624:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800a244 	.word	0x0800a244

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800463e:	f7ff ffcd 	bl	80045dc <HAL_RCC_GetHCLKFreq>
 8004642:	4601      	mov	r1, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800464c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004650:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	fa92 f2a2 	rbit	r2, r2
 8004658:	603a      	str	r2, [r7, #0]
  return result;
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	fab2 f282 	clz	r2, r2
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	40d3      	lsrs	r3, r2
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	0800a244 	.word	0x0800a244

0800467c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b092      	sub	sp, #72	@ 0x48
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80d2 	beq.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a0:	4b4d      	ldr	r3, [pc, #308]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10e      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4a49      	ldr	r2, [pc, #292]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	61d3      	str	r3, [r2, #28]
 80046b8:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b44      	ldr	r3, [pc, #272]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d6:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a40      	ldr	r2, [pc, #256]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fd ff5f 	bl	80025a4 <HAL_GetTick>
 80046e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fd ff5b 	bl	80025a4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	@ 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e167      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fc:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004708:	4b33      	ldr	r3, [pc, #204]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8082 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004722:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004724:	429a      	cmp	r2, r3
 8004726:	d07a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004732:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	fa93 f3a3 	rbit	r3, r3
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	461a      	mov	r2, r3
 8004752:	2301      	movs	r3, #1
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800475a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800477a:	4a17      	ldr	r2, [pc, #92]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800477c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d049      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fd ff0b 	bl	80025a4 <HAL_GetTick>
 800478e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	e00a      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004792:	f7fd ff07 	bl	80025a4 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e111      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 80047a8:	2302      	movs	r3, #2
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b4:	2302      	movs	r3, #2
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	61fb      	str	r3, [r7, #28]
  return result;
 80047c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80047d2:	4b01      	ldr	r3, [pc, #4]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	e00d      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40007000 	.word	0x40007000
 80047e0:	10908100 	.word	0x10908100
 80047e4:	2302      	movs	r3, #2
 80047e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	4b78      	ldr	r3, [pc, #480]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	2202      	movs	r2, #2
 80047f6:	613a      	str	r2, [r7, #16]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	fa92 f2a2 	rbit	r2, r2
 80047fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	fab2 f282 	clz	r2, r2
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f002 021f 	and.w	r2, r2, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0b9      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800481e:	4b6d      	ldr	r3, [pc, #436]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	496a      	ldr	r1, [pc, #424]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800482c:	4313      	orrs	r3, r2
 800482e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004830:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004838:	4b66      	ldr	r3, [pc, #408]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	4a65      	ldr	r2, [pc, #404]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800483e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004842:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004850:	4b60      	ldr	r3, [pc, #384]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	f023 0203 	bic.w	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	495d      	ldr	r1, [pc, #372]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800485e:	4313      	orrs	r3, r2
 8004860:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486e:	4b59      	ldr	r3, [pc, #356]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	4956      	ldr	r1, [pc, #344]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800487c:	4313      	orrs	r3, r2
 800487e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800488c:	4b51      	ldr	r3, [pc, #324]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	494e      	ldr	r1, [pc, #312]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800489a:	4313      	orrs	r3, r2
 800489c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048aa:	4b4a      	ldr	r3, [pc, #296]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	f023 0210 	bic.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4947      	ldr	r1, [pc, #284]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048c8:	4b42      	ldr	r3, [pc, #264]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	493f      	ldr	r1, [pc, #252]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f023 0220 	bic.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4938      	ldr	r1, [pc, #224]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004904:	4b33      	ldr	r3, [pc, #204]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4930      	ldr	r1, [pc, #192]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004912:	4313      	orrs	r3, r2
 8004914:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004922:	4b2c      	ldr	r3, [pc, #176]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4929      	ldr	r1, [pc, #164]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004930:	4313      	orrs	r3, r2
 8004932:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004940:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	4921      	ldr	r1, [pc, #132]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800494e:	4313      	orrs	r3, r2
 8004950:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800495e:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	491a      	ldr	r1, [pc, #104]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800496c:	4313      	orrs	r3, r2
 800496e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	4912      	ldr	r1, [pc, #72]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800498a:	4313      	orrs	r3, r2
 800498c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800499a:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a6:	490b      	ldr	r1, [pc, #44]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049b8:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c4:	4903      	ldr	r1, [pc, #12]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3748      	adds	r7, #72	@ 0x48
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000

080049d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e09d      	b.n	8004b26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049fa:	d009      	beq.n	8004a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd face 	bl	8001fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a50:	d902      	bls.n	8004a58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e002      	b.n	8004a5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a66:	d007      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0204 	and.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e01a      	b.n	8004b76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fd fa81 	bl	8002060 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b08a      	sub	sp, #40	@ 0x28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x26>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e20a      	b.n	8004fba <HAL_SPI_TransmitReceive+0x43c>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bac:	f7fd fcfa 	bl	80025a4 <HAL_GetTick>
 8004bb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc8:	7efb      	ldrb	r3, [r7, #27]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d00e      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x6e>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd4:	d106      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x66>
 8004bde:	7efb      	ldrb	r3, [r7, #27]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d003      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004bea:	e1e0      	b.n	8004fae <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_SPI_TransmitReceive+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_TransmitReceive+0x80>
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004c04:	e1d3      	b.n	8004fae <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d003      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2205      	movs	r2, #5
 8004c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	887a      	ldrh	r2, [r7, #2]
 8004c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	887a      	ldrh	r2, [r7, #2]
 8004c32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	887a      	ldrh	r2, [r7, #2]
 8004c46:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c5c:	d802      	bhi.n	8004c64 <HAL_SPI_TransmitReceive+0xe6>
 8004c5e:	8a3b      	ldrh	r3, [r7, #16]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d908      	bls.n	8004c76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e007      	b.n	8004c86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cac:	f240 8081 	bls.w	8004db2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x140>
 8004cb8:	8a7b      	ldrh	r3, [r7, #18]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d16d      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce2:	e05a      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d11b      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x1ac>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x1ac>
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d113      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11c      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x1f4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d72:	f7fd fc17 	bl	80025a4 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d80b      	bhi.n	8004d9a <HAL_SPI_TransmitReceive+0x21c>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d007      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004d98:	e109      	b.n	8004fae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d19f      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x166>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d199      	bne.n	8004ce4 <HAL_SPI_TransmitReceive+0x166>
 8004db0:	e0e3      	b.n	8004f7a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x244>
 8004dba:	8a7b      	ldrh	r3, [r7, #18]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	f040 80cf 	bne.w	8004f60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d912      	bls.n	8004df2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b02      	subs	r3, #2
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004df0:	e0b6      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e18:	e0a2      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d134      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x314>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d02f      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x314>
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d12c      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d912      	bls.n	8004e68 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b02      	subs	r3, #2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e66:	e012      	b.n	8004e8e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d148      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x3b4>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d042      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d923      	bls.n	8004f00 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b02      	subs	r3, #2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d81f      	bhi.n	8004f2e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e016      	b.n	8004f2e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f103 020c 	add.w	r2, r3, #12
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f32:	f7fd fb37 	bl	80025a4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d803      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x3cc>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x3d2>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004f5e:	e026      	b.n	8004fae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f47f af57 	bne.w	8004e1a <HAL_SPI_TransmitReceive+0x29c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f af50 	bne.w	8004e1a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fa6c 	bl	800545c <SPI_EndRxTxTransaction>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa4:	e003      	b.n	8004fae <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004fb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3728      	adds	r7, #40	@ 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
    return;
 8005006:	e0d7      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_SPI_IRQHandler+0x66>
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
    return;
 8005028:	e0c6      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <HAL_SPI_IRQHandler+0x8c>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80b4 	beq.w	80051b8 <HAL_SPI_IRQHandler+0x1f4>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80ad 	beq.w	80051b8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d023      	beq.n	80050b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d011      	beq.n	800509a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	e00b      	b.n	80050b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693b      	ldr	r3, [r7, #16]
        return;
 80050b0:	e082      	b.n	80051b8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d014      	beq.n	80050e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f8:	f043 0208 	orr.w	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04f      	beq.n	80051b6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005124:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_SPI_IRQHandler+0x17e>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d034      	beq.n	80051ac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0203 	bic.w	r2, r2, #3
 8005150:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <HAL_SPI_IRQHandler+0x1fc>)
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd fba9 	bl	80028be <HAL_DMA_Abort_IT>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005176:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	4a0d      	ldr	r2, [pc, #52]	@ (80051c0 <HAL_SPI_IRQHandler+0x1fc>)
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd fb93 	bl	80028be <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80051aa:	e003      	b.n	80051b4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f809 	bl	80051c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051b2:	e000      	b.n	80051b6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051b4:	bf00      	nop
    return;
 80051b6:	bf00      	nop
  }
}
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	080051f5 	.word	0x080051f5

080051c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051e6:	b2db      	uxtb	r3, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ffd7 	bl	80051c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005230:	f7fd f9b8 	bl	80025a4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005240:	f7fd f9b0 	bl	80025a4 <HAL_GetTick>
 8005244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005246:	4b39      	ldr	r3, [pc, #228]	@ (800532c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005256:	e054      	b.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d050      	beq.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005260:	f7fd f9a0 	bl	80025a4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d13d      	bne.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800528e:	d111      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005298:	d004      	beq.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a2:	d107      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052bc:	d10f      	bne.n	80052de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e017      	b.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3b01      	subs	r3, #1
 8005300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4013      	ands	r3, r2
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	429a      	cmp	r2, r3
 800531e:	d19b      	bne.n	8005258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000007c 	.word	0x2000007c

08005330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005342:	f7fd f92f 	bl	80025a4 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	4413      	add	r3, r2
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005352:	f7fd f927 	bl	80025a4 <HAL_GetTick>
 8005356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005360:	4b3d      	ldr	r3, [pc, #244]	@ (8005458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	00da      	lsls	r2, r3, #3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	0d1b      	lsrs	r3, r3, #20
 8005370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005378:	e060      	b.n	800543c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005380:	d107      	bne.n	8005392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d050      	beq.n	800543c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800539a:	f7fd f903 	bl	80025a4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d902      	bls.n	80053b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d13d      	bne.n	800542c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c8:	d111      	bne.n	80053ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d2:	d004      	beq.n	80053de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d107      	bne.n	80053ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f6:	d10f      	bne.n	8005418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e010      	b.n	800544e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3b01      	subs	r3, #1
 800543a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d196      	bne.n	800537a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3728      	adds	r7, #40	@ 0x28
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000007c 	.word	0x2000007c

0800545c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff ff5b 	bl	8005330 <SPI_WaitFifoStateUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005484:	f043 0220 	orr.w	r2, r3, #32
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e027      	b.n	80054e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	2180      	movs	r1, #128	@ 0x80
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff fec0 	bl	8005220 <SPI_WaitFlagStateUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e014      	b.n	80054e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff ff34 	bl	8005330 <SPI_WaitFifoStateUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e000      	b.n	80054e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e049      	b.n	800558e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fdc6 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 fa94 	bl	8005a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04a      	b.n	8005646 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a21      	ldr	r2, [pc, #132]	@ (8005654 <HAL_TIM_Base_Start_IT+0xbc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055da:	d013      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005658 <HAL_TIM_Base_Start_IT+0xc0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <HAL_TIM_Base_Start_IT+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005660 <HAL_TIM_Base_Start_IT+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x6c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <HAL_TIM_Base_Start_IT+0xcc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d115      	bne.n	8005630 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4b17      	ldr	r3, [pc, #92]	@ (8005668 <HAL_TIM_Base_Start_IT+0xd0>)
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d015      	beq.n	8005642 <HAL_TIM_Base_Start_IT+0xaa>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561c:	d011      	beq.n	8005642 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	e008      	b.n	8005642 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e000      	b.n	8005644 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	00010007 	.word	0x00010007

0800566c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0202 	mvn.w	r2, #2
 80056a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9ad 	bl	8005a16 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f99f 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f9b0 	bl	8005a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01b      	beq.n	800571c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0204 	mvn.w	r2, #4
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f987 	bl	8005a16 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f979 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f98a 	bl	8005a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d020      	beq.n	8005768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0208 	mvn.w	r2, #8
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f961 	bl	8005a16 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f953 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f964 	bl	8005a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	d020      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0210 	mvn.w	r2, #16
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2208      	movs	r2, #8
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f93b 	bl	8005a16 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f92d 	bl	8005a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f93e 	bl	8005a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0201 	mvn.w	r2, #1
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc fb06 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00c      	beq.n	80057fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 faec 	bl	8005dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fae4 	bl	8005de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00c      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f8fd 	bl	8005a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0220 	mvn.w	r2, #32
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 faac 	bl	8005dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIM_ConfigClockSource+0x1c>
 8005888:	2302      	movs	r3, #2
 800588a:	e0b6      	b.n	80059fa <HAL_TIM_ConfigClockSource+0x18a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c8:	d03e      	beq.n	8005948 <HAL_TIM_ConfigClockSource+0xd8>
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ce:	f200 8087 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d6:	f000 8086 	beq.w	80059e6 <HAL_TIM_ConfigClockSource+0x176>
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058de:	d87f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058e0:	2b70      	cmp	r3, #112	@ 0x70
 80058e2:	d01a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xaa>
 80058e4:	2b70      	cmp	r3, #112	@ 0x70
 80058e6:	d87b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058e8:	2b60      	cmp	r3, #96	@ 0x60
 80058ea:	d050      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x11e>
 80058ec:	2b60      	cmp	r3, #96	@ 0x60
 80058ee:	d877      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058f0:	2b50      	cmp	r3, #80	@ 0x50
 80058f2:	d03c      	beq.n	800596e <HAL_TIM_ConfigClockSource+0xfe>
 80058f4:	2b50      	cmp	r3, #80	@ 0x50
 80058f6:	d873      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d058      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x13e>
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d86f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005900:	2b30      	cmp	r3, #48	@ 0x30
 8005902:	d064      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005904:	2b30      	cmp	r3, #48	@ 0x30
 8005906:	d86b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d060      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d867      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05c      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005914:	2b10      	cmp	r3, #16
 8005916:	d05a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005918:	e062      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	f000 f9a9 	bl	8005c80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800593c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
      break;
 8005946:	e04f      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	f000 f992 	bl	8005c80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800596a:	609a      	str	r2, [r3, #8]
      break;
 800596c:	e03c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	461a      	mov	r2, r3
 800597c:	f000 f906 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2150      	movs	r1, #80	@ 0x50
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f95f 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 800598c:	e02c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	461a      	mov	r2, r3
 800599c:	f000 f925 	bl	8005bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2160      	movs	r1, #96	@ 0x60
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f94f 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 80059ac:	e01c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 f8e6 	bl	8005b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2140      	movs	r1, #64	@ 0x40
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f93f 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 f936 	bl	8005c4a <TIM_ITRx_SetConfig>
      break;
 80059de:	e003      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a42      	ldr	r2, [pc, #264]	@ (8005b70 <TIM_Base_SetConfig+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <TIM_Base_SetConfig+0x38>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a72:	d00b      	beq.n	8005a8c <TIM_Base_SetConfig+0x38>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a3f      	ldr	r2, [pc, #252]	@ (8005b74 <TIM_Base_SetConfig+0x120>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d007      	beq.n	8005a8c <TIM_Base_SetConfig+0x38>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b78 <TIM_Base_SetConfig+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_Base_SetConfig+0x38>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3d      	ldr	r2, [pc, #244]	@ (8005b7c <TIM_Base_SetConfig+0x128>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d108      	bne.n	8005a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a33      	ldr	r2, [pc, #204]	@ (8005b70 <TIM_Base_SetConfig+0x11c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01b      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d017      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a30      	ldr	r2, [pc, #192]	@ (8005b74 <TIM_Base_SetConfig+0x120>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b78 <TIM_Base_SetConfig+0x124>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b7c <TIM_Base_SetConfig+0x128>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b80 <TIM_Base_SetConfig+0x12c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b84 <TIM_Base_SetConfig+0x130>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_Base_SetConfig+0x8a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b88 <TIM_Base_SetConfig+0x134>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <TIM_Base_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0xe8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <TIM_Base_SetConfig+0x128>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0xe8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <TIM_Base_SetConfig+0x12c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0xe8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <TIM_Base_SetConfig+0x130>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0xe8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a14      	ldr	r2, [pc, #80]	@ (8005b88 <TIM_Base_SetConfig+0x134>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d103      	bne.n	8005b44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]
  }
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 030a 	bic.w	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f023 0210 	bic.w	r2, r3, #16
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	031b      	lsls	r3, r3, #12
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f043 0307 	orr.w	r3, r3, #7
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e063      	b.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a12      	ldr	r2, [pc, #72]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40014000 	.word	0x40014000

08005dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e040      	b.n	8005e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fc f962 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	@ 0x24
 8005e28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fd9a 	bl	800697c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fbc3 	bl	80065d4 <UART_SetConfig>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e01b      	b.n	8005e90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fe19 	bl	8006ac0 <UART_CheckIdleState>
 8005e8e:	4603      	mov	r3, r0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b08b      	sub	sp, #44	@ 0x2c
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d147      	bne.n	8005f3e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_UART_Transmit_IT+0x22>
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e040      	b.n	8005f40 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2221      	movs	r2, #33	@ 0x21
 8005ee6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef0:	d107      	bne.n	8005f02 <HAL_UART_Transmit_IT+0x6a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a13      	ldr	r2, [pc, #76]	@ (8005f4c <HAL_UART_Transmit_IT+0xb4>)
 8005efe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005f00:	e002      	b.n	8005f08 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a12      	ldr	r2, [pc, #72]	@ (8005f50 <HAL_UART_Transmit_IT+0xb8>)
 8005f06:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	69f9      	ldr	r1, [r7, #28]
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	372c      	adds	r7, #44	@ 0x2c
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	08006fff 	.word	0x08006fff
 8005f50:	08006f49 	.word	0x08006f49

08005f54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d132      	bne.n	8005fd2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_UART_Receive_IT+0x24>
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e02b      	b.n	8005fd4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d018      	beq.n	8005fc2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	623b      	str	r3, [r7, #32]
 8005fb0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68b9      	ldr	r1, [r7, #8]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fe8f 	bl	8006cec <UART_Start_Receive_IT>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	e000      	b.n	8005fd4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
  }
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3728      	adds	r7, #40	@ 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b0ba      	sub	sp, #232	@ 0xe8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006006:	f640 030f 	movw	r3, #2063	@ 0x80f
 800600a:	4013      	ands	r3, r2
 800600c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d115      	bne.n	8006044 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 82ab 	beq.w	8006590 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
      }
      return;
 8006042:	e2a5      	b.n	8006590 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8117 	beq.w	800627c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800604e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800605a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800605e:	4b85      	ldr	r3, [pc, #532]	@ (8006274 <HAL_UART_IRQHandler+0x298>)
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 810a 	beq.w	800627c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d011      	beq.n	8006098 <HAL_UART_IRQHandler+0xbc>
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2201      	movs	r2, #1
 8006086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608e:	f043 0201 	orr.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d011      	beq.n	80060c8 <HAL_UART_IRQHandler+0xec>
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2202      	movs	r2, #2
 80060b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d011      	beq.n	80060f8 <HAL_UART_IRQHandler+0x11c>
 80060d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2204      	movs	r2, #4
 80060e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ee:	f043 0202 	orr.w	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d017      	beq.n	8006134 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006114:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2208      	movs	r2, #8
 8006122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612a:	f043 0208 	orr.w	r2, r3, #8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <HAL_UART_IRQHandler+0x18a>
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8211 	beq.w	8006594 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d04f      	beq.n	800625e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fe48 	bl	8006e54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d141      	bne.n	8006256 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800620a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d9      	bne.n	80061d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	4a13      	ldr	r2, [pc, #76]	@ (8006278 <HAL_UART_IRQHandler+0x29c>)
 800622c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006232:	4618      	mov	r0, r3
 8006234:	f7fc fb43 	bl	80028be <HAL_DMA_Abort_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	e00f      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9aa 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	e00b      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f9a6 	bl	80065a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	e007      	b.n	800626e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9a2 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800626c:	e192      	b.n	8006594 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626e:	bf00      	nop
    return;
 8006270:	e190      	b.n	8006594 <HAL_UART_IRQHandler+0x5b8>
 8006272:	bf00      	nop
 8006274:	04000120 	.word	0x04000120
 8006278:	08006f1d 	.word	0x08006f1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 814b 	bne.w	800651c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8144 	beq.w	800651c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 813d 	beq.w	800651c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2210      	movs	r2, #16
 80062a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b40      	cmp	r3, #64	@ 0x40
 80062b6:	f040 80b5 	bne.w	8006424 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8164 	beq.w	8006598 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062da:	429a      	cmp	r2, r3
 80062dc:	f080 815c 	bcs.w	8006598 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	f000 8086 	beq.w	8006402 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800630a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800630e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006312:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006320:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006324:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800632c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1da      	bne.n	80062f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006364:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006368:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800636c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e1      	bne.n	8006340 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3308      	adds	r3, #8
 8006382:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800638c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800638e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e3      	bne.n	800637c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e4      	bne.n	80063c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fc fa20 	bl	8002842 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006414:	b29b      	uxth	r3, r3
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	b29b      	uxth	r3, r3
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8cd 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006422:	e0b9      	b.n	8006598 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006430:	b29b      	uxth	r3, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80ab 	beq.w	800659c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80a6 	beq.w	800659c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800645e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006472:	647b      	str	r3, [r7, #68]	@ 0x44
 8006474:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e4      	bne.n	8006450 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	623b      	str	r3, [r7, #32]
   return(result);
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e3      	bne.n	8006486 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	617b      	str	r3, [r7, #20]
   return(result);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e4      	bne.n	80064d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800650e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f851 	bl	80065bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800651a:	e03f      	b.n	800659c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800651c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00e      	beq.n	8006546 <HAL_UART_IRQHandler+0x56a>
 8006528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800652c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800653c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 ff8f 	bl	8007462 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006544:	e02d      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00e      	beq.n	8006570 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d008      	beq.n	8006570 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01c      	beq.n	80065a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
    }
    return;
 800656e:	e017      	b.n	80065a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d012      	beq.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00c      	beq.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fd98 	bl	80070be <UART_EndTransmit_IT>
    return;
 800658e:	e008      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006590:	bf00      	nop
 8006592:	e006      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006594:	bf00      	nop
 8006596:	e004      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006598:	bf00      	nop
 800659a:	e002      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80065a0:	bf00      	nop
  }

}
 80065a2:	37e8      	adds	r7, #232	@ 0xe8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006602:	f023 030c 	bic.w	r3, r3, #12
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	6979      	ldr	r1, [r7, #20]
 800660c:	430b      	orrs	r3, r1
 800660e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4aa7      	ldr	r2, [pc, #668]	@ (80068ec <UART_SetConfig+0x318>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d120      	bne.n	8006696 <UART_SetConfig+0xc2>
 8006654:	4ba6      	ldr	r3, [pc, #664]	@ (80068f0 <UART_SetConfig+0x31c>)
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	2b03      	cmp	r3, #3
 800665e:	d817      	bhi.n	8006690 <UART_SetConfig+0xbc>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <UART_SetConfig+0x94>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006679 	.word	0x08006679
 800666c:	08006685 	.word	0x08006685
 8006670:	0800668b 	.word	0x0800668b
 8006674:	0800667f 	.word	0x0800667f
 8006678:	2301      	movs	r3, #1
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e0b5      	b.n	80067ea <UART_SetConfig+0x216>
 800667e:	2302      	movs	r3, #2
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e0b2      	b.n	80067ea <UART_SetConfig+0x216>
 8006684:	2304      	movs	r3, #4
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e0af      	b.n	80067ea <UART_SetConfig+0x216>
 800668a:	2308      	movs	r3, #8
 800668c:	77fb      	strb	r3, [r7, #31]
 800668e:	e0ac      	b.n	80067ea <UART_SetConfig+0x216>
 8006690:	2310      	movs	r3, #16
 8006692:	77fb      	strb	r3, [r7, #31]
 8006694:	e0a9      	b.n	80067ea <UART_SetConfig+0x216>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a96      	ldr	r2, [pc, #600]	@ (80068f4 <UART_SetConfig+0x320>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d124      	bne.n	80066ea <UART_SetConfig+0x116>
 80066a0:	4b93      	ldr	r3, [pc, #588]	@ (80068f0 <UART_SetConfig+0x31c>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ac:	d011      	beq.n	80066d2 <UART_SetConfig+0xfe>
 80066ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b2:	d817      	bhi.n	80066e4 <UART_SetConfig+0x110>
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b8:	d011      	beq.n	80066de <UART_SetConfig+0x10a>
 80066ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066be:	d811      	bhi.n	80066e4 <UART_SetConfig+0x110>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <UART_SetConfig+0xf8>
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c8:	d006      	beq.n	80066d8 <UART_SetConfig+0x104>
 80066ca:	e00b      	b.n	80066e4 <UART_SetConfig+0x110>
 80066cc:	2300      	movs	r3, #0
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e08b      	b.n	80067ea <UART_SetConfig+0x216>
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e088      	b.n	80067ea <UART_SetConfig+0x216>
 80066d8:	2304      	movs	r3, #4
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e085      	b.n	80067ea <UART_SetConfig+0x216>
 80066de:	2308      	movs	r3, #8
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e082      	b.n	80067ea <UART_SetConfig+0x216>
 80066e4:	2310      	movs	r3, #16
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e07f      	b.n	80067ea <UART_SetConfig+0x216>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a82      	ldr	r2, [pc, #520]	@ (80068f8 <UART_SetConfig+0x324>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d124      	bne.n	800673e <UART_SetConfig+0x16a>
 80066f4:	4b7e      	ldr	r3, [pc, #504]	@ (80068f0 <UART_SetConfig+0x31c>)
 80066f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80066fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006700:	d011      	beq.n	8006726 <UART_SetConfig+0x152>
 8006702:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006706:	d817      	bhi.n	8006738 <UART_SetConfig+0x164>
 8006708:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800670c:	d011      	beq.n	8006732 <UART_SetConfig+0x15e>
 800670e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006712:	d811      	bhi.n	8006738 <UART_SetConfig+0x164>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <UART_SetConfig+0x14c>
 8006718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x158>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x164>
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e061      	b.n	80067ea <UART_SetConfig+0x216>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e05e      	b.n	80067ea <UART_SetConfig+0x216>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e05b      	b.n	80067ea <UART_SetConfig+0x216>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e058      	b.n	80067ea <UART_SetConfig+0x216>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e055      	b.n	80067ea <UART_SetConfig+0x216>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6e      	ldr	r2, [pc, #440]	@ (80068fc <UART_SetConfig+0x328>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d124      	bne.n	8006792 <UART_SetConfig+0x1be>
 8006748:	4b69      	ldr	r3, [pc, #420]	@ (80068f0 <UART_SetConfig+0x31c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006750:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006754:	d011      	beq.n	800677a <UART_SetConfig+0x1a6>
 8006756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800675a:	d817      	bhi.n	800678c <UART_SetConfig+0x1b8>
 800675c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006760:	d011      	beq.n	8006786 <UART_SetConfig+0x1b2>
 8006762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006766:	d811      	bhi.n	800678c <UART_SetConfig+0x1b8>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <UART_SetConfig+0x1a0>
 800676c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006770:	d006      	beq.n	8006780 <UART_SetConfig+0x1ac>
 8006772:	e00b      	b.n	800678c <UART_SetConfig+0x1b8>
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e037      	b.n	80067ea <UART_SetConfig+0x216>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e034      	b.n	80067ea <UART_SetConfig+0x216>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e031      	b.n	80067ea <UART_SetConfig+0x216>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e02e      	b.n	80067ea <UART_SetConfig+0x216>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e02b      	b.n	80067ea <UART_SetConfig+0x216>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5a      	ldr	r2, [pc, #360]	@ (8006900 <UART_SetConfig+0x32c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d124      	bne.n	80067e6 <UART_SetConfig+0x212>
 800679c:	4b54      	ldr	r3, [pc, #336]	@ (80068f0 <UART_SetConfig+0x31c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80067a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067a8:	d011      	beq.n	80067ce <UART_SetConfig+0x1fa>
 80067aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067ae:	d817      	bhi.n	80067e0 <UART_SetConfig+0x20c>
 80067b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b4:	d011      	beq.n	80067da <UART_SetConfig+0x206>
 80067b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067ba:	d811      	bhi.n	80067e0 <UART_SetConfig+0x20c>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <UART_SetConfig+0x1f4>
 80067c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067c4:	d006      	beq.n	80067d4 <UART_SetConfig+0x200>
 80067c6:	e00b      	b.n	80067e0 <UART_SetConfig+0x20c>
 80067c8:	2300      	movs	r3, #0
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e00d      	b.n	80067ea <UART_SetConfig+0x216>
 80067ce:	2302      	movs	r3, #2
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e00a      	b.n	80067ea <UART_SetConfig+0x216>
 80067d4:	2304      	movs	r3, #4
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e007      	b.n	80067ea <UART_SetConfig+0x216>
 80067da:	2308      	movs	r3, #8
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e004      	b.n	80067ea <UART_SetConfig+0x216>
 80067e0:	2310      	movs	r3, #16
 80067e2:	77fb      	strb	r3, [r7, #31]
 80067e4:	e001      	b.n	80067ea <UART_SetConfig+0x216>
 80067e6:	2310      	movs	r3, #16
 80067e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067f2:	d15b      	bne.n	80068ac <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80067f4:	7ffb      	ldrb	r3, [r7, #31]
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d827      	bhi.n	800684a <UART_SetConfig+0x276>
 80067fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <UART_SetConfig+0x22c>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006825 	.word	0x08006825
 8006804:	0800682d 	.word	0x0800682d
 8006808:	08006835 	.word	0x08006835
 800680c:	0800684b 	.word	0x0800684b
 8006810:	0800683b 	.word	0x0800683b
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800684b 	.word	0x0800684b
 800681c:	0800684b 	.word	0x0800684b
 8006820:	08006843 	.word	0x08006843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006824:	f7fd fee6 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8006828:	61b8      	str	r0, [r7, #24]
        break;
 800682a:	e013      	b.n	8006854 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682c:	f7fd ff04 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8006830:	61b8      	str	r0, [r7, #24]
        break;
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006834:	4b33      	ldr	r3, [pc, #204]	@ (8006904 <UART_SetConfig+0x330>)
 8006836:	61bb      	str	r3, [r7, #24]
        break;
 8006838:	e00c      	b.n	8006854 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683a:	f7fd fe7b 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 800683e:	61b8      	str	r0, [r7, #24]
        break;
 8006840:	e008      	b.n	8006854 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e004      	b.n	8006854 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	77bb      	strb	r3, [r7, #30]
        break;
 8006852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8082 	beq.w	8006960 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	005a      	lsls	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	441a      	add	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b0f      	cmp	r3, #15
 8006876:	d916      	bls.n	80068a6 <UART_SetConfig+0x2d2>
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800687e:	d212      	bcs.n	80068a6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f023 030f 	bic.w	r3, r3, #15
 8006888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	b29a      	uxth	r2, r3
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	4313      	orrs	r3, r2
 800689a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	89fa      	ldrh	r2, [r7, #14]
 80068a2:	60da      	str	r2, [r3, #12]
 80068a4:	e05c      	b.n	8006960 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	77bb      	strb	r3, [r7, #30]
 80068aa:	e059      	b.n	8006960 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ac:	7ffb      	ldrb	r3, [r7, #31]
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d835      	bhi.n	800691e <UART_SetConfig+0x34a>
 80068b2:	a201      	add	r2, pc, #4	@ (adr r2, 80068b8 <UART_SetConfig+0x2e4>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068e5 	.word	0x080068e5
 80068c0:	08006909 	.word	0x08006909
 80068c4:	0800691f 	.word	0x0800691f
 80068c8:	0800690f 	.word	0x0800690f
 80068cc:	0800691f 	.word	0x0800691f
 80068d0:	0800691f 	.word	0x0800691f
 80068d4:	0800691f 	.word	0x0800691f
 80068d8:	08006917 	.word	0x08006917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7fd fe8a 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80068e0:	61b8      	str	r0, [r7, #24]
        break;
 80068e2:	e021      	b.n	8006928 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e4:	f7fd fea8 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 80068e8:	61b8      	str	r0, [r7, #24]
        break;
 80068ea:	e01d      	b.n	8006928 <UART_SetConfig+0x354>
 80068ec:	40013800 	.word	0x40013800
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40004400 	.word	0x40004400
 80068f8:	40004800 	.word	0x40004800
 80068fc:	40004c00 	.word	0x40004c00
 8006900:	40005000 	.word	0x40005000
 8006904:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006908:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <UART_SetConfig+0x3a4>)
 800690a:	61bb      	str	r3, [r7, #24]
        break;
 800690c:	e00c      	b.n	8006928 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690e:	f7fd fe11 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8006912:	61b8      	str	r0, [r7, #24]
        break;
 8006914:	e008      	b.n	8006928 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e004      	b.n	8006928 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	77bb      	strb	r3, [r7, #30]
        break;
 8006926:	bf00      	nop
    }

    if (pclk != 0U)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d018      	beq.n	8006960 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	085a      	lsrs	r2, r3, #1
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	441a      	add	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b0f      	cmp	r3, #15
 8006946:	d909      	bls.n	800695c <UART_SetConfig+0x388>
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694e:	d205      	bcs.n	800695c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	e001      	b.n	8006960 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800696c:	7fbb      	ldrb	r3, [r7, #30]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	007a1200 	.word	0x007a1200

0800697c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7a:	d10a      	bne.n	8006a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b098      	sub	sp, #96	@ 0x60
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad0:	f7fb fd68 	bl	80025a4 <HAL_GetTick>
 8006ad4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d12e      	bne.n	8006b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f88c 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d021      	beq.n	8006b42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e062      	b.n	8006c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d149      	bne.n	8006be4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f856 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d03c      	beq.n	8006be4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	623b      	str	r3, [r7, #32]
   return(result);
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e011      	b.n	8006c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3758      	adds	r7, #88	@ 0x58
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	e04f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d04b      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fb fcbb 	bl	80025a4 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e04e      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d037      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d034      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b40      	cmp	r3, #64	@ 0x40
 8006c5c:	d031      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d110      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2208      	movs	r2, #8
 8006c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f8ed 	bl	8006e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e029      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d111      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f8d3 	bl	8006e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e00f      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	2300      	movne	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d0a0      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b097      	sub	sp, #92	@ 0x5c
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1e:	d10e      	bne.n	8006d3e <UART_Start_Receive_IT+0x52>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <UART_Start_Receive_IT+0x48>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d32:	e01a      	b.n	8006d6a <UART_Start_Receive_IT+0x7e>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	22ff      	movs	r2, #255	@ 0xff
 8006d38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d3c:	e015      	b.n	8006d6a <UART_Start_Receive_IT+0x7e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <UART_Start_Receive_IT+0x76>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <UART_Start_Receive_IT+0x6c>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	22ff      	movs	r2, #255	@ 0xff
 8006d52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d56:	e008      	b.n	8006d6a <UART_Start_Receive_IT+0x7e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	227f      	movs	r2, #127	@ 0x7f
 8006d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d60:	e003      	b.n	8006d6a <UART_Start_Receive_IT+0x7e>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2222      	movs	r2, #34	@ 0x22
 8006d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e5      	bne.n	8006d7a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db6:	d107      	bne.n	8006dc8 <UART_Start_Receive_IT+0xdc>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a22      	ldr	r2, [pc, #136]	@ (8006e4c <UART_Start_Receive_IT+0x160>)
 8006dc4:	669a      	str	r2, [r3, #104]	@ 0x68
 8006dc6:	e002      	b.n	8006dce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a21      	ldr	r2, [pc, #132]	@ (8006e50 <UART_Start_Receive_IT+0x164>)
 8006dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d019      	beq.n	8006e0a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_Start_Receive_IT+0xea>
 8006e08:	e018      	b.n	8006e3c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	613b      	str	r3, [r7, #16]
   return(result);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f043 0320 	orr.w	r3, r3, #32
 8006e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e28:	623b      	str	r3, [r7, #32]
 8006e2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e6      	bne.n	8006e0a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	375c      	adds	r7, #92	@ 0x5c
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	080072bb 	.word	0x080072bb
 8006e50:	08007113 	.word	0x08007113

08006e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b095      	sub	sp, #84	@ 0x54
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d118      	bne.n	8006efc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f023 0310 	bic.w	r3, r3, #16
 8006ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee8:	61bb      	str	r3, [r7, #24]
 8006eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6979      	ldr	r1, [r7, #20]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f10:	bf00      	nop
 8006f12:	3754      	adds	r7, #84	@ 0x54
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff fb34 	bl	80065a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08f      	sub	sp, #60	@ 0x3c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f54:	2b21      	cmp	r3, #33	@ 0x21
 8006f56:	d14c      	bne.n	8006ff2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d132      	bne.n	8006fca <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e6      	bne.n	8006f64 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e6      	bne.n	8006f96 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006fc8:	e013      	b.n	8006ff2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006ff2:	bf00      	nop
 8006ff4:	373c      	adds	r7, #60	@ 0x3c
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b091      	sub	sp, #68	@ 0x44
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800700a:	2b21      	cmp	r3, #33	@ 0x21
 800700c:	d151      	bne.n	80070b2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d132      	bne.n	8007080 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	623b      	str	r3, [r7, #32]
   return(result);
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800702e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
 800703a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800703e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	60fb      	str	r3, [r7, #12]
   return(result);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	617b      	str	r3, [r7, #20]
   return(result);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e6      	bne.n	800704c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800707e:	e018      	b.n	80070b2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007092:	b292      	uxth	r2, r2
 8007094:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80070b2:	bf00      	nop
 80070b4:	3744      	adds	r7, #68	@ 0x44
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b088      	sub	sp, #32
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6979      	ldr	r1, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e6      	bne.n	80070c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fa fe3d 	bl	8001d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710a:	bf00      	nop
 800710c:	3720      	adds	r7, #32
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b09c      	sub	sp, #112	@ 0x70
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007120:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712a:	2b22      	cmp	r3, #34	@ 0x22
 800712c:	f040 80b9 	bne.w	80072a2 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007136:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800713a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800713e:	b2d9      	uxtb	r1, r3
 8007140:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007144:	b2da      	uxtb	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714a:	400a      	ands	r2, r1
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 809c 	bne.w	80072b2 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800718a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800718e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007198:	65bb      	str	r3, [r7, #88]	@ 0x58
 800719a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800719e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071be:	f023 0301 	bic.w	r3, r3, #1
 80071c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80071ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d018      	beq.n	8007234 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	623b      	str	r3, [r7, #32]
   return(result);
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007216:	663b      	str	r3, [r7, #96]	@ 0x60
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007220:	633b      	str	r3, [r7, #48]	@ 0x30
 8007222:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800722e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e6      	bne.n	8007202 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007238:	2b01      	cmp	r3, #1
 800723a:	d12e      	bne.n	800729a <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0310 	bic.w	r3, r3, #16
 8007256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007260:	61fb      	str	r3, [r7, #28]
 8007262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	69b9      	ldr	r1, [r7, #24]
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	617b      	str	r3, [r7, #20]
   return(result);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d103      	bne.n	800728a <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2210      	movs	r2, #16
 8007288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff f992 	bl	80065bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007298:	e00b      	b.n	80072b2 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fa fcd0 	bl	8001c40 <HAL_UART_RxCpltCallback>
}
 80072a0:	e007      	b.n	80072b2 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0208 	orr.w	r2, r2, #8
 80072b0:	619a      	str	r2, [r3, #24]
}
 80072b2:	bf00      	nop
 80072b4:	3770      	adds	r7, #112	@ 0x70
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b09c      	sub	sp, #112	@ 0x70
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072c8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d2:	2b22      	cmp	r3, #34	@ 0x22
 80072d4:	f040 80b9 	bne.w	800744a <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80072e8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80072ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072f0:	4013      	ands	r3, r2
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 809c 	bne.w	800745a <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007336:	667b      	str	r3, [r7, #100]	@ 0x64
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007340:	657b      	str	r3, [r7, #84]	@ 0x54
 8007342:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007346:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800734e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	663b      	str	r3, [r7, #96]	@ 0x60
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007374:	643a      	str	r2, [r7, #64]	@ 0x40
 8007376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800737a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d12e      	bne.n	8007442 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f023 0310 	bic.w	r3, r3, #16
 80073fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6979      	ldr	r1, [r7, #20]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	613b      	str	r3, [r7, #16]
   return(result);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b10      	cmp	r3, #16
 8007428:	d103      	bne.n	8007432 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2210      	movs	r2, #16
 8007430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff f8be 	bl	80065bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007440:	e00b      	b.n	800745a <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa fbfc 	bl	8001c40 <HAL_UART_RxCpltCallback>
}
 8007448:	e007      	b.n	800745a <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0208 	orr.w	r2, r2, #8
 8007458:	619a      	str	r2, [r3, #24]
}
 800745a:	bf00      	nop
 800745c:	3770      	adds	r7, #112	@ 0x70
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800747e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007482:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	b29b      	uxth	r3, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	4013      	ands	r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <srand>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4b10      	ldr	r3, [pc, #64]	@ (800752c <srand+0x44>)
 80074ec:	681d      	ldr	r5, [r3, #0]
 80074ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80074f0:	4604      	mov	r4, r0
 80074f2:	b9b3      	cbnz	r3, 8007522 <srand+0x3a>
 80074f4:	2018      	movs	r0, #24
 80074f6:	f001 fcf9 	bl	8008eec <malloc>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6328      	str	r0, [r5, #48]	@ 0x30
 80074fe:	b920      	cbnz	r0, 800750a <srand+0x22>
 8007500:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <srand+0x48>)
 8007502:	480c      	ldr	r0, [pc, #48]	@ (8007534 <srand+0x4c>)
 8007504:	2146      	movs	r1, #70	@ 0x46
 8007506:	f000 fe2f 	bl	8008168 <__assert_func>
 800750a:	490b      	ldr	r1, [pc, #44]	@ (8007538 <srand+0x50>)
 800750c:	4b0b      	ldr	r3, [pc, #44]	@ (800753c <srand+0x54>)
 800750e:	e9c0 1300 	strd	r1, r3, [r0]
 8007512:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <srand+0x58>)
 8007514:	6083      	str	r3, [r0, #8]
 8007516:	230b      	movs	r3, #11
 8007518:	8183      	strh	r3, [r0, #12]
 800751a:	2100      	movs	r1, #0
 800751c:	2001      	movs	r0, #1
 800751e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007522:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007524:	2200      	movs	r2, #0
 8007526:	611c      	str	r4, [r3, #16]
 8007528:	615a      	str	r2, [r3, #20]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000094 	.word	0x20000094
 8007530:	0800a26c 	.word	0x0800a26c
 8007534:	0800a283 	.word	0x0800a283
 8007538:	abcd330e 	.word	0xabcd330e
 800753c:	e66d1234 	.word	0xe66d1234
 8007540:	0005deec 	.word	0x0005deec

08007544 <__cvt>:
 8007544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	ec57 6b10 	vmov	r6, r7, d0
 800754c:	2f00      	cmp	r7, #0
 800754e:	460c      	mov	r4, r1
 8007550:	4619      	mov	r1, r3
 8007552:	463b      	mov	r3, r7
 8007554:	bfbb      	ittet	lt
 8007556:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800755a:	461f      	movlt	r7, r3
 800755c:	2300      	movge	r3, #0
 800755e:	232d      	movlt	r3, #45	@ 0x2d
 8007560:	700b      	strb	r3, [r1, #0]
 8007562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007564:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007568:	4691      	mov	r9, r2
 800756a:	f023 0820 	bic.w	r8, r3, #32
 800756e:	bfbc      	itt	lt
 8007570:	4632      	movlt	r2, r6
 8007572:	4616      	movlt	r6, r2
 8007574:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007578:	d005      	beq.n	8007586 <__cvt+0x42>
 800757a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800757e:	d100      	bne.n	8007582 <__cvt+0x3e>
 8007580:	3401      	adds	r4, #1
 8007582:	2102      	movs	r1, #2
 8007584:	e000      	b.n	8007588 <__cvt+0x44>
 8007586:	2103      	movs	r1, #3
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	ab02      	add	r3, sp, #8
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	ec47 6b10 	vmov	d0, r6, r7
 8007594:	4653      	mov	r3, sl
 8007596:	4622      	mov	r2, r4
 8007598:	f000 fe8e 	bl	80082b8 <_dtoa_r>
 800759c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075a0:	4605      	mov	r5, r0
 80075a2:	d119      	bne.n	80075d8 <__cvt+0x94>
 80075a4:	f019 0f01 	tst.w	r9, #1
 80075a8:	d00e      	beq.n	80075c8 <__cvt+0x84>
 80075aa:	eb00 0904 	add.w	r9, r0, r4
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f9 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ba:	b108      	cbz	r0, 80075c0 <__cvt+0x7c>
 80075bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80075c0:	2230      	movs	r2, #48	@ 0x30
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	454b      	cmp	r3, r9
 80075c6:	d31e      	bcc.n	8007606 <__cvt+0xc2>
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075cc:	1b5b      	subs	r3, r3, r5
 80075ce:	4628      	mov	r0, r5
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	b004      	add	sp, #16
 80075d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075dc:	eb00 0904 	add.w	r9, r0, r4
 80075e0:	d1e5      	bne.n	80075ae <__cvt+0x6a>
 80075e2:	7803      	ldrb	r3, [r0, #0]
 80075e4:	2b30      	cmp	r3, #48	@ 0x30
 80075e6:	d10a      	bne.n	80075fe <__cvt+0xba>
 80075e8:	2200      	movs	r2, #0
 80075ea:	2300      	movs	r3, #0
 80075ec:	4630      	mov	r0, r6
 80075ee:	4639      	mov	r1, r7
 80075f0:	f7f9 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80075f4:	b918      	cbnz	r0, 80075fe <__cvt+0xba>
 80075f6:	f1c4 0401 	rsb	r4, r4, #1
 80075fa:	f8ca 4000 	str.w	r4, [sl]
 80075fe:	f8da 3000 	ldr.w	r3, [sl]
 8007602:	4499      	add	r9, r3
 8007604:	e7d3      	b.n	80075ae <__cvt+0x6a>
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	9103      	str	r1, [sp, #12]
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e7d9      	b.n	80075c2 <__cvt+0x7e>

0800760e <__exponent>:
 800760e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007610:	2900      	cmp	r1, #0
 8007612:	bfba      	itte	lt
 8007614:	4249      	neglt	r1, r1
 8007616:	232d      	movlt	r3, #45	@ 0x2d
 8007618:	232b      	movge	r3, #43	@ 0x2b
 800761a:	2909      	cmp	r1, #9
 800761c:	7002      	strb	r2, [r0, #0]
 800761e:	7043      	strb	r3, [r0, #1]
 8007620:	dd29      	ble.n	8007676 <__exponent+0x68>
 8007622:	f10d 0307 	add.w	r3, sp, #7
 8007626:	461d      	mov	r5, r3
 8007628:	270a      	movs	r7, #10
 800762a:	461a      	mov	r2, r3
 800762c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007630:	fb07 1416 	mls	r4, r7, r6, r1
 8007634:	3430      	adds	r4, #48	@ 0x30
 8007636:	f802 4c01 	strb.w	r4, [r2, #-1]
 800763a:	460c      	mov	r4, r1
 800763c:	2c63      	cmp	r4, #99	@ 0x63
 800763e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007642:	4631      	mov	r1, r6
 8007644:	dcf1      	bgt.n	800762a <__exponent+0x1c>
 8007646:	3130      	adds	r1, #48	@ 0x30
 8007648:	1e94      	subs	r4, r2, #2
 800764a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800764e:	1c41      	adds	r1, r0, #1
 8007650:	4623      	mov	r3, r4
 8007652:	42ab      	cmp	r3, r5
 8007654:	d30a      	bcc.n	800766c <__exponent+0x5e>
 8007656:	f10d 0309 	add.w	r3, sp, #9
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	42ac      	cmp	r4, r5
 800765e:	bf88      	it	hi
 8007660:	2300      	movhi	r3, #0
 8007662:	3302      	adds	r3, #2
 8007664:	4403      	add	r3, r0
 8007666:	1a18      	subs	r0, r3, r0
 8007668:	b003      	add	sp, #12
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007670:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007674:	e7ed      	b.n	8007652 <__exponent+0x44>
 8007676:	2330      	movs	r3, #48	@ 0x30
 8007678:	3130      	adds	r1, #48	@ 0x30
 800767a:	7083      	strb	r3, [r0, #2]
 800767c:	70c1      	strb	r1, [r0, #3]
 800767e:	1d03      	adds	r3, r0, #4
 8007680:	e7f1      	b.n	8007666 <__exponent+0x58>
	...

08007684 <_printf_float>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	b08d      	sub	sp, #52	@ 0x34
 800768a:	460c      	mov	r4, r1
 800768c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007690:	4616      	mov	r6, r2
 8007692:	461f      	mov	r7, r3
 8007694:	4605      	mov	r5, r0
 8007696:	f000 fcef 	bl	8008078 <_localeconv_r>
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7f8 fde6 	bl	8000270 <strlen>
 80076a4:	2300      	movs	r3, #0
 80076a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076a8:	f8d8 3000 	ldr.w	r3, [r8]
 80076ac:	9005      	str	r0, [sp, #20]
 80076ae:	3307      	adds	r3, #7
 80076b0:	f023 0307 	bic.w	r3, r3, #7
 80076b4:	f103 0208 	add.w	r2, r3, #8
 80076b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076bc:	f8d4 b000 	ldr.w	fp, [r4]
 80076c0:	f8c8 2000 	str.w	r2, [r8]
 80076c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80076d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076da:	4b9c      	ldr	r3, [pc, #624]	@ (800794c <_printf_float+0x2c8>)
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	f7f9 fa24 	bl	8000b2c <__aeabi_dcmpun>
 80076e4:	bb70      	cbnz	r0, 8007744 <_printf_float+0xc0>
 80076e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ea:	4b98      	ldr	r3, [pc, #608]	@ (800794c <_printf_float+0x2c8>)
 80076ec:	f04f 32ff 	mov.w	r2, #4294967295
 80076f0:	f7f9 f9fe 	bl	8000af0 <__aeabi_dcmple>
 80076f4:	bb30      	cbnz	r0, 8007744 <_printf_float+0xc0>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f9 f9ed 	bl	8000adc <__aeabi_dcmplt>
 8007702:	b110      	cbz	r0, 800770a <_printf_float+0x86>
 8007704:	232d      	movs	r3, #45	@ 0x2d
 8007706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800770a:	4a91      	ldr	r2, [pc, #580]	@ (8007950 <_printf_float+0x2cc>)
 800770c:	4b91      	ldr	r3, [pc, #580]	@ (8007954 <_printf_float+0x2d0>)
 800770e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007712:	bf8c      	ite	hi
 8007714:	4690      	movhi	r8, r2
 8007716:	4698      	movls	r8, r3
 8007718:	2303      	movs	r3, #3
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	f02b 0304 	bic.w	r3, fp, #4
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	f04f 0900 	mov.w	r9, #0
 8007726:	9700      	str	r7, [sp, #0]
 8007728:	4633      	mov	r3, r6
 800772a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f9d2 	bl	8007ad8 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	f040 808d 	bne.w	8007854 <_printf_float+0x1d0>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	b00d      	add	sp, #52	@ 0x34
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	4642      	mov	r2, r8
 8007746:	464b      	mov	r3, r9
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	f7f9 f9ee 	bl	8000b2c <__aeabi_dcmpun>
 8007750:	b140      	cbz	r0, 8007764 <_printf_float+0xe0>
 8007752:	464b      	mov	r3, r9
 8007754:	2b00      	cmp	r3, #0
 8007756:	bfbc      	itt	lt
 8007758:	232d      	movlt	r3, #45	@ 0x2d
 800775a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800775e:	4a7e      	ldr	r2, [pc, #504]	@ (8007958 <_printf_float+0x2d4>)
 8007760:	4b7e      	ldr	r3, [pc, #504]	@ (800795c <_printf_float+0x2d8>)
 8007762:	e7d4      	b.n	800770e <_printf_float+0x8a>
 8007764:	6863      	ldr	r3, [r4, #4]
 8007766:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800776a:	9206      	str	r2, [sp, #24]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	d13b      	bne.n	80077e8 <_printf_float+0x164>
 8007770:	2306      	movs	r3, #6
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007778:	2300      	movs	r3, #0
 800777a:	6022      	str	r2, [r4, #0]
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007780:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007784:	ab09      	add	r3, sp, #36	@ 0x24
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	6861      	ldr	r1, [r4, #4]
 800778a:	ec49 8b10 	vmov	d0, r8, r9
 800778e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007792:	4628      	mov	r0, r5
 8007794:	f7ff fed6 	bl	8007544 <__cvt>
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800779c:	2b47      	cmp	r3, #71	@ 0x47
 800779e:	4680      	mov	r8, r0
 80077a0:	d129      	bne.n	80077f6 <_printf_float+0x172>
 80077a2:	1cc8      	adds	r0, r1, #3
 80077a4:	db02      	blt.n	80077ac <_printf_float+0x128>
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	4299      	cmp	r1, r3
 80077aa:	dd41      	ble.n	8007830 <_printf_float+0x1ac>
 80077ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80077b0:	fa5f fa8a 	uxtb.w	sl, sl
 80077b4:	3901      	subs	r1, #1
 80077b6:	4652      	mov	r2, sl
 80077b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80077be:	f7ff ff26 	bl	800760e <__exponent>
 80077c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077c4:	1813      	adds	r3, r2, r0
 80077c6:	2a01      	cmp	r2, #1
 80077c8:	4681      	mov	r9, r0
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	dc02      	bgt.n	80077d4 <_printf_float+0x150>
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	07d2      	lsls	r2, r2, #31
 80077d2:	d501      	bpl.n	80077d8 <_printf_float+0x154>
 80077d4:	3301      	adds	r3, #1
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0a2      	beq.n	8007726 <_printf_float+0xa2>
 80077e0:	232d      	movs	r3, #45	@ 0x2d
 80077e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077e6:	e79e      	b.n	8007726 <_printf_float+0xa2>
 80077e8:	9a06      	ldr	r2, [sp, #24]
 80077ea:	2a47      	cmp	r2, #71	@ 0x47
 80077ec:	d1c2      	bne.n	8007774 <_printf_float+0xf0>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1c0      	bne.n	8007774 <_printf_float+0xf0>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e7bd      	b.n	8007772 <_printf_float+0xee>
 80077f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077fa:	d9db      	bls.n	80077b4 <_printf_float+0x130>
 80077fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007800:	d118      	bne.n	8007834 <_printf_float+0x1b0>
 8007802:	2900      	cmp	r1, #0
 8007804:	6863      	ldr	r3, [r4, #4]
 8007806:	dd0b      	ble.n	8007820 <_printf_float+0x19c>
 8007808:	6121      	str	r1, [r4, #16]
 800780a:	b913      	cbnz	r3, 8007812 <_printf_float+0x18e>
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	07d0      	lsls	r0, r2, #31
 8007810:	d502      	bpl.n	8007818 <_printf_float+0x194>
 8007812:	3301      	adds	r3, #1
 8007814:	440b      	add	r3, r1
 8007816:	6123      	str	r3, [r4, #16]
 8007818:	65a1      	str	r1, [r4, #88]	@ 0x58
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	e7db      	b.n	80077d8 <_printf_float+0x154>
 8007820:	b913      	cbnz	r3, 8007828 <_printf_float+0x1a4>
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	07d2      	lsls	r2, r2, #31
 8007826:	d501      	bpl.n	800782c <_printf_float+0x1a8>
 8007828:	3302      	adds	r3, #2
 800782a:	e7f4      	b.n	8007816 <_printf_float+0x192>
 800782c:	2301      	movs	r3, #1
 800782e:	e7f2      	b.n	8007816 <_printf_float+0x192>
 8007830:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007836:	4299      	cmp	r1, r3
 8007838:	db05      	blt.n	8007846 <_printf_float+0x1c2>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	6121      	str	r1, [r4, #16]
 800783e:	07d8      	lsls	r0, r3, #31
 8007840:	d5ea      	bpl.n	8007818 <_printf_float+0x194>
 8007842:	1c4b      	adds	r3, r1, #1
 8007844:	e7e7      	b.n	8007816 <_printf_float+0x192>
 8007846:	2900      	cmp	r1, #0
 8007848:	bfd4      	ite	le
 800784a:	f1c1 0202 	rsble	r2, r1, #2
 800784e:	2201      	movgt	r2, #1
 8007850:	4413      	add	r3, r2
 8007852:	e7e0      	b.n	8007816 <_printf_float+0x192>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	055a      	lsls	r2, r3, #21
 8007858:	d407      	bmi.n	800786a <_printf_float+0x1e6>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	4642      	mov	r2, r8
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	d12b      	bne.n	80078c0 <_printf_float+0x23c>
 8007868:	e767      	b.n	800773a <_printf_float+0xb6>
 800786a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800786e:	f240 80dd 	bls.w	8007a2c <_printf_float+0x3a8>
 8007872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007876:	2200      	movs	r2, #0
 8007878:	2300      	movs	r3, #0
 800787a:	f7f9 f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800787e:	2800      	cmp	r0, #0
 8007880:	d033      	beq.n	80078ea <_printf_float+0x266>
 8007882:	4a37      	ldr	r2, [pc, #220]	@ (8007960 <_printf_float+0x2dc>)
 8007884:	2301      	movs	r3, #1
 8007886:	4631      	mov	r1, r6
 8007888:	4628      	mov	r0, r5
 800788a:	47b8      	blx	r7
 800788c:	3001      	adds	r0, #1
 800788e:	f43f af54 	beq.w	800773a <_printf_float+0xb6>
 8007892:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007896:	4543      	cmp	r3, r8
 8007898:	db02      	blt.n	80078a0 <_printf_float+0x21c>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	07d8      	lsls	r0, r3, #31
 800789e:	d50f      	bpl.n	80078c0 <_printf_float+0x23c>
 80078a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af45 	beq.w	800773a <_printf_float+0xb6>
 80078b0:	f04f 0900 	mov.w	r9, #0
 80078b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80078b8:	f104 0a1a 	add.w	sl, r4, #26
 80078bc:	45c8      	cmp	r8, r9
 80078be:	dc09      	bgt.n	80078d4 <_printf_float+0x250>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	f100 8103 	bmi.w	8007ace <_printf_float+0x44a>
 80078c8:	68e0      	ldr	r0, [r4, #12]
 80078ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078cc:	4298      	cmp	r0, r3
 80078ce:	bfb8      	it	lt
 80078d0:	4618      	movlt	r0, r3
 80078d2:	e734      	b.n	800773e <_printf_float+0xba>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4652      	mov	r2, sl
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	47b8      	blx	r7
 80078de:	3001      	adds	r0, #1
 80078e0:	f43f af2b 	beq.w	800773a <_printf_float+0xb6>
 80078e4:	f109 0901 	add.w	r9, r9, #1
 80078e8:	e7e8      	b.n	80078bc <_printf_float+0x238>
 80078ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc39      	bgt.n	8007964 <_printf_float+0x2e0>
 80078f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007960 <_printf_float+0x2dc>)
 80078f2:	2301      	movs	r3, #1
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af1d 	beq.w	800773a <_printf_float+0xb6>
 8007900:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007904:	ea59 0303 	orrs.w	r3, r9, r3
 8007908:	d102      	bne.n	8007910 <_printf_float+0x28c>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	07d9      	lsls	r1, r3, #31
 800790e:	d5d7      	bpl.n	80078c0 <_printf_float+0x23c>
 8007910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f af0d 	beq.w	800773a <_printf_float+0xb6>
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	f104 0b1a 	add.w	fp, r4, #26
 8007928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792a:	425b      	negs	r3, r3
 800792c:	4553      	cmp	r3, sl
 800792e:	dc01      	bgt.n	8007934 <_printf_float+0x2b0>
 8007930:	464b      	mov	r3, r9
 8007932:	e793      	b.n	800785c <_printf_float+0x1d8>
 8007934:	2301      	movs	r3, #1
 8007936:	465a      	mov	r2, fp
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f aefb 	beq.w	800773a <_printf_float+0xb6>
 8007944:	f10a 0a01 	add.w	sl, sl, #1
 8007948:	e7ee      	b.n	8007928 <_printf_float+0x2a4>
 800794a:	bf00      	nop
 800794c:	7fefffff 	.word	0x7fefffff
 8007950:	0800a2df 	.word	0x0800a2df
 8007954:	0800a2db 	.word	0x0800a2db
 8007958:	0800a2e7 	.word	0x0800a2e7
 800795c:	0800a2e3 	.word	0x0800a2e3
 8007960:	0800a2eb 	.word	0x0800a2eb
 8007964:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007966:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800796a:	4553      	cmp	r3, sl
 800796c:	bfa8      	it	ge
 800796e:	4653      	movge	r3, sl
 8007970:	2b00      	cmp	r3, #0
 8007972:	4699      	mov	r9, r3
 8007974:	dc36      	bgt.n	80079e4 <_printf_float+0x360>
 8007976:	f04f 0b00 	mov.w	fp, #0
 800797a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800797e:	f104 021a 	add.w	r2, r4, #26
 8007982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007984:	9306      	str	r3, [sp, #24]
 8007986:	eba3 0309 	sub.w	r3, r3, r9
 800798a:	455b      	cmp	r3, fp
 800798c:	dc31      	bgt.n	80079f2 <_printf_float+0x36e>
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	459a      	cmp	sl, r3
 8007992:	dc3a      	bgt.n	8007a0a <_printf_float+0x386>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	07da      	lsls	r2, r3, #31
 8007998:	d437      	bmi.n	8007a0a <_printf_float+0x386>
 800799a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799c:	ebaa 0903 	sub.w	r9, sl, r3
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	ebaa 0303 	sub.w	r3, sl, r3
 80079a6:	4599      	cmp	r9, r3
 80079a8:	bfa8      	it	ge
 80079aa:	4699      	movge	r9, r3
 80079ac:	f1b9 0f00 	cmp.w	r9, #0
 80079b0:	dc33      	bgt.n	8007a1a <_printf_float+0x396>
 80079b2:	f04f 0800 	mov.w	r8, #0
 80079b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ba:	f104 0b1a 	add.w	fp, r4, #26
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	ebaa 0303 	sub.w	r3, sl, r3
 80079c4:	eba3 0309 	sub.w	r3, r3, r9
 80079c8:	4543      	cmp	r3, r8
 80079ca:	f77f af79 	ble.w	80078c0 <_printf_float+0x23c>
 80079ce:	2301      	movs	r3, #1
 80079d0:	465a      	mov	r2, fp
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f aeae 	beq.w	800773a <_printf_float+0xb6>
 80079de:	f108 0801 	add.w	r8, r8, #1
 80079e2:	e7ec      	b.n	80079be <_printf_float+0x33a>
 80079e4:	4642      	mov	r2, r8
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	47b8      	blx	r7
 80079ec:	3001      	adds	r0, #1
 80079ee:	d1c2      	bne.n	8007976 <_printf_float+0x2f2>
 80079f0:	e6a3      	b.n	800773a <_printf_float+0xb6>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	9206      	str	r2, [sp, #24]
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f ae9c 	beq.w	800773a <_printf_float+0xb6>
 8007a02:	9a06      	ldr	r2, [sp, #24]
 8007a04:	f10b 0b01 	add.w	fp, fp, #1
 8007a08:	e7bb      	b.n	8007982 <_printf_float+0x2fe>
 8007a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	d1c0      	bne.n	800799a <_printf_float+0x316>
 8007a18:	e68f      	b.n	800773a <_printf_float+0xb6>
 8007a1a:	9a06      	ldr	r2, [sp, #24]
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	4442      	add	r2, r8
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	d1c3      	bne.n	80079b2 <_printf_float+0x32e>
 8007a2a:	e686      	b.n	800773a <_printf_float+0xb6>
 8007a2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a30:	f1ba 0f01 	cmp.w	sl, #1
 8007a34:	dc01      	bgt.n	8007a3a <_printf_float+0x3b6>
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d536      	bpl.n	8007aa8 <_printf_float+0x424>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f ae78 	beq.w	800773a <_printf_float+0xb6>
 8007a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f ae70 	beq.w	800773a <_printf_float+0xb6>
 8007a5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a66:	f7f9 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a6a:	b9c0      	cbnz	r0, 8007a9e <_printf_float+0x41a>
 8007a6c:	4653      	mov	r3, sl
 8007a6e:	f108 0201 	add.w	r2, r8, #1
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d10c      	bne.n	8007a96 <_printf_float+0x412>
 8007a7c:	e65d      	b.n	800773a <_printf_float+0xb6>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	465a      	mov	r2, fp
 8007a82:	4631      	mov	r1, r6
 8007a84:	4628      	mov	r0, r5
 8007a86:	47b8      	blx	r7
 8007a88:	3001      	adds	r0, #1
 8007a8a:	f43f ae56 	beq.w	800773a <_printf_float+0xb6>
 8007a8e:	f108 0801 	add.w	r8, r8, #1
 8007a92:	45d0      	cmp	r8, sl
 8007a94:	dbf3      	blt.n	8007a7e <_printf_float+0x3fa>
 8007a96:	464b      	mov	r3, r9
 8007a98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a9c:	e6df      	b.n	800785e <_printf_float+0x1da>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	f104 0b1a 	add.w	fp, r4, #26
 8007aa6:	e7f4      	b.n	8007a92 <_printf_float+0x40e>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4642      	mov	r2, r8
 8007aac:	e7e1      	b.n	8007a72 <_printf_float+0x3ee>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	464a      	mov	r2, r9
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	47b8      	blx	r7
 8007ab8:	3001      	adds	r0, #1
 8007aba:	f43f ae3e 	beq.w	800773a <_printf_float+0xb6>
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	68e3      	ldr	r3, [r4, #12]
 8007ac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ac6:	1a5b      	subs	r3, r3, r1
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	dcf0      	bgt.n	8007aae <_printf_float+0x42a>
 8007acc:	e6fc      	b.n	80078c8 <_printf_float+0x244>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	f104 0919 	add.w	r9, r4, #25
 8007ad6:	e7f4      	b.n	8007ac2 <_printf_float+0x43e>

08007ad8 <_printf_common>:
 8007ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	4616      	mov	r6, r2
 8007ade:	4698      	mov	r8, r3
 8007ae0:	688a      	ldr	r2, [r1, #8]
 8007ae2:	690b      	ldr	r3, [r1, #16]
 8007ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	bfb8      	it	lt
 8007aec:	4613      	movlt	r3, r2
 8007aee:	6033      	str	r3, [r6, #0]
 8007af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007af4:	4607      	mov	r7, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	b10a      	cbz	r2, 8007afe <_printf_common+0x26>
 8007afa:	3301      	adds	r3, #1
 8007afc:	6033      	str	r3, [r6, #0]
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	0699      	lsls	r1, r3, #26
 8007b02:	bf42      	ittt	mi
 8007b04:	6833      	ldrmi	r3, [r6, #0]
 8007b06:	3302      	addmi	r3, #2
 8007b08:	6033      	strmi	r3, [r6, #0]
 8007b0a:	6825      	ldr	r5, [r4, #0]
 8007b0c:	f015 0506 	ands.w	r5, r5, #6
 8007b10:	d106      	bne.n	8007b20 <_printf_common+0x48>
 8007b12:	f104 0a19 	add.w	sl, r4, #25
 8007b16:	68e3      	ldr	r3, [r4, #12]
 8007b18:	6832      	ldr	r2, [r6, #0]
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	42ab      	cmp	r3, r5
 8007b1e:	dc26      	bgt.n	8007b6e <_printf_common+0x96>
 8007b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	3b00      	subs	r3, #0
 8007b28:	bf18      	it	ne
 8007b2a:	2301      	movne	r3, #1
 8007b2c:	0692      	lsls	r2, r2, #26
 8007b2e:	d42b      	bmi.n	8007b88 <_printf_common+0xb0>
 8007b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b34:	4641      	mov	r1, r8
 8007b36:	4638      	mov	r0, r7
 8007b38:	47c8      	blx	r9
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d01e      	beq.n	8007b7c <_printf_common+0xa4>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	6922      	ldr	r2, [r4, #16]
 8007b42:	f003 0306 	and.w	r3, r3, #6
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	bf02      	ittt	eq
 8007b4a:	68e5      	ldreq	r5, [r4, #12]
 8007b4c:	6833      	ldreq	r3, [r6, #0]
 8007b4e:	1aed      	subeq	r5, r5, r3
 8007b50:	68a3      	ldr	r3, [r4, #8]
 8007b52:	bf0c      	ite	eq
 8007b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b58:	2500      	movne	r5, #0
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	bfc4      	itt	gt
 8007b5e:	1a9b      	subgt	r3, r3, r2
 8007b60:	18ed      	addgt	r5, r5, r3
 8007b62:	2600      	movs	r6, #0
 8007b64:	341a      	adds	r4, #26
 8007b66:	42b5      	cmp	r5, r6
 8007b68:	d11a      	bne.n	8007ba0 <_printf_common+0xc8>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e008      	b.n	8007b80 <_printf_common+0xa8>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4652      	mov	r2, sl
 8007b72:	4641      	mov	r1, r8
 8007b74:	4638      	mov	r0, r7
 8007b76:	47c8      	blx	r9
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d103      	bne.n	8007b84 <_printf_common+0xac>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b84:	3501      	adds	r5, #1
 8007b86:	e7c6      	b.n	8007b16 <_printf_common+0x3e>
 8007b88:	18e1      	adds	r1, r4, r3
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	2030      	movs	r0, #48	@ 0x30
 8007b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b92:	4422      	add	r2, r4
 8007b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	e7c7      	b.n	8007b30 <_printf_common+0x58>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	47c8      	blx	r9
 8007baa:	3001      	adds	r0, #1
 8007bac:	d0e6      	beq.n	8007b7c <_printf_common+0xa4>
 8007bae:	3601      	adds	r6, #1
 8007bb0:	e7d9      	b.n	8007b66 <_printf_common+0x8e>
	...

08007bb4 <_printf_i>:
 8007bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	7e0f      	ldrb	r7, [r1, #24]
 8007bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bbc:	2f78      	cmp	r7, #120	@ 0x78
 8007bbe:	4691      	mov	r9, r2
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	469a      	mov	sl, r3
 8007bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bca:	d807      	bhi.n	8007bdc <_printf_i+0x28>
 8007bcc:	2f62      	cmp	r7, #98	@ 0x62
 8007bce:	d80a      	bhi.n	8007be6 <_printf_i+0x32>
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	f000 80d1 	beq.w	8007d78 <_printf_i+0x1c4>
 8007bd6:	2f58      	cmp	r7, #88	@ 0x58
 8007bd8:	f000 80b8 	beq.w	8007d4c <_printf_i+0x198>
 8007bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007be4:	e03a      	b.n	8007c5c <_printf_i+0xa8>
 8007be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bea:	2b15      	cmp	r3, #21
 8007bec:	d8f6      	bhi.n	8007bdc <_printf_i+0x28>
 8007bee:	a101      	add	r1, pc, #4	@ (adr r1, 8007bf4 <_printf_i+0x40>)
 8007bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c61 	.word	0x08007c61
 8007bfc:	08007bdd 	.word	0x08007bdd
 8007c00:	08007bdd 	.word	0x08007bdd
 8007c04:	08007bdd 	.word	0x08007bdd
 8007c08:	08007bdd 	.word	0x08007bdd
 8007c0c:	08007c61 	.word	0x08007c61
 8007c10:	08007bdd 	.word	0x08007bdd
 8007c14:	08007bdd 	.word	0x08007bdd
 8007c18:	08007bdd 	.word	0x08007bdd
 8007c1c:	08007bdd 	.word	0x08007bdd
 8007c20:	08007d5f 	.word	0x08007d5f
 8007c24:	08007c8b 	.word	0x08007c8b
 8007c28:	08007d19 	.word	0x08007d19
 8007c2c:	08007bdd 	.word	0x08007bdd
 8007c30:	08007bdd 	.word	0x08007bdd
 8007c34:	08007d81 	.word	0x08007d81
 8007c38:	08007bdd 	.word	0x08007bdd
 8007c3c:	08007c8b 	.word	0x08007c8b
 8007c40:	08007bdd 	.word	0x08007bdd
 8007c44:	08007bdd 	.word	0x08007bdd
 8007c48:	08007d21 	.word	0x08007d21
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6032      	str	r2, [r6, #0]
 8007c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e09c      	b.n	8007d9a <_printf_i+0x1e6>
 8007c60:	6833      	ldr	r3, [r6, #0]
 8007c62:	6820      	ldr	r0, [r4, #0]
 8007c64:	1d19      	adds	r1, r3, #4
 8007c66:	6031      	str	r1, [r6, #0]
 8007c68:	0606      	lsls	r6, r0, #24
 8007c6a:	d501      	bpl.n	8007c70 <_printf_i+0xbc>
 8007c6c:	681d      	ldr	r5, [r3, #0]
 8007c6e:	e003      	b.n	8007c78 <_printf_i+0xc4>
 8007c70:	0645      	lsls	r5, r0, #25
 8007c72:	d5fb      	bpl.n	8007c6c <_printf_i+0xb8>
 8007c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	da03      	bge.n	8007c84 <_printf_i+0xd0>
 8007c7c:	232d      	movs	r3, #45	@ 0x2d
 8007c7e:	426d      	negs	r5, r5
 8007c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c84:	4858      	ldr	r0, [pc, #352]	@ (8007de8 <_printf_i+0x234>)
 8007c86:	230a      	movs	r3, #10
 8007c88:	e011      	b.n	8007cae <_printf_i+0xfa>
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	0608      	lsls	r0, r1, #24
 8007c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c94:	d402      	bmi.n	8007c9c <_printf_i+0xe8>
 8007c96:	0649      	lsls	r1, r1, #25
 8007c98:	bf48      	it	mi
 8007c9a:	b2ad      	uxthmi	r5, r5
 8007c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c9e:	4852      	ldr	r0, [pc, #328]	@ (8007de8 <_printf_i+0x234>)
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	bf14      	ite	ne
 8007ca4:	230a      	movne	r3, #10
 8007ca6:	2308      	moveq	r3, #8
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cae:	6866      	ldr	r6, [r4, #4]
 8007cb0:	60a6      	str	r6, [r4, #8]
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	db05      	blt.n	8007cc2 <_printf_i+0x10e>
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	432e      	orrs	r6, r5
 8007cba:	f021 0104 	bic.w	r1, r1, #4
 8007cbe:	6021      	str	r1, [r4, #0]
 8007cc0:	d04b      	beq.n	8007d5a <_printf_i+0x1a6>
 8007cc2:	4616      	mov	r6, r2
 8007cc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cc8:	fb03 5711 	mls	r7, r3, r1, r5
 8007ccc:	5dc7      	ldrb	r7, [r0, r7]
 8007cce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cd2:	462f      	mov	r7, r5
 8007cd4:	42bb      	cmp	r3, r7
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	d9f4      	bls.n	8007cc4 <_printf_i+0x110>
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d10b      	bne.n	8007cf6 <_printf_i+0x142>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	07df      	lsls	r7, r3, #31
 8007ce2:	d508      	bpl.n	8007cf6 <_printf_i+0x142>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	6861      	ldr	r1, [r4, #4]
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	bfde      	ittt	le
 8007cec:	2330      	movle	r3, #48	@ 0x30
 8007cee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cf6:	1b92      	subs	r2, r2, r6
 8007cf8:	6122      	str	r2, [r4, #16]
 8007cfa:	f8cd a000 	str.w	sl, [sp]
 8007cfe:	464b      	mov	r3, r9
 8007d00:	aa03      	add	r2, sp, #12
 8007d02:	4621      	mov	r1, r4
 8007d04:	4640      	mov	r0, r8
 8007d06:	f7ff fee7 	bl	8007ad8 <_printf_common>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d14a      	bne.n	8007da4 <_printf_i+0x1f0>
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	b004      	add	sp, #16
 8007d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	f043 0320 	orr.w	r3, r3, #32
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	4832      	ldr	r0, [pc, #200]	@ (8007dec <_printf_i+0x238>)
 8007d22:	2778      	movs	r7, #120	@ 0x78
 8007d24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	6831      	ldr	r1, [r6, #0]
 8007d2c:	061f      	lsls	r7, r3, #24
 8007d2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d32:	d402      	bmi.n	8007d3a <_printf_i+0x186>
 8007d34:	065f      	lsls	r7, r3, #25
 8007d36:	bf48      	it	mi
 8007d38:	b2ad      	uxthmi	r5, r5
 8007d3a:	6031      	str	r1, [r6, #0]
 8007d3c:	07d9      	lsls	r1, r3, #31
 8007d3e:	bf44      	itt	mi
 8007d40:	f043 0320 	orrmi.w	r3, r3, #32
 8007d44:	6023      	strmi	r3, [r4, #0]
 8007d46:	b11d      	cbz	r5, 8007d50 <_printf_i+0x19c>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	e7ad      	b.n	8007ca8 <_printf_i+0xf4>
 8007d4c:	4826      	ldr	r0, [pc, #152]	@ (8007de8 <_printf_i+0x234>)
 8007d4e:	e7e9      	b.n	8007d24 <_printf_i+0x170>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	f023 0320 	bic.w	r3, r3, #32
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	e7f6      	b.n	8007d48 <_printf_i+0x194>
 8007d5a:	4616      	mov	r6, r2
 8007d5c:	e7bd      	b.n	8007cda <_printf_i+0x126>
 8007d5e:	6833      	ldr	r3, [r6, #0]
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	6961      	ldr	r1, [r4, #20]
 8007d64:	1d18      	adds	r0, r3, #4
 8007d66:	6030      	str	r0, [r6, #0]
 8007d68:	062e      	lsls	r6, r5, #24
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	d501      	bpl.n	8007d72 <_printf_i+0x1be>
 8007d6e:	6019      	str	r1, [r3, #0]
 8007d70:	e002      	b.n	8007d78 <_printf_i+0x1c4>
 8007d72:	0668      	lsls	r0, r5, #25
 8007d74:	d5fb      	bpl.n	8007d6e <_printf_i+0x1ba>
 8007d76:	8019      	strh	r1, [r3, #0]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	e7bc      	b.n	8007cfa <_printf_i+0x146>
 8007d80:	6833      	ldr	r3, [r6, #0]
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	6032      	str	r2, [r6, #0]
 8007d86:	681e      	ldr	r6, [r3, #0]
 8007d88:	6862      	ldr	r2, [r4, #4]
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7f8 fa1f 	bl	80001d0 <memchr>
 8007d92:	b108      	cbz	r0, 8007d98 <_printf_i+0x1e4>
 8007d94:	1b80      	subs	r0, r0, r6
 8007d96:	6060      	str	r0, [r4, #4]
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da2:	e7aa      	b.n	8007cfa <_printf_i+0x146>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	4632      	mov	r2, r6
 8007da8:	4649      	mov	r1, r9
 8007daa:	4640      	mov	r0, r8
 8007dac:	47d0      	blx	sl
 8007dae:	3001      	adds	r0, #1
 8007db0:	d0ad      	beq.n	8007d0e <_printf_i+0x15a>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	079b      	lsls	r3, r3, #30
 8007db6:	d413      	bmi.n	8007de0 <_printf_i+0x22c>
 8007db8:	68e0      	ldr	r0, [r4, #12]
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	bfb8      	it	lt
 8007dc0:	4618      	movlt	r0, r3
 8007dc2:	e7a6      	b.n	8007d12 <_printf_i+0x15e>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4640      	mov	r0, r8
 8007dcc:	47d0      	blx	sl
 8007dce:	3001      	adds	r0, #1
 8007dd0:	d09d      	beq.n	8007d0e <_printf_i+0x15a>
 8007dd2:	3501      	adds	r5, #1
 8007dd4:	68e3      	ldr	r3, [r4, #12]
 8007dd6:	9903      	ldr	r1, [sp, #12]
 8007dd8:	1a5b      	subs	r3, r3, r1
 8007dda:	42ab      	cmp	r3, r5
 8007ddc:	dcf2      	bgt.n	8007dc4 <_printf_i+0x210>
 8007dde:	e7eb      	b.n	8007db8 <_printf_i+0x204>
 8007de0:	2500      	movs	r5, #0
 8007de2:	f104 0619 	add.w	r6, r4, #25
 8007de6:	e7f5      	b.n	8007dd4 <_printf_i+0x220>
 8007de8:	0800a2ed 	.word	0x0800a2ed
 8007dec:	0800a2fe 	.word	0x0800a2fe

08007df0 <std>:
 8007df0:	2300      	movs	r3, #0
 8007df2:	b510      	push	{r4, lr}
 8007df4:	4604      	mov	r4, r0
 8007df6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dfe:	6083      	str	r3, [r0, #8]
 8007e00:	8181      	strh	r1, [r0, #12]
 8007e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e04:	81c2      	strh	r2, [r0, #14]
 8007e06:	6183      	str	r3, [r0, #24]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	305c      	adds	r0, #92	@ 0x5c
 8007e0e:	f000 f92a 	bl	8008066 <memset>
 8007e12:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <std+0x58>)
 8007e14:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e16:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <std+0x5c>)
 8007e18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <std+0x60>)
 8007e1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e54 <std+0x64>)
 8007e20:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <std+0x68>)
 8007e24:	6224      	str	r4, [r4, #32]
 8007e26:	429c      	cmp	r4, r3
 8007e28:	d006      	beq.n	8007e38 <std+0x48>
 8007e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e2e:	4294      	cmp	r4, r2
 8007e30:	d002      	beq.n	8007e38 <std+0x48>
 8007e32:	33d0      	adds	r3, #208	@ 0xd0
 8007e34:	429c      	cmp	r4, r3
 8007e36:	d105      	bne.n	8007e44 <std+0x54>
 8007e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e40:	f000 b98e 	b.w	8008160 <__retarget_lock_init_recursive>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	08007fe1 	.word	0x08007fe1
 8007e4c:	08008003 	.word	0x08008003
 8007e50:	0800803b 	.word	0x0800803b
 8007e54:	0800805f 	.word	0x0800805f
 8007e58:	200007c0 	.word	0x200007c0

08007e5c <stdio_exit_handler>:
 8007e5c:	4a02      	ldr	r2, [pc, #8]	@ (8007e68 <stdio_exit_handler+0xc>)
 8007e5e:	4903      	ldr	r1, [pc, #12]	@ (8007e6c <stdio_exit_handler+0x10>)
 8007e60:	4803      	ldr	r0, [pc, #12]	@ (8007e70 <stdio_exit_handler+0x14>)
 8007e62:	f000 b869 	b.w	8007f38 <_fwalk_sglue>
 8007e66:	bf00      	nop
 8007e68:	20000088 	.word	0x20000088
 8007e6c:	08009b05 	.word	0x08009b05
 8007e70:	20000098 	.word	0x20000098

08007e74 <cleanup_stdio>:
 8007e74:	6841      	ldr	r1, [r0, #4]
 8007e76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <cleanup_stdio+0x34>)
 8007e78:	4299      	cmp	r1, r3
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	d001      	beq.n	8007e84 <cleanup_stdio+0x10>
 8007e80:	f001 fe40 	bl	8009b04 <_fflush_r>
 8007e84:	68a1      	ldr	r1, [r4, #8]
 8007e86:	4b09      	ldr	r3, [pc, #36]	@ (8007eac <cleanup_stdio+0x38>)
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	d002      	beq.n	8007e92 <cleanup_stdio+0x1e>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f001 fe39 	bl	8009b04 <_fflush_r>
 8007e92:	68e1      	ldr	r1, [r4, #12]
 8007e94:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <cleanup_stdio+0x3c>)
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d004      	beq.n	8007ea4 <cleanup_stdio+0x30>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f001 be30 	b.w	8009b04 <_fflush_r>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200007c0 	.word	0x200007c0
 8007eac:	20000828 	.word	0x20000828
 8007eb0:	20000890 	.word	0x20000890

08007eb4 <global_stdio_init.part.0>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <global_stdio_init.part.0+0x30>)
 8007eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8007ee8 <global_stdio_init.part.0+0x34>)
 8007eba:	4a0c      	ldr	r2, [pc, #48]	@ (8007eec <global_stdio_init.part.0+0x38>)
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	f7ff ff94 	bl	8007df0 <std>
 8007ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2109      	movs	r1, #9
 8007ed0:	f7ff ff8e 	bl	8007df0 <std>
 8007ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ed8:	2202      	movs	r2, #2
 8007eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ede:	2112      	movs	r1, #18
 8007ee0:	f7ff bf86 	b.w	8007df0 <std>
 8007ee4:	200008f8 	.word	0x200008f8
 8007ee8:	200007c0 	.word	0x200007c0
 8007eec:	08007e5d 	.word	0x08007e5d

08007ef0 <__sfp_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	@ (8007ef8 <__sfp_lock_acquire+0x8>)
 8007ef2:	f000 b936 	b.w	8008162 <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20000901 	.word	0x20000901

08007efc <__sfp_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	@ (8007f04 <__sfp_lock_release+0x8>)
 8007efe:	f000 b931 	b.w	8008164 <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	20000901 	.word	0x20000901

08007f08 <__sinit>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7ff fff0 	bl	8007ef0 <__sfp_lock_acquire>
 8007f10:	6a23      	ldr	r3, [r4, #32]
 8007f12:	b11b      	cbz	r3, 8007f1c <__sinit+0x14>
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f7ff bff0 	b.w	8007efc <__sfp_lock_release>
 8007f1c:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <__sinit+0x28>)
 8007f1e:	6223      	str	r3, [r4, #32]
 8007f20:	4b04      	ldr	r3, [pc, #16]	@ (8007f34 <__sinit+0x2c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f5      	bne.n	8007f14 <__sinit+0xc>
 8007f28:	f7ff ffc4 	bl	8007eb4 <global_stdio_init.part.0>
 8007f2c:	e7f2      	b.n	8007f14 <__sinit+0xc>
 8007f2e:	bf00      	nop
 8007f30:	08007e75 	.word	0x08007e75
 8007f34:	200008f8 	.word	0x200008f8

08007f38 <_fwalk_sglue>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	4688      	mov	r8, r1
 8007f40:	4614      	mov	r4, r2
 8007f42:	2600      	movs	r6, #0
 8007f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f48:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4c:	d505      	bpl.n	8007f5a <_fwalk_sglue+0x22>
 8007f4e:	6824      	ldr	r4, [r4, #0]
 8007f50:	2c00      	cmp	r4, #0
 8007f52:	d1f7      	bne.n	8007f44 <_fwalk_sglue+0xc>
 8007f54:	4630      	mov	r0, r6
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d907      	bls.n	8007f70 <_fwalk_sglue+0x38>
 8007f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f64:	3301      	adds	r3, #1
 8007f66:	d003      	beq.n	8007f70 <_fwalk_sglue+0x38>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	47c0      	blx	r8
 8007f6e:	4306      	orrs	r6, r0
 8007f70:	3568      	adds	r5, #104	@ 0x68
 8007f72:	e7e9      	b.n	8007f48 <_fwalk_sglue+0x10>

08007f74 <sniprintf>:
 8007f74:	b40c      	push	{r2, r3}
 8007f76:	b530      	push	{r4, r5, lr}
 8007f78:	4b18      	ldr	r3, [pc, #96]	@ (8007fdc <sniprintf+0x68>)
 8007f7a:	1e0c      	subs	r4, r1, #0
 8007f7c:	681d      	ldr	r5, [r3, #0]
 8007f7e:	b09d      	sub	sp, #116	@ 0x74
 8007f80:	da08      	bge.n	8007f94 <sniprintf+0x20>
 8007f82:	238b      	movs	r3, #139	@ 0x8b
 8007f84:	602b      	str	r3, [r5, #0]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	b01d      	add	sp, #116	@ 0x74
 8007f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f90:	b002      	add	sp, #8
 8007f92:	4770      	bx	lr
 8007f94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007fa2:	bf14      	ite	ne
 8007fa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fa8:	4623      	moveq	r3, r4
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	9307      	str	r3, [sp, #28]
 8007fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fb2:	9002      	str	r0, [sp, #8]
 8007fb4:	9006      	str	r0, [sp, #24]
 8007fb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fbc:	ab21      	add	r3, sp, #132	@ 0x84
 8007fbe:	a902      	add	r1, sp, #8
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	f001 fc1e 	bl	8009804 <_svfiprintf_r>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	bfbc      	itt	lt
 8007fcc:	238b      	movlt	r3, #139	@ 0x8b
 8007fce:	602b      	strlt	r3, [r5, #0]
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d0da      	beq.n	8007f8a <sniprintf+0x16>
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	e7d6      	b.n	8007f8a <sniprintf+0x16>
 8007fdc:	20000094 	.word	0x20000094

08007fe0 <__sread>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	f000 f86c 	bl	80080c4 <_read_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	bfab      	itete	ge
 8007ff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff4:	181b      	addge	r3, r3, r0
 8007ff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ffa:	bfac      	ite	ge
 8007ffc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ffe:	81a3      	strhlt	r3, [r4, #12]
 8008000:	bd10      	pop	{r4, pc}

08008002 <__swrite>:
 8008002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	461f      	mov	r7, r3
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	05db      	lsls	r3, r3, #23
 800800c:	4605      	mov	r5, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4616      	mov	r6, r2
 8008012:	d505      	bpl.n	8008020 <__swrite+0x1e>
 8008014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008018:	2302      	movs	r3, #2
 800801a:	2200      	movs	r2, #0
 800801c:	f000 f840 	bl	80080a0 <_lseek_r>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	4632      	mov	r2, r6
 800802e:	463b      	mov	r3, r7
 8008030:	4628      	mov	r0, r5
 8008032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008036:	f000 b857 	b.w	80080e8 <_write_r>

0800803a <__sseek>:
 800803a:	b510      	push	{r4, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 f82d 	bl	80080a0 <_lseek_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	bf15      	itete	ne
 800804c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800804e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008056:	81a3      	strheq	r3, [r4, #12]
 8008058:	bf18      	it	ne
 800805a:	81a3      	strhne	r3, [r4, #12]
 800805c:	bd10      	pop	{r4, pc}

0800805e <__sclose>:
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 b80d 	b.w	8008080 <_close_r>

08008066 <memset>:
 8008066:	4402      	add	r2, r0
 8008068:	4603      	mov	r3, r0
 800806a:	4293      	cmp	r3, r2
 800806c:	d100      	bne.n	8008070 <memset+0xa>
 800806e:	4770      	bx	lr
 8008070:	f803 1b01 	strb.w	r1, [r3], #1
 8008074:	e7f9      	b.n	800806a <memset+0x4>
	...

08008078 <_localeconv_r>:
 8008078:	4800      	ldr	r0, [pc, #0]	@ (800807c <_localeconv_r+0x4>)
 800807a:	4770      	bx	lr
 800807c:	200001d4 	.word	0x200001d4

08008080 <_close_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	4d06      	ldr	r5, [pc, #24]	@ (800809c <_close_r+0x1c>)
 8008084:	2300      	movs	r3, #0
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	f7fa f98a 	bl	80023a4 <_close>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_close_r+0x1a>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_close_r+0x1a>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	200008fc 	.word	0x200008fc

080080a0 <_lseek_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	@ (80080c0 <_lseek_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7fa f99f 	bl	80023f2 <_lseek>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_lseek_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_lseek_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	200008fc 	.word	0x200008fc

080080c4 <_read_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	@ (80080e4 <_read_r+0x20>)
 80080c8:	4604      	mov	r4, r0
 80080ca:	4608      	mov	r0, r1
 80080cc:	4611      	mov	r1, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7fa f92d 	bl	8002332 <_read>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_read_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_read_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200008fc 	.word	0x200008fc

080080e8 <_write_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	@ (8008108 <_write_r+0x20>)
 80080ec:	4604      	mov	r4, r0
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7fa f938 	bl	800236c <_write>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_write_r+0x1e>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_write_r+0x1e>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	200008fc 	.word	0x200008fc

0800810c <__errno>:
 800810c:	4b01      	ldr	r3, [pc, #4]	@ (8008114 <__errno+0x8>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000094 	.word	0x20000094

08008118 <__libc_init_array>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	4d0d      	ldr	r5, [pc, #52]	@ (8008150 <__libc_init_array+0x38>)
 800811c:	4c0d      	ldr	r4, [pc, #52]	@ (8008154 <__libc_init_array+0x3c>)
 800811e:	1b64      	subs	r4, r4, r5
 8008120:	10a4      	asrs	r4, r4, #2
 8008122:	2600      	movs	r6, #0
 8008124:	42a6      	cmp	r6, r4
 8008126:	d109      	bne.n	800813c <__libc_init_array+0x24>
 8008128:	4d0b      	ldr	r5, [pc, #44]	@ (8008158 <__libc_init_array+0x40>)
 800812a:	4c0c      	ldr	r4, [pc, #48]	@ (800815c <__libc_init_array+0x44>)
 800812c:	f002 f86a 	bl	800a204 <_init>
 8008130:	1b64      	subs	r4, r4, r5
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	2600      	movs	r6, #0
 8008136:	42a6      	cmp	r6, r4
 8008138:	d105      	bne.n	8008146 <__libc_init_array+0x2e>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008140:	4798      	blx	r3
 8008142:	3601      	adds	r6, #1
 8008144:	e7ee      	b.n	8008124 <__libc_init_array+0xc>
 8008146:	f855 3b04 	ldr.w	r3, [r5], #4
 800814a:	4798      	blx	r3
 800814c:	3601      	adds	r6, #1
 800814e:	e7f2      	b.n	8008136 <__libc_init_array+0x1e>
 8008150:	0800a644 	.word	0x0800a644
 8008154:	0800a644 	.word	0x0800a644
 8008158:	0800a644 	.word	0x0800a644
 800815c:	0800a648 	.word	0x0800a648

08008160 <__retarget_lock_init_recursive>:
 8008160:	4770      	bx	lr

08008162 <__retarget_lock_acquire_recursive>:
 8008162:	4770      	bx	lr

08008164 <__retarget_lock_release_recursive>:
 8008164:	4770      	bx	lr
	...

08008168 <__assert_func>:
 8008168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800816a:	4614      	mov	r4, r2
 800816c:	461a      	mov	r2, r3
 800816e:	4b09      	ldr	r3, [pc, #36]	@ (8008194 <__assert_func+0x2c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4605      	mov	r5, r0
 8008174:	68d8      	ldr	r0, [r3, #12]
 8008176:	b14c      	cbz	r4, 800818c <__assert_func+0x24>
 8008178:	4b07      	ldr	r3, [pc, #28]	@ (8008198 <__assert_func+0x30>)
 800817a:	9100      	str	r1, [sp, #0]
 800817c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008180:	4906      	ldr	r1, [pc, #24]	@ (800819c <__assert_func+0x34>)
 8008182:	462b      	mov	r3, r5
 8008184:	f001 fce6 	bl	8009b54 <fiprintf>
 8008188:	f001 fd2e 	bl	8009be8 <abort>
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <__assert_func+0x38>)
 800818e:	461c      	mov	r4, r3
 8008190:	e7f3      	b.n	800817a <__assert_func+0x12>
 8008192:	bf00      	nop
 8008194:	20000094 	.word	0x20000094
 8008198:	0800a30f 	.word	0x0800a30f
 800819c:	0800a31c 	.word	0x0800a31c
 80081a0:	0800a34a 	.word	0x0800a34a

080081a4 <quorem>:
 80081a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	6903      	ldr	r3, [r0, #16]
 80081aa:	690c      	ldr	r4, [r1, #16]
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	4607      	mov	r7, r0
 80081b0:	db7e      	blt.n	80082b0 <quorem+0x10c>
 80081b2:	3c01      	subs	r4, #1
 80081b4:	f101 0814 	add.w	r8, r1, #20
 80081b8:	00a3      	lsls	r3, r4, #2
 80081ba:	f100 0514 	add.w	r5, r0, #20
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081ce:	3301      	adds	r3, #1
 80081d0:	429a      	cmp	r2, r3
 80081d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80081da:	d32e      	bcc.n	800823a <quorem+0x96>
 80081dc:	f04f 0a00 	mov.w	sl, #0
 80081e0:	46c4      	mov	ip, r8
 80081e2:	46ae      	mov	lr, r5
 80081e4:	46d3      	mov	fp, sl
 80081e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081ea:	b298      	uxth	r0, r3
 80081ec:	fb06 a000 	mla	r0, r6, r0, sl
 80081f0:	0c02      	lsrs	r2, r0, #16
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	fb06 2303 	mla	r3, r6, r3, r2
 80081f8:	f8de 2000 	ldr.w	r2, [lr]
 80081fc:	b280      	uxth	r0, r0
 80081fe:	b292      	uxth	r2, r2
 8008200:	1a12      	subs	r2, r2, r0
 8008202:	445a      	add	r2, fp
 8008204:	f8de 0000 	ldr.w	r0, [lr]
 8008208:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800820c:	b29b      	uxth	r3, r3
 800820e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008212:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008216:	b292      	uxth	r2, r2
 8008218:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800821c:	45e1      	cmp	r9, ip
 800821e:	f84e 2b04 	str.w	r2, [lr], #4
 8008222:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008226:	d2de      	bcs.n	80081e6 <quorem+0x42>
 8008228:	9b00      	ldr	r3, [sp, #0]
 800822a:	58eb      	ldr	r3, [r5, r3]
 800822c:	b92b      	cbnz	r3, 800823a <quorem+0x96>
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	3b04      	subs	r3, #4
 8008232:	429d      	cmp	r5, r3
 8008234:	461a      	mov	r2, r3
 8008236:	d32f      	bcc.n	8008298 <quorem+0xf4>
 8008238:	613c      	str	r4, [r7, #16]
 800823a:	4638      	mov	r0, r7
 800823c:	f001 f97e 	bl	800953c <__mcmp>
 8008240:	2800      	cmp	r0, #0
 8008242:	db25      	blt.n	8008290 <quorem+0xec>
 8008244:	4629      	mov	r1, r5
 8008246:	2000      	movs	r0, #0
 8008248:	f858 2b04 	ldr.w	r2, [r8], #4
 800824c:	f8d1 c000 	ldr.w	ip, [r1]
 8008250:	fa1f fe82 	uxth.w	lr, r2
 8008254:	fa1f f38c 	uxth.w	r3, ip
 8008258:	eba3 030e 	sub.w	r3, r3, lr
 800825c:	4403      	add	r3, r0
 800825e:	0c12      	lsrs	r2, r2, #16
 8008260:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008264:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008268:	b29b      	uxth	r3, r3
 800826a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800826e:	45c1      	cmp	r9, r8
 8008270:	f841 3b04 	str.w	r3, [r1], #4
 8008274:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008278:	d2e6      	bcs.n	8008248 <quorem+0xa4>
 800827a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800827e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008282:	b922      	cbnz	r2, 800828e <quorem+0xea>
 8008284:	3b04      	subs	r3, #4
 8008286:	429d      	cmp	r5, r3
 8008288:	461a      	mov	r2, r3
 800828a:	d30b      	bcc.n	80082a4 <quorem+0x100>
 800828c:	613c      	str	r4, [r7, #16]
 800828e:	3601      	adds	r6, #1
 8008290:	4630      	mov	r0, r6
 8008292:	b003      	add	sp, #12
 8008294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008298:	6812      	ldr	r2, [r2, #0]
 800829a:	3b04      	subs	r3, #4
 800829c:	2a00      	cmp	r2, #0
 800829e:	d1cb      	bne.n	8008238 <quorem+0x94>
 80082a0:	3c01      	subs	r4, #1
 80082a2:	e7c6      	b.n	8008232 <quorem+0x8e>
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	3b04      	subs	r3, #4
 80082a8:	2a00      	cmp	r2, #0
 80082aa:	d1ef      	bne.n	800828c <quorem+0xe8>
 80082ac:	3c01      	subs	r4, #1
 80082ae:	e7ea      	b.n	8008286 <quorem+0xe2>
 80082b0:	2000      	movs	r0, #0
 80082b2:	e7ee      	b.n	8008292 <quorem+0xee>
 80082b4:	0000      	movs	r0, r0
	...

080082b8 <_dtoa_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	69c7      	ldr	r7, [r0, #28]
 80082be:	b097      	sub	sp, #92	@ 0x5c
 80082c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80082c4:	ec55 4b10 	vmov	r4, r5, d0
 80082c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80082ca:	9107      	str	r1, [sp, #28]
 80082cc:	4681      	mov	r9, r0
 80082ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80082d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80082d2:	b97f      	cbnz	r7, 80082f4 <_dtoa_r+0x3c>
 80082d4:	2010      	movs	r0, #16
 80082d6:	f000 fe09 	bl	8008eec <malloc>
 80082da:	4602      	mov	r2, r0
 80082dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80082e0:	b920      	cbnz	r0, 80082ec <_dtoa_r+0x34>
 80082e2:	4ba9      	ldr	r3, [pc, #676]	@ (8008588 <_dtoa_r+0x2d0>)
 80082e4:	21ef      	movs	r1, #239	@ 0xef
 80082e6:	48a9      	ldr	r0, [pc, #676]	@ (800858c <_dtoa_r+0x2d4>)
 80082e8:	f7ff ff3e 	bl	8008168 <__assert_func>
 80082ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082f0:	6007      	str	r7, [r0, #0]
 80082f2:	60c7      	str	r7, [r0, #12]
 80082f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80082f8:	6819      	ldr	r1, [r3, #0]
 80082fa:	b159      	cbz	r1, 8008314 <_dtoa_r+0x5c>
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	604a      	str	r2, [r1, #4]
 8008300:	2301      	movs	r3, #1
 8008302:	4093      	lsls	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fee6 	bl	80090d8 <_Bfree>
 800830c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	1e2b      	subs	r3, r5, #0
 8008316:	bfb9      	ittee	lt
 8008318:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800831c:	9305      	strlt	r3, [sp, #20]
 800831e:	2300      	movge	r3, #0
 8008320:	6033      	strge	r3, [r6, #0]
 8008322:	9f05      	ldr	r7, [sp, #20]
 8008324:	4b9a      	ldr	r3, [pc, #616]	@ (8008590 <_dtoa_r+0x2d8>)
 8008326:	bfbc      	itt	lt
 8008328:	2201      	movlt	r2, #1
 800832a:	6032      	strlt	r2, [r6, #0]
 800832c:	43bb      	bics	r3, r7
 800832e:	d112      	bne.n	8008356 <_dtoa_r+0x9e>
 8008330:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008332:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800833c:	4323      	orrs	r3, r4
 800833e:	f000 855a 	beq.w	8008df6 <_dtoa_r+0xb3e>
 8008342:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008344:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80085a4 <_dtoa_r+0x2ec>
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 855c 	beq.w	8008e06 <_dtoa_r+0xb4e>
 800834e:	f10a 0303 	add.w	r3, sl, #3
 8008352:	f000 bd56 	b.w	8008e02 <_dtoa_r+0xb4a>
 8008356:	ed9d 7b04 	vldr	d7, [sp, #16]
 800835a:	2200      	movs	r2, #0
 800835c:	ec51 0b17 	vmov	r0, r1, d7
 8008360:	2300      	movs	r3, #0
 8008362:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008366:	f7f8 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800836a:	4680      	mov	r8, r0
 800836c:	b158      	cbz	r0, 8008386 <_dtoa_r+0xce>
 800836e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008370:	2301      	movs	r3, #1
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008376:	b113      	cbz	r3, 800837e <_dtoa_r+0xc6>
 8008378:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800837a:	4b86      	ldr	r3, [pc, #536]	@ (8008594 <_dtoa_r+0x2dc>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80085a8 <_dtoa_r+0x2f0>
 8008382:	f000 bd40 	b.w	8008e06 <_dtoa_r+0xb4e>
 8008386:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800838a:	aa14      	add	r2, sp, #80	@ 0x50
 800838c:	a915      	add	r1, sp, #84	@ 0x54
 800838e:	4648      	mov	r0, r9
 8008390:	f001 f984 	bl	800969c <__d2b>
 8008394:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008398:	9002      	str	r0, [sp, #8]
 800839a:	2e00      	cmp	r6, #0
 800839c:	d078      	beq.n	8008490 <_dtoa_r+0x1d8>
 800839e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80083a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80083b8:	4619      	mov	r1, r3
 80083ba:	2200      	movs	r2, #0
 80083bc:	4b76      	ldr	r3, [pc, #472]	@ (8008598 <_dtoa_r+0x2e0>)
 80083be:	f7f7 ff63 	bl	8000288 <__aeabi_dsub>
 80083c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008570 <_dtoa_r+0x2b8>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f8 f916 	bl	80005f8 <__aeabi_dmul>
 80083cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008578 <_dtoa_r+0x2c0>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff5b 	bl	800028c <__adddf3>
 80083d6:	4604      	mov	r4, r0
 80083d8:	4630      	mov	r0, r6
 80083da:	460d      	mov	r5, r1
 80083dc:	f7f8 f8a2 	bl	8000524 <__aeabi_i2d>
 80083e0:	a367      	add	r3, pc, #412	@ (adr r3, 8008580 <_dtoa_r+0x2c8>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f8 f907 	bl	80005f8 <__aeabi_dmul>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f7 ff4b 	bl	800028c <__adddf3>
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	f7f8 fbad 	bl	8000b58 <__aeabi_d2iz>
 80083fe:	2200      	movs	r2, #0
 8008400:	4607      	mov	r7, r0
 8008402:	2300      	movs	r3, #0
 8008404:	4620      	mov	r0, r4
 8008406:	4629      	mov	r1, r5
 8008408:	f7f8 fb68 	bl	8000adc <__aeabi_dcmplt>
 800840c:	b140      	cbz	r0, 8008420 <_dtoa_r+0x168>
 800840e:	4638      	mov	r0, r7
 8008410:	f7f8 f888 	bl	8000524 <__aeabi_i2d>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f8 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800841c:	b900      	cbnz	r0, 8008420 <_dtoa_r+0x168>
 800841e:	3f01      	subs	r7, #1
 8008420:	2f16      	cmp	r7, #22
 8008422:	d852      	bhi.n	80084ca <_dtoa_r+0x212>
 8008424:	4b5d      	ldr	r3, [pc, #372]	@ (800859c <_dtoa_r+0x2e4>)
 8008426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008432:	f7f8 fb53 	bl	8000adc <__aeabi_dcmplt>
 8008436:	2800      	cmp	r0, #0
 8008438:	d049      	beq.n	80084ce <_dtoa_r+0x216>
 800843a:	3f01      	subs	r7, #1
 800843c:	2300      	movs	r3, #0
 800843e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008440:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008442:	1b9b      	subs	r3, r3, r6
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	bf45      	ittet	mi
 8008448:	f1c3 0301 	rsbmi	r3, r3, #1
 800844c:	9300      	strmi	r3, [sp, #0]
 800844e:	2300      	movpl	r3, #0
 8008450:	2300      	movmi	r3, #0
 8008452:	9206      	str	r2, [sp, #24]
 8008454:	bf54      	ite	pl
 8008456:	9300      	strpl	r3, [sp, #0]
 8008458:	9306      	strmi	r3, [sp, #24]
 800845a:	2f00      	cmp	r7, #0
 800845c:	db39      	blt.n	80084d2 <_dtoa_r+0x21a>
 800845e:	9b06      	ldr	r3, [sp, #24]
 8008460:	970d      	str	r7, [sp, #52]	@ 0x34
 8008462:	443b      	add	r3, r7
 8008464:	9306      	str	r3, [sp, #24]
 8008466:	2300      	movs	r3, #0
 8008468:	9308      	str	r3, [sp, #32]
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b09      	cmp	r3, #9
 800846e:	d863      	bhi.n	8008538 <_dtoa_r+0x280>
 8008470:	2b05      	cmp	r3, #5
 8008472:	bfc4      	itt	gt
 8008474:	3b04      	subgt	r3, #4
 8008476:	9307      	strgt	r3, [sp, #28]
 8008478:	9b07      	ldr	r3, [sp, #28]
 800847a:	f1a3 0302 	sub.w	r3, r3, #2
 800847e:	bfcc      	ite	gt
 8008480:	2400      	movgt	r4, #0
 8008482:	2401      	movle	r4, #1
 8008484:	2b03      	cmp	r3, #3
 8008486:	d863      	bhi.n	8008550 <_dtoa_r+0x298>
 8008488:	e8df f003 	tbb	[pc, r3]
 800848c:	2b375452 	.word	0x2b375452
 8008490:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008494:	441e      	add	r6, r3
 8008496:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800849a:	2b20      	cmp	r3, #32
 800849c:	bfc1      	itttt	gt
 800849e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80084a2:	409f      	lslgt	r7, r3
 80084a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084ac:	bfd6      	itet	le
 80084ae:	f1c3 0320 	rsble	r3, r3, #32
 80084b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80084b6:	fa04 f003 	lslle.w	r0, r4, r3
 80084ba:	f7f8 f823 	bl	8000504 <__aeabi_ui2d>
 80084be:	2201      	movs	r2, #1
 80084c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80084c4:	3e01      	subs	r6, #1
 80084c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80084c8:	e776      	b.n	80083b8 <_dtoa_r+0x100>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7b7      	b.n	800843e <_dtoa_r+0x186>
 80084ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80084d0:	e7b6      	b.n	8008440 <_dtoa_r+0x188>
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	1bdb      	subs	r3, r3, r7
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	427b      	negs	r3, r7
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	930d      	str	r3, [sp, #52]	@ 0x34
 80084e0:	e7c3      	b.n	800846a <_dtoa_r+0x1b2>
 80084e2:	2301      	movs	r3, #1
 80084e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084e8:	eb07 0b03 	add.w	fp, r7, r3
 80084ec:	f10b 0301 	add.w	r3, fp, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	bfb8      	it	lt
 80084f6:	2301      	movlt	r3, #1
 80084f8:	e006      	b.n	8008508 <_dtoa_r+0x250>
 80084fa:	2301      	movs	r3, #1
 80084fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd28      	ble.n	8008556 <_dtoa_r+0x29e>
 8008504:	469b      	mov	fp, r3
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800850c:	2100      	movs	r1, #0
 800850e:	2204      	movs	r2, #4
 8008510:	f102 0514 	add.w	r5, r2, #20
 8008514:	429d      	cmp	r5, r3
 8008516:	d926      	bls.n	8008566 <_dtoa_r+0x2ae>
 8008518:	6041      	str	r1, [r0, #4]
 800851a:	4648      	mov	r0, r9
 800851c:	f000 fd9c 	bl	8009058 <_Balloc>
 8008520:	4682      	mov	sl, r0
 8008522:	2800      	cmp	r0, #0
 8008524:	d142      	bne.n	80085ac <_dtoa_r+0x2f4>
 8008526:	4b1e      	ldr	r3, [pc, #120]	@ (80085a0 <_dtoa_r+0x2e8>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 11af 	movw	r1, #431	@ 0x1af
 800852e:	e6da      	b.n	80082e6 <_dtoa_r+0x2e>
 8008530:	2300      	movs	r3, #0
 8008532:	e7e3      	b.n	80084fc <_dtoa_r+0x244>
 8008534:	2300      	movs	r3, #0
 8008536:	e7d5      	b.n	80084e4 <_dtoa_r+0x22c>
 8008538:	2401      	movs	r4, #1
 800853a:	2300      	movs	r3, #0
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008540:	f04f 3bff 	mov.w	fp, #4294967295
 8008544:	2200      	movs	r2, #0
 8008546:	f8cd b00c 	str.w	fp, [sp, #12]
 800854a:	2312      	movs	r3, #18
 800854c:	920c      	str	r2, [sp, #48]	@ 0x30
 800854e:	e7db      	b.n	8008508 <_dtoa_r+0x250>
 8008550:	2301      	movs	r3, #1
 8008552:	9309      	str	r3, [sp, #36]	@ 0x24
 8008554:	e7f4      	b.n	8008540 <_dtoa_r+0x288>
 8008556:	f04f 0b01 	mov.w	fp, #1
 800855a:	f8cd b00c 	str.w	fp, [sp, #12]
 800855e:	465b      	mov	r3, fp
 8008560:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008564:	e7d0      	b.n	8008508 <_dtoa_r+0x250>
 8008566:	3101      	adds	r1, #1
 8008568:	0052      	lsls	r2, r2, #1
 800856a:	e7d1      	b.n	8008510 <_dtoa_r+0x258>
 800856c:	f3af 8000 	nop.w
 8008570:	636f4361 	.word	0x636f4361
 8008574:	3fd287a7 	.word	0x3fd287a7
 8008578:	8b60c8b3 	.word	0x8b60c8b3
 800857c:	3fc68a28 	.word	0x3fc68a28
 8008580:	509f79fb 	.word	0x509f79fb
 8008584:	3fd34413 	.word	0x3fd34413
 8008588:	0800a26c 	.word	0x0800a26c
 800858c:	0800a358 	.word	0x0800a358
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	0800a2ec 	.word	0x0800a2ec
 8008598:	3ff80000 	.word	0x3ff80000
 800859c:	0800a470 	.word	0x0800a470
 80085a0:	0800a3b0 	.word	0x0800a3b0
 80085a4:	0800a354 	.word	0x0800a354
 80085a8:	0800a2eb 	.word	0x0800a2eb
 80085ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085b0:	6018      	str	r0, [r3, #0]
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	2b0e      	cmp	r3, #14
 80085b6:	f200 80a1 	bhi.w	80086fc <_dtoa_r+0x444>
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	f000 809e 	beq.w	80086fc <_dtoa_r+0x444>
 80085c0:	2f00      	cmp	r7, #0
 80085c2:	dd33      	ble.n	800862c <_dtoa_r+0x374>
 80085c4:	4b9c      	ldr	r3, [pc, #624]	@ (8008838 <_dtoa_r+0x580>)
 80085c6:	f007 020f 	and.w	r2, r7, #15
 80085ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ce:	ed93 7b00 	vldr	d7, [r3]
 80085d2:	05f8      	lsls	r0, r7, #23
 80085d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80085d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085dc:	d516      	bpl.n	800860c <_dtoa_r+0x354>
 80085de:	4b97      	ldr	r3, [pc, #604]	@ (800883c <_dtoa_r+0x584>)
 80085e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085e8:	f7f8 f930 	bl	800084c <__aeabi_ddiv>
 80085ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f0:	f004 040f 	and.w	r4, r4, #15
 80085f4:	2603      	movs	r6, #3
 80085f6:	4d91      	ldr	r5, [pc, #580]	@ (800883c <_dtoa_r+0x584>)
 80085f8:	b954      	cbnz	r4, 8008610 <_dtoa_r+0x358>
 80085fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008602:	f7f8 f923 	bl	800084c <__aeabi_ddiv>
 8008606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800860a:	e028      	b.n	800865e <_dtoa_r+0x3a6>
 800860c:	2602      	movs	r6, #2
 800860e:	e7f2      	b.n	80085f6 <_dtoa_r+0x33e>
 8008610:	07e1      	lsls	r1, r4, #31
 8008612:	d508      	bpl.n	8008626 <_dtoa_r+0x36e>
 8008614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800861c:	f7f7 ffec 	bl	80005f8 <__aeabi_dmul>
 8008620:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008624:	3601      	adds	r6, #1
 8008626:	1064      	asrs	r4, r4, #1
 8008628:	3508      	adds	r5, #8
 800862a:	e7e5      	b.n	80085f8 <_dtoa_r+0x340>
 800862c:	f000 80af 	beq.w	800878e <_dtoa_r+0x4d6>
 8008630:	427c      	negs	r4, r7
 8008632:	4b81      	ldr	r3, [pc, #516]	@ (8008838 <_dtoa_r+0x580>)
 8008634:	4d81      	ldr	r5, [pc, #516]	@ (800883c <_dtoa_r+0x584>)
 8008636:	f004 020f 	and.w	r2, r4, #15
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008646:	f7f7 ffd7 	bl	80005f8 <__aeabi_dmul>
 800864a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800864e:	1124      	asrs	r4, r4, #4
 8008650:	2300      	movs	r3, #0
 8008652:	2602      	movs	r6, #2
 8008654:	2c00      	cmp	r4, #0
 8008656:	f040 808f 	bne.w	8008778 <_dtoa_r+0x4c0>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d3      	bne.n	8008606 <_dtoa_r+0x34e>
 800865e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008660:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8094 	beq.w	8008792 <_dtoa_r+0x4da>
 800866a:	4b75      	ldr	r3, [pc, #468]	@ (8008840 <_dtoa_r+0x588>)
 800866c:	2200      	movs	r2, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 fa33 	bl	8000adc <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f000 808b 	beq.w	8008792 <_dtoa_r+0x4da>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 8087 	beq.w	8008792 <_dtoa_r+0x4da>
 8008684:	f1bb 0f00 	cmp.w	fp, #0
 8008688:	dd34      	ble.n	80086f4 <_dtoa_r+0x43c>
 800868a:	4620      	mov	r0, r4
 800868c:	4b6d      	ldr	r3, [pc, #436]	@ (8008844 <_dtoa_r+0x58c>)
 800868e:	2200      	movs	r2, #0
 8008690:	4629      	mov	r1, r5
 8008692:	f7f7 ffb1 	bl	80005f8 <__aeabi_dmul>
 8008696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800869a:	f107 38ff 	add.w	r8, r7, #4294967295
 800869e:	3601      	adds	r6, #1
 80086a0:	465c      	mov	r4, fp
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7f7 ff3e 	bl	8000524 <__aeabi_i2d>
 80086a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ac:	f7f7 ffa4 	bl	80005f8 <__aeabi_dmul>
 80086b0:	4b65      	ldr	r3, [pc, #404]	@ (8008848 <_dtoa_r+0x590>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f7f7 fdea 	bl	800028c <__adddf3>
 80086b8:	4605      	mov	r5, r0
 80086ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086be:	2c00      	cmp	r4, #0
 80086c0:	d16a      	bne.n	8008798 <_dtoa_r+0x4e0>
 80086c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c6:	4b61      	ldr	r3, [pc, #388]	@ (800884c <_dtoa_r+0x594>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7f7 fddd 	bl	8000288 <__aeabi_dsub>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086d6:	462a      	mov	r2, r5
 80086d8:	4633      	mov	r3, r6
 80086da:	f7f8 fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8298 	bne.w	8008c14 <_dtoa_r+0x95c>
 80086e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e8:	462a      	mov	r2, r5
 80086ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086ee:	f7f8 f9f5 	bl	8000adc <__aeabi_dcmplt>
 80086f2:	bb38      	cbnz	r0, 8008744 <_dtoa_r+0x48c>
 80086f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80086f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f2c0 8157 	blt.w	80089b2 <_dtoa_r+0x6fa>
 8008704:	2f0e      	cmp	r7, #14
 8008706:	f300 8154 	bgt.w	80089b2 <_dtoa_r+0x6fa>
 800870a:	4b4b      	ldr	r3, [pc, #300]	@ (8008838 <_dtoa_r+0x580>)
 800870c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008710:	ed93 7b00 	vldr	d7, [r3]
 8008714:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	ed8d 7b00 	vstr	d7, [sp]
 800871c:	f280 80e5 	bge.w	80088ea <_dtoa_r+0x632>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f300 80e1 	bgt.w	80088ea <_dtoa_r+0x632>
 8008728:	d10c      	bne.n	8008744 <_dtoa_r+0x48c>
 800872a:	4b48      	ldr	r3, [pc, #288]	@ (800884c <_dtoa_r+0x594>)
 800872c:	2200      	movs	r2, #0
 800872e:	ec51 0b17 	vmov	r0, r1, d7
 8008732:	f7f7 ff61 	bl	80005f8 <__aeabi_dmul>
 8008736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873a:	f7f8 f9e3 	bl	8000b04 <__aeabi_dcmpge>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 8266 	beq.w	8008c10 <_dtoa_r+0x958>
 8008744:	2400      	movs	r4, #0
 8008746:	4625      	mov	r5, r4
 8008748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800874a:	4656      	mov	r6, sl
 800874c:	ea6f 0803 	mvn.w	r8, r3
 8008750:	2700      	movs	r7, #0
 8008752:	4621      	mov	r1, r4
 8008754:	4648      	mov	r0, r9
 8008756:	f000 fcbf 	bl	80090d8 <_Bfree>
 800875a:	2d00      	cmp	r5, #0
 800875c:	f000 80bd 	beq.w	80088da <_dtoa_r+0x622>
 8008760:	b12f      	cbz	r7, 800876e <_dtoa_r+0x4b6>
 8008762:	42af      	cmp	r7, r5
 8008764:	d003      	beq.n	800876e <_dtoa_r+0x4b6>
 8008766:	4639      	mov	r1, r7
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fcb5 	bl	80090d8 <_Bfree>
 800876e:	4629      	mov	r1, r5
 8008770:	4648      	mov	r0, r9
 8008772:	f000 fcb1 	bl	80090d8 <_Bfree>
 8008776:	e0b0      	b.n	80088da <_dtoa_r+0x622>
 8008778:	07e2      	lsls	r2, r4, #31
 800877a:	d505      	bpl.n	8008788 <_dtoa_r+0x4d0>
 800877c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008780:	f7f7 ff3a 	bl	80005f8 <__aeabi_dmul>
 8008784:	3601      	adds	r6, #1
 8008786:	2301      	movs	r3, #1
 8008788:	1064      	asrs	r4, r4, #1
 800878a:	3508      	adds	r5, #8
 800878c:	e762      	b.n	8008654 <_dtoa_r+0x39c>
 800878e:	2602      	movs	r6, #2
 8008790:	e765      	b.n	800865e <_dtoa_r+0x3a6>
 8008792:	9c03      	ldr	r4, [sp, #12]
 8008794:	46b8      	mov	r8, r7
 8008796:	e784      	b.n	80086a2 <_dtoa_r+0x3ea>
 8008798:	4b27      	ldr	r3, [pc, #156]	@ (8008838 <_dtoa_r+0x580>)
 800879a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800879c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087a4:	4454      	add	r4, sl
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d054      	beq.n	8008854 <_dtoa_r+0x59c>
 80087aa:	4929      	ldr	r1, [pc, #164]	@ (8008850 <_dtoa_r+0x598>)
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7f8 f84d 	bl	800084c <__aeabi_ddiv>
 80087b2:	4633      	mov	r3, r6
 80087b4:	462a      	mov	r2, r5
 80087b6:	f7f7 fd67 	bl	8000288 <__aeabi_dsub>
 80087ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087be:	4656      	mov	r6, sl
 80087c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c4:	f7f8 f9c8 	bl	8000b58 <__aeabi_d2iz>
 80087c8:	4605      	mov	r5, r0
 80087ca:	f7f7 feab 	bl	8000524 <__aeabi_i2d>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	3530      	adds	r5, #48	@ 0x30
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087e4:	f806 5b01 	strb.w	r5, [r6], #1
 80087e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087ec:	f7f8 f976 	bl	8000adc <__aeabi_dcmplt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d172      	bne.n	80088da <_dtoa_r+0x622>
 80087f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f8:	4911      	ldr	r1, [pc, #68]	@ (8008840 <_dtoa_r+0x588>)
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7f7 fd44 	bl	8000288 <__aeabi_dsub>
 8008800:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008804:	f7f8 f96a 	bl	8000adc <__aeabi_dcmplt>
 8008808:	2800      	cmp	r0, #0
 800880a:	f040 80b4 	bne.w	8008976 <_dtoa_r+0x6be>
 800880e:	42a6      	cmp	r6, r4
 8008810:	f43f af70 	beq.w	80086f4 <_dtoa_r+0x43c>
 8008814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <_dtoa_r+0x58c>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <_dtoa_r+0x58c>)
 8008822:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008826:	2200      	movs	r2, #0
 8008828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882c:	f7f7 fee4 	bl	80005f8 <__aeabi_dmul>
 8008830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008834:	e7c4      	b.n	80087c0 <_dtoa_r+0x508>
 8008836:	bf00      	nop
 8008838:	0800a470 	.word	0x0800a470
 800883c:	0800a448 	.word	0x0800a448
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	40240000 	.word	0x40240000
 8008848:	401c0000 	.word	0x401c0000
 800884c:	40140000 	.word	0x40140000
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	f7f7 fece 	bl	80005f8 <__aeabi_dmul>
 800885c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008860:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008862:	4656      	mov	r6, sl
 8008864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008868:	f7f8 f976 	bl	8000b58 <__aeabi_d2iz>
 800886c:	4605      	mov	r5, r0
 800886e:	f7f7 fe59 	bl	8000524 <__aeabi_i2d>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800887a:	f7f7 fd05 	bl	8000288 <__aeabi_dsub>
 800887e:	3530      	adds	r5, #48	@ 0x30
 8008880:	f806 5b01 	strb.w	r5, [r6], #1
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	42a6      	cmp	r6, r4
 800888a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	d124      	bne.n	80088de <_dtoa_r+0x626>
 8008894:	4baf      	ldr	r3, [pc, #700]	@ (8008b54 <_dtoa_r+0x89c>)
 8008896:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800889a:	f7f7 fcf7 	bl	800028c <__adddf3>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a6:	f7f8 f937 	bl	8000b18 <__aeabi_dcmpgt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d163      	bne.n	8008976 <_dtoa_r+0x6be>
 80088ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088b2:	49a8      	ldr	r1, [pc, #672]	@ (8008b54 <_dtoa_r+0x89c>)
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7f7 fce7 	bl	8000288 <__aeabi_dsub>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c2:	f7f8 f90b 	bl	8000adc <__aeabi_dcmplt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f43f af14 	beq.w	80086f4 <_dtoa_r+0x43c>
 80088cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80088ce:	1e73      	subs	r3, r6, #1
 80088d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088d6:	2b30      	cmp	r3, #48	@ 0x30
 80088d8:	d0f8      	beq.n	80088cc <_dtoa_r+0x614>
 80088da:	4647      	mov	r7, r8
 80088dc:	e03b      	b.n	8008956 <_dtoa_r+0x69e>
 80088de:	4b9e      	ldr	r3, [pc, #632]	@ (8008b58 <_dtoa_r+0x8a0>)
 80088e0:	f7f7 fe8a 	bl	80005f8 <__aeabi_dmul>
 80088e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e8:	e7bc      	b.n	8008864 <_dtoa_r+0x5ac>
 80088ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088ee:	4656      	mov	r6, sl
 80088f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 ffa8 	bl	800084c <__aeabi_ddiv>
 80088fc:	f7f8 f92c 	bl	8000b58 <__aeabi_d2iz>
 8008900:	4680      	mov	r8, r0
 8008902:	f7f7 fe0f 	bl	8000524 <__aeabi_i2d>
 8008906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800890a:	f7f7 fe75 	bl	80005f8 <__aeabi_dmul>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800891a:	f7f7 fcb5 	bl	8000288 <__aeabi_dsub>
 800891e:	f806 4b01 	strb.w	r4, [r6], #1
 8008922:	9d03      	ldr	r5, [sp, #12]
 8008924:	eba6 040a 	sub.w	r4, r6, sl
 8008928:	42a5      	cmp	r5, r4
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	d133      	bne.n	8008998 <_dtoa_r+0x6e0>
 8008930:	f7f7 fcac 	bl	800028c <__adddf3>
 8008934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	f7f8 f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8008940:	b9c0      	cbnz	r0, 8008974 <_dtoa_r+0x6bc>
 8008942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f8 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800894e:	b110      	cbz	r0, 8008956 <_dtoa_r+0x69e>
 8008950:	f018 0f01 	tst.w	r8, #1
 8008954:	d10e      	bne.n	8008974 <_dtoa_r+0x6bc>
 8008956:	9902      	ldr	r1, [sp, #8]
 8008958:	4648      	mov	r0, r9
 800895a:	f000 fbbd 	bl	80090d8 <_Bfree>
 800895e:	2300      	movs	r3, #0
 8008960:	7033      	strb	r3, [r6, #0]
 8008962:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008964:	3701      	adds	r7, #1
 8008966:	601f      	str	r7, [r3, #0]
 8008968:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 824b 	beq.w	8008e06 <_dtoa_r+0xb4e>
 8008970:	601e      	str	r6, [r3, #0]
 8008972:	e248      	b.n	8008e06 <_dtoa_r+0xb4e>
 8008974:	46b8      	mov	r8, r7
 8008976:	4633      	mov	r3, r6
 8008978:	461e      	mov	r6, r3
 800897a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800897e:	2a39      	cmp	r2, #57	@ 0x39
 8008980:	d106      	bne.n	8008990 <_dtoa_r+0x6d8>
 8008982:	459a      	cmp	sl, r3
 8008984:	d1f8      	bne.n	8008978 <_dtoa_r+0x6c0>
 8008986:	2230      	movs	r2, #48	@ 0x30
 8008988:	f108 0801 	add.w	r8, r8, #1
 800898c:	f88a 2000 	strb.w	r2, [sl]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	3201      	adds	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e7a0      	b.n	80088da <_dtoa_r+0x622>
 8008998:	4b6f      	ldr	r3, [pc, #444]	@ (8008b58 <_dtoa_r+0x8a0>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	f7f8 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d09f      	beq.n	80088f0 <_dtoa_r+0x638>
 80089b0:	e7d1      	b.n	8008956 <_dtoa_r+0x69e>
 80089b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	f000 80ea 	beq.w	8008b8e <_dtoa_r+0x8d6>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	f300 80cd 	bgt.w	8008b5c <_dtoa_r+0x8a4>
 80089c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	f000 80c1 	beq.w	8008b4c <_dtoa_r+0x894>
 80089ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	9e00      	ldr	r6, [sp, #0]
 80089d2:	9a00      	ldr	r2, [sp, #0]
 80089d4:	441a      	add	r2, r3
 80089d6:	9200      	str	r2, [sp, #0]
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	2101      	movs	r1, #1
 80089dc:	441a      	add	r2, r3
 80089de:	4648      	mov	r0, r9
 80089e0:	9206      	str	r2, [sp, #24]
 80089e2:	f000 fc2d 	bl	8009240 <__i2b>
 80089e6:	4605      	mov	r5, r0
 80089e8:	b166      	cbz	r6, 8008a04 <_dtoa_r+0x74c>
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd09      	ble.n	8008a04 <_dtoa_r+0x74c>
 80089f0:	42b3      	cmp	r3, r6
 80089f2:	9a00      	ldr	r2, [sp, #0]
 80089f4:	bfa8      	it	ge
 80089f6:	4633      	movge	r3, r6
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	9200      	str	r2, [sp, #0]
 80089fc:	9a06      	ldr	r2, [sp, #24]
 80089fe:	1af6      	subs	r6, r6, r3
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	9306      	str	r3, [sp, #24]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	b30b      	cbz	r3, 8008a4c <_dtoa_r+0x794>
 8008a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80c6 	beq.w	8008b9c <_dtoa_r+0x8e4>
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	f000 80c0 	beq.w	8008b96 <_dtoa_r+0x8de>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f000 fcc8 	bl	80093b0 <__pow5mult>
 8008a20:	9a02      	ldr	r2, [sp, #8]
 8008a22:	4601      	mov	r1, r0
 8008a24:	4605      	mov	r5, r0
 8008a26:	4648      	mov	r0, r9
 8008a28:	f000 fc20 	bl	800926c <__multiply>
 8008a2c:	9902      	ldr	r1, [sp, #8]
 8008a2e:	4680      	mov	r8, r0
 8008a30:	4648      	mov	r0, r9
 8008a32:	f000 fb51 	bl	80090d8 <_Bfree>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	1b1b      	subs	r3, r3, r4
 8008a3a:	9308      	str	r3, [sp, #32]
 8008a3c:	f000 80b1 	beq.w	8008ba2 <_dtoa_r+0x8ea>
 8008a40:	9a08      	ldr	r2, [sp, #32]
 8008a42:	4641      	mov	r1, r8
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fcb3 	bl	80093b0 <__pow5mult>
 8008a4a:	9002      	str	r0, [sp, #8]
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 fbf6 	bl	8009240 <__i2b>
 8008a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a56:	4604      	mov	r4, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 81d8 	beq.w	8008e0e <_dtoa_r+0xb56>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4601      	mov	r1, r0
 8008a62:	4648      	mov	r0, r9
 8008a64:	f000 fca4 	bl	80093b0 <__pow5mult>
 8008a68:	9b07      	ldr	r3, [sp, #28]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	f300 809f 	bgt.w	8008bb0 <_dtoa_r+0x8f8>
 8008a72:	9b04      	ldr	r3, [sp, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 8097 	bne.w	8008ba8 <_dtoa_r+0x8f0>
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8093 	bne.w	8008bac <_dtoa_r+0x8f4>
 8008a86:	9b05      	ldr	r3, [sp, #20]
 8008a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	0d1b      	lsrs	r3, r3, #20
 8008a8e:	051b      	lsls	r3, r3, #20
 8008a90:	b133      	cbz	r3, 8008aa0 <_dtoa_r+0x7e8>
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9306      	str	r3, [sp, #24]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9308      	str	r3, [sp, #32]
 8008aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 81b8 	beq.w	8008e1a <_dtoa_r+0xb62>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ab0:	6918      	ldr	r0, [r3, #16]
 8008ab2:	f000 fb79 	bl	80091a8 <__hi0bits>
 8008ab6:	f1c0 0020 	rsb	r0, r0, #32
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	4418      	add	r0, r3
 8008abe:	f010 001f 	ands.w	r0, r0, #31
 8008ac2:	f000 8082 	beq.w	8008bca <_dtoa_r+0x912>
 8008ac6:	f1c0 0320 	rsb	r3, r0, #32
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	dd73      	ble.n	8008bb6 <_dtoa_r+0x8fe>
 8008ace:	9b00      	ldr	r3, [sp, #0]
 8008ad0:	f1c0 001c 	rsb	r0, r0, #28
 8008ad4:	4403      	add	r3, r0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	4403      	add	r3, r0
 8008adc:	4406      	add	r6, r0
 8008ade:	9306      	str	r3, [sp, #24]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x83a>
 8008ae6:	9902      	ldr	r1, [sp, #8]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4648      	mov	r0, r9
 8008aec:	f000 fcba 	bl	8009464 <__lshift>
 8008af0:	9002      	str	r0, [sp, #8]
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd05      	ble.n	8008b04 <_dtoa_r+0x84c>
 8008af8:	4621      	mov	r1, r4
 8008afa:	461a      	mov	r2, r3
 8008afc:	4648      	mov	r0, r9
 8008afe:	f000 fcb1 	bl	8009464 <__lshift>
 8008b02:	4604      	mov	r4, r0
 8008b04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d061      	beq.n	8008bce <_dtoa_r+0x916>
 8008b0a:	9802      	ldr	r0, [sp, #8]
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f000 fd15 	bl	800953c <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da5b      	bge.n	8008bce <_dtoa_r+0x916>
 8008b16:	2300      	movs	r3, #0
 8008b18:	9902      	ldr	r1, [sp, #8]
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fafd 	bl	800911c <__multadd>
 8008b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b24:	9002      	str	r0, [sp, #8]
 8008b26:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8177 	beq.w	8008e1e <_dtoa_r+0xb66>
 8008b30:	4629      	mov	r1, r5
 8008b32:	2300      	movs	r3, #0
 8008b34:	220a      	movs	r2, #10
 8008b36:	4648      	mov	r0, r9
 8008b38:	f000 faf0 	bl	800911c <__multadd>
 8008b3c:	f1bb 0f00 	cmp.w	fp, #0
 8008b40:	4605      	mov	r5, r0
 8008b42:	dc6f      	bgt.n	8008c24 <_dtoa_r+0x96c>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc49      	bgt.n	8008bde <_dtoa_r+0x926>
 8008b4a:	e06b      	b.n	8008c24 <_dtoa_r+0x96c>
 8008b4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b52:	e73c      	b.n	80089ce <_dtoa_r+0x716>
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	40240000 	.word	0x40240000
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1e5c      	subs	r4, r3, #1
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	db09      	blt.n	8008b7a <_dtoa_r+0x8c2>
 8008b66:	1b1c      	subs	r4, r3, r4
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f6bf af30 	bge.w	80089d0 <_dtoa_r+0x718>
 8008b70:	9b00      	ldr	r3, [sp, #0]
 8008b72:	9a03      	ldr	r2, [sp, #12]
 8008b74:	1a9e      	subs	r6, r3, r2
 8008b76:	2300      	movs	r3, #0
 8008b78:	e72b      	b.n	80089d2 <_dtoa_r+0x71a>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b7e:	9408      	str	r4, [sp, #32]
 8008b80:	1ae3      	subs	r3, r4, r3
 8008b82:	441a      	add	r2, r3
 8008b84:	9e00      	ldr	r6, [sp, #0]
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	920d      	str	r2, [sp, #52]	@ 0x34
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	e721      	b.n	80089d2 <_dtoa_r+0x71a>
 8008b8e:	9c08      	ldr	r4, [sp, #32]
 8008b90:	9e00      	ldr	r6, [sp, #0]
 8008b92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008b94:	e728      	b.n	80089e8 <_dtoa_r+0x730>
 8008b96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008b9a:	e751      	b.n	8008a40 <_dtoa_r+0x788>
 8008b9c:	9a08      	ldr	r2, [sp, #32]
 8008b9e:	9902      	ldr	r1, [sp, #8]
 8008ba0:	e750      	b.n	8008a44 <_dtoa_r+0x78c>
 8008ba2:	f8cd 8008 	str.w	r8, [sp, #8]
 8008ba6:	e751      	b.n	8008a4c <_dtoa_r+0x794>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e779      	b.n	8008aa0 <_dtoa_r+0x7e8>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	e777      	b.n	8008aa0 <_dtoa_r+0x7e8>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	e779      	b.n	8008aaa <_dtoa_r+0x7f2>
 8008bb6:	d093      	beq.n	8008ae0 <_dtoa_r+0x828>
 8008bb8:	9a00      	ldr	r2, [sp, #0]
 8008bba:	331c      	adds	r3, #28
 8008bbc:	441a      	add	r2, r3
 8008bbe:	9200      	str	r2, [sp, #0]
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	441e      	add	r6, r3
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	e78a      	b.n	8008ae0 <_dtoa_r+0x828>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	e7f4      	b.n	8008bb8 <_dtoa_r+0x900>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	46b8      	mov	r8, r7
 8008bd4:	dc20      	bgt.n	8008c18 <_dtoa_r+0x960>
 8008bd6:	469b      	mov	fp, r3
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	dd1e      	ble.n	8008c1c <_dtoa_r+0x964>
 8008bde:	f1bb 0f00 	cmp.w	fp, #0
 8008be2:	f47f adb1 	bne.w	8008748 <_dtoa_r+0x490>
 8008be6:	4621      	mov	r1, r4
 8008be8:	465b      	mov	r3, fp
 8008bea:	2205      	movs	r2, #5
 8008bec:	4648      	mov	r0, r9
 8008bee:	f000 fa95 	bl	800911c <__multadd>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	9802      	ldr	r0, [sp, #8]
 8008bf8:	f000 fca0 	bl	800953c <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f77f ada3 	ble.w	8008748 <_dtoa_r+0x490>
 8008c02:	4656      	mov	r6, sl
 8008c04:	2331      	movs	r3, #49	@ 0x31
 8008c06:	f806 3b01 	strb.w	r3, [r6], #1
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	e59f      	b.n	8008750 <_dtoa_r+0x498>
 8008c10:	9c03      	ldr	r4, [sp, #12]
 8008c12:	46b8      	mov	r8, r7
 8008c14:	4625      	mov	r5, r4
 8008c16:	e7f4      	b.n	8008c02 <_dtoa_r+0x94a>
 8008c18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8101 	beq.w	8008e26 <_dtoa_r+0xb6e>
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	dd05      	ble.n	8008c34 <_dtoa_r+0x97c>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	4648      	mov	r0, r9
 8008c2e:	f000 fc19 	bl	8009464 <__lshift>
 8008c32:	4605      	mov	r5, r0
 8008c34:	9b08      	ldr	r3, [sp, #32]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d05c      	beq.n	8008cf4 <_dtoa_r+0xa3c>
 8008c3a:	6869      	ldr	r1, [r5, #4]
 8008c3c:	4648      	mov	r0, r9
 8008c3e:	f000 fa0b 	bl	8009058 <_Balloc>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b928      	cbnz	r0, 8008c52 <_dtoa_r+0x99a>
 8008c46:	4b82      	ldr	r3, [pc, #520]	@ (8008e50 <_dtoa_r+0xb98>)
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c4e:	f7ff bb4a 	b.w	80082e6 <_dtoa_r+0x2e>
 8008c52:	692a      	ldr	r2, [r5, #16]
 8008c54:	3202      	adds	r2, #2
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	f105 010c 	add.w	r1, r5, #12
 8008c5c:	300c      	adds	r0, #12
 8008c5e:	f000 ffb5 	bl	8009bcc <memcpy>
 8008c62:	2201      	movs	r2, #1
 8008c64:	4631      	mov	r1, r6
 8008c66:	4648      	mov	r0, r9
 8008c68:	f000 fbfc 	bl	8009464 <__lshift>
 8008c6c:	f10a 0301 	add.w	r3, sl, #1
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	eb0a 030b 	add.w	r3, sl, fp
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	462f      	mov	r7, r5
 8008c80:	9306      	str	r3, [sp, #24]
 8008c82:	4605      	mov	r5, r0
 8008c84:	9b00      	ldr	r3, [sp, #0]
 8008c86:	9802      	ldr	r0, [sp, #8]
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008c8e:	f7ff fa89 	bl	80081a4 <quorem>
 8008c92:	4603      	mov	r3, r0
 8008c94:	3330      	adds	r3, #48	@ 0x30
 8008c96:	9003      	str	r0, [sp, #12]
 8008c98:	4639      	mov	r1, r7
 8008c9a:	9802      	ldr	r0, [sp, #8]
 8008c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9e:	f000 fc4d 	bl	800953c <__mcmp>
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	9004      	str	r0, [sp, #16]
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4648      	mov	r0, r9
 8008caa:	f000 fc63 	bl	8009574 <__mdiff>
 8008cae:	68c2      	ldr	r2, [r0, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	bb02      	cbnz	r2, 8008cf8 <_dtoa_r+0xa40>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	9802      	ldr	r0, [sp, #8]
 8008cba:	f000 fc3f 	bl	800953c <__mcmp>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4648      	mov	r0, r9
 8008cc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cca:	f000 fa05 	bl	80090d8 <_Bfree>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008cd2:	9e00      	ldr	r6, [sp, #0]
 8008cd4:	ea42 0103 	orr.w	r1, r2, r3
 8008cd8:	9b06      	ldr	r3, [sp, #24]
 8008cda:	4319      	orrs	r1, r3
 8008cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cde:	d10d      	bne.n	8008cfc <_dtoa_r+0xa44>
 8008ce0:	2b39      	cmp	r3, #57	@ 0x39
 8008ce2:	d027      	beq.n	8008d34 <_dtoa_r+0xa7c>
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	2a00      	cmp	r2, #0
 8008ce8:	dd01      	ble.n	8008cee <_dtoa_r+0xa36>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3331      	adds	r3, #49	@ 0x31
 8008cee:	f88b 3000 	strb.w	r3, [fp]
 8008cf2:	e52e      	b.n	8008752 <_dtoa_r+0x49a>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	e7b9      	b.n	8008c6c <_dtoa_r+0x9b4>
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	e7e2      	b.n	8008cc2 <_dtoa_r+0xa0a>
 8008cfc:	9904      	ldr	r1, [sp, #16]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	db04      	blt.n	8008d0c <_dtoa_r+0xa54>
 8008d02:	9807      	ldr	r0, [sp, #28]
 8008d04:	4301      	orrs	r1, r0
 8008d06:	9806      	ldr	r0, [sp, #24]
 8008d08:	4301      	orrs	r1, r0
 8008d0a:	d120      	bne.n	8008d4e <_dtoa_r+0xa96>
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	ddee      	ble.n	8008cee <_dtoa_r+0xa36>
 8008d10:	9902      	ldr	r1, [sp, #8]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2201      	movs	r2, #1
 8008d16:	4648      	mov	r0, r9
 8008d18:	f000 fba4 	bl	8009464 <__lshift>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	9002      	str	r0, [sp, #8]
 8008d20:	f000 fc0c 	bl	800953c <__mcmp>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	dc02      	bgt.n	8008d30 <_dtoa_r+0xa78>
 8008d2a:	d1e0      	bne.n	8008cee <_dtoa_r+0xa36>
 8008d2c:	07da      	lsls	r2, r3, #31
 8008d2e:	d5de      	bpl.n	8008cee <_dtoa_r+0xa36>
 8008d30:	2b39      	cmp	r3, #57	@ 0x39
 8008d32:	d1da      	bne.n	8008cea <_dtoa_r+0xa32>
 8008d34:	2339      	movs	r3, #57	@ 0x39
 8008d36:	f88b 3000 	strb.w	r3, [fp]
 8008d3a:	4633      	mov	r3, r6
 8008d3c:	461e      	mov	r6, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d44:	2a39      	cmp	r2, #57	@ 0x39
 8008d46:	d04e      	beq.n	8008de6 <_dtoa_r+0xb2e>
 8008d48:	3201      	adds	r2, #1
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e501      	b.n	8008752 <_dtoa_r+0x49a>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	dd03      	ble.n	8008d5a <_dtoa_r+0xaa2>
 8008d52:	2b39      	cmp	r3, #57	@ 0x39
 8008d54:	d0ee      	beq.n	8008d34 <_dtoa_r+0xa7c>
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7c9      	b.n	8008cee <_dtoa_r+0xa36>
 8008d5a:	9a00      	ldr	r2, [sp, #0]
 8008d5c:	9908      	ldr	r1, [sp, #32]
 8008d5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d62:	428a      	cmp	r2, r1
 8008d64:	d028      	beq.n	8008db8 <_dtoa_r+0xb00>
 8008d66:	9902      	ldr	r1, [sp, #8]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	4648      	mov	r0, r9
 8008d6e:	f000 f9d5 	bl	800911c <__multadd>
 8008d72:	42af      	cmp	r7, r5
 8008d74:	9002      	str	r0, [sp, #8]
 8008d76:	f04f 0300 	mov.w	r3, #0
 8008d7a:	f04f 020a 	mov.w	r2, #10
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4648      	mov	r0, r9
 8008d82:	d107      	bne.n	8008d94 <_dtoa_r+0xadc>
 8008d84:	f000 f9ca 	bl	800911c <__multadd>
 8008d88:	4607      	mov	r7, r0
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	e777      	b.n	8008c84 <_dtoa_r+0x9cc>
 8008d94:	f000 f9c2 	bl	800911c <__multadd>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	220a      	movs	r2, #10
 8008da0:	4648      	mov	r0, r9
 8008da2:	f000 f9bb 	bl	800911c <__multadd>
 8008da6:	4605      	mov	r5, r0
 8008da8:	e7f0      	b.n	8008d8c <_dtoa_r+0xad4>
 8008daa:	f1bb 0f00 	cmp.w	fp, #0
 8008dae:	bfcc      	ite	gt
 8008db0:	465e      	movgt	r6, fp
 8008db2:	2601      	movle	r6, #1
 8008db4:	4456      	add	r6, sl
 8008db6:	2700      	movs	r7, #0
 8008db8:	9902      	ldr	r1, [sp, #8]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	f000 fb50 	bl	8009464 <__lshift>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	9002      	str	r0, [sp, #8]
 8008dc8:	f000 fbb8 	bl	800953c <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	dcb4      	bgt.n	8008d3a <_dtoa_r+0xa82>
 8008dd0:	d102      	bne.n	8008dd8 <_dtoa_r+0xb20>
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	07db      	lsls	r3, r3, #31
 8008dd6:	d4b0      	bmi.n	8008d3a <_dtoa_r+0xa82>
 8008dd8:	4633      	mov	r3, r6
 8008dda:	461e      	mov	r6, r3
 8008ddc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008de0:	2a30      	cmp	r2, #48	@ 0x30
 8008de2:	d0fa      	beq.n	8008dda <_dtoa_r+0xb22>
 8008de4:	e4b5      	b.n	8008752 <_dtoa_r+0x49a>
 8008de6:	459a      	cmp	sl, r3
 8008de8:	d1a8      	bne.n	8008d3c <_dtoa_r+0xa84>
 8008dea:	2331      	movs	r3, #49	@ 0x31
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	f88a 3000 	strb.w	r3, [sl]
 8008df4:	e4ad      	b.n	8008752 <_dtoa_r+0x49a>
 8008df6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008df8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008e54 <_dtoa_r+0xb9c>
 8008dfc:	b11b      	cbz	r3, 8008e06 <_dtoa_r+0xb4e>
 8008dfe:	f10a 0308 	add.w	r3, sl, #8
 8008e02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	4650      	mov	r0, sl
 8008e08:	b017      	add	sp, #92	@ 0x5c
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	f77f ae2e 	ble.w	8008a72 <_dtoa_r+0x7ba>
 8008e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e64d      	b.n	8008aba <_dtoa_r+0x802>
 8008e1e:	f1bb 0f00 	cmp.w	fp, #0
 8008e22:	f77f aed9 	ble.w	8008bd8 <_dtoa_r+0x920>
 8008e26:	4656      	mov	r6, sl
 8008e28:	9802      	ldr	r0, [sp, #8]
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7ff f9ba 	bl	80081a4 <quorem>
 8008e30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008e34:	f806 3b01 	strb.w	r3, [r6], #1
 8008e38:	eba6 020a 	sub.w	r2, r6, sl
 8008e3c:	4593      	cmp	fp, r2
 8008e3e:	ddb4      	ble.n	8008daa <_dtoa_r+0xaf2>
 8008e40:	9902      	ldr	r1, [sp, #8]
 8008e42:	2300      	movs	r3, #0
 8008e44:	220a      	movs	r2, #10
 8008e46:	4648      	mov	r0, r9
 8008e48:	f000 f968 	bl	800911c <__multadd>
 8008e4c:	9002      	str	r0, [sp, #8]
 8008e4e:	e7eb      	b.n	8008e28 <_dtoa_r+0xb70>
 8008e50:	0800a3b0 	.word	0x0800a3b0
 8008e54:	0800a34b 	.word	0x0800a34b

08008e58 <_free_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	d041      	beq.n	8008ee4 <_free_r+0x8c>
 8008e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e64:	1f0c      	subs	r4, r1, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfb8      	it	lt
 8008e6a:	18e4      	addlt	r4, r4, r3
 8008e6c:	f000 f8e8 	bl	8009040 <__malloc_lock>
 8008e70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee8 <_free_r+0x90>)
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	b933      	cbnz	r3, 8008e84 <_free_r+0x2c>
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	6014      	str	r4, [r2, #0]
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e80:	f000 b8e4 	b.w	800904c <__malloc_unlock>
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	d908      	bls.n	8008e9a <_free_r+0x42>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	1821      	adds	r1, r4, r0
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf01      	itttt	eq
 8008e90:	6819      	ldreq	r1, [r3, #0]
 8008e92:	685b      	ldreq	r3, [r3, #4]
 8008e94:	1809      	addeq	r1, r1, r0
 8008e96:	6021      	streq	r1, [r4, #0]
 8008e98:	e7ed      	b.n	8008e76 <_free_r+0x1e>
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	b10b      	cbz	r3, 8008ea4 <_free_r+0x4c>
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	d9fa      	bls.n	8008e9a <_free_r+0x42>
 8008ea4:	6811      	ldr	r1, [r2, #0]
 8008ea6:	1850      	adds	r0, r2, r1
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d10b      	bne.n	8008ec4 <_free_r+0x6c>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	4401      	add	r1, r0
 8008eb0:	1850      	adds	r0, r2, r1
 8008eb2:	4283      	cmp	r3, r0
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	d1e0      	bne.n	8008e7a <_free_r+0x22>
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	6053      	str	r3, [r2, #4]
 8008ebe:	4408      	add	r0, r1
 8008ec0:	6010      	str	r0, [r2, #0]
 8008ec2:	e7da      	b.n	8008e7a <_free_r+0x22>
 8008ec4:	d902      	bls.n	8008ecc <_free_r+0x74>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	e7d6      	b.n	8008e7a <_free_r+0x22>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	1821      	adds	r1, r4, r0
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf04      	itt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	bf04      	itt	eq
 8008edc:	1809      	addeq	r1, r1, r0
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	6054      	str	r4, [r2, #4]
 8008ee2:	e7ca      	b.n	8008e7a <_free_r+0x22>
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000908 	.word	0x20000908

08008eec <malloc>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	@ (8008ef8 <malloc+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f000 b825 	b.w	8008f40 <_malloc_r>
 8008ef6:	bf00      	nop
 8008ef8:	20000094 	.word	0x20000094

08008efc <sbrk_aligned>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4e0f      	ldr	r6, [pc, #60]	@ (8008f3c <sbrk_aligned+0x40>)
 8008f00:	460c      	mov	r4, r1
 8008f02:	6831      	ldr	r1, [r6, #0]
 8008f04:	4605      	mov	r5, r0
 8008f06:	b911      	cbnz	r1, 8008f0e <sbrk_aligned+0x12>
 8008f08:	f000 fe50 	bl	8009bac <_sbrk_r>
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 fe4b 	bl	8009bac <_sbrk_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d103      	bne.n	8008f22 <sbrk_aligned+0x26>
 8008f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f1e:	4620      	mov	r0, r4
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d0f8      	beq.n	8008f1e <sbrk_aligned+0x22>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fe3c 	bl	8009bac <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1f2      	bne.n	8008f1e <sbrk_aligned+0x22>
 8008f38:	e7ef      	b.n	8008f1a <sbrk_aligned+0x1e>
 8008f3a:	bf00      	nop
 8008f3c:	20000904 	.word	0x20000904

08008f40 <_malloc_r>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	1ccd      	adds	r5, r1, #3
 8008f46:	f025 0503 	bic.w	r5, r5, #3
 8008f4a:	3508      	adds	r5, #8
 8008f4c:	2d0c      	cmp	r5, #12
 8008f4e:	bf38      	it	cc
 8008f50:	250c      	movcc	r5, #12
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	4606      	mov	r6, r0
 8008f56:	db01      	blt.n	8008f5c <_malloc_r+0x1c>
 8008f58:	42a9      	cmp	r1, r5
 8008f5a:	d904      	bls.n	8008f66 <_malloc_r+0x26>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	2000      	movs	r0, #0
 8008f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800903c <_malloc_r+0xfc>
 8008f6a:	f000 f869 	bl	8009040 <__malloc_lock>
 8008f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f72:	461c      	mov	r4, r3
 8008f74:	bb44      	cbnz	r4, 8008fc8 <_malloc_r+0x88>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff ffbf 	bl	8008efc <sbrk_aligned>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	4604      	mov	r4, r0
 8008f82:	d158      	bne.n	8009036 <_malloc_r+0xf6>
 8008f84:	f8d8 4000 	ldr.w	r4, [r8]
 8008f88:	4627      	mov	r7, r4
 8008f8a:	2f00      	cmp	r7, #0
 8008f8c:	d143      	bne.n	8009016 <_malloc_r+0xd6>
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d04b      	beq.n	800902a <_malloc_r+0xea>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	4639      	mov	r1, r7
 8008f96:	4630      	mov	r0, r6
 8008f98:	eb04 0903 	add.w	r9, r4, r3
 8008f9c:	f000 fe06 	bl	8009bac <_sbrk_r>
 8008fa0:	4581      	cmp	r9, r0
 8008fa2:	d142      	bne.n	800902a <_malloc_r+0xea>
 8008fa4:	6821      	ldr	r1, [r4, #0]
 8008fa6:	1a6d      	subs	r5, r5, r1
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff ffa6 	bl	8008efc <sbrk_aligned>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d03a      	beq.n	800902a <_malloc_r+0xea>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	442b      	add	r3, r5
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	f8d8 3000 	ldr.w	r3, [r8]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	bb62      	cbnz	r2, 800901c <_malloc_r+0xdc>
 8008fc2:	f8c8 7000 	str.w	r7, [r8]
 8008fc6:	e00f      	b.n	8008fe8 <_malloc_r+0xa8>
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	1b52      	subs	r2, r2, r5
 8008fcc:	d420      	bmi.n	8009010 <_malloc_r+0xd0>
 8008fce:	2a0b      	cmp	r2, #11
 8008fd0:	d917      	bls.n	8009002 <_malloc_r+0xc2>
 8008fd2:	1961      	adds	r1, r4, r5
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	6025      	str	r5, [r4, #0]
 8008fd8:	bf18      	it	ne
 8008fda:	6059      	strne	r1, [r3, #4]
 8008fdc:	6863      	ldr	r3, [r4, #4]
 8008fde:	bf08      	it	eq
 8008fe0:	f8c8 1000 	streq.w	r1, [r8]
 8008fe4:	5162      	str	r2, [r4, r5]
 8008fe6:	604b      	str	r3, [r1, #4]
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f82f 	bl	800904c <__malloc_unlock>
 8008fee:	f104 000b 	add.w	r0, r4, #11
 8008ff2:	1d23      	adds	r3, r4, #4
 8008ff4:	f020 0007 	bic.w	r0, r0, #7
 8008ff8:	1ac2      	subs	r2, r0, r3
 8008ffa:	bf1c      	itt	ne
 8008ffc:	1a1b      	subne	r3, r3, r0
 8008ffe:	50a3      	strne	r3, [r4, r2]
 8009000:	e7af      	b.n	8008f62 <_malloc_r+0x22>
 8009002:	6862      	ldr	r2, [r4, #4]
 8009004:	42a3      	cmp	r3, r4
 8009006:	bf0c      	ite	eq
 8009008:	f8c8 2000 	streq.w	r2, [r8]
 800900c:	605a      	strne	r2, [r3, #4]
 800900e:	e7eb      	b.n	8008fe8 <_malloc_r+0xa8>
 8009010:	4623      	mov	r3, r4
 8009012:	6864      	ldr	r4, [r4, #4]
 8009014:	e7ae      	b.n	8008f74 <_malloc_r+0x34>
 8009016:	463c      	mov	r4, r7
 8009018:	687f      	ldr	r7, [r7, #4]
 800901a:	e7b6      	b.n	8008f8a <_malloc_r+0x4a>
 800901c:	461a      	mov	r2, r3
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	42a3      	cmp	r3, r4
 8009022:	d1fb      	bne.n	800901c <_malloc_r+0xdc>
 8009024:	2300      	movs	r3, #0
 8009026:	6053      	str	r3, [r2, #4]
 8009028:	e7de      	b.n	8008fe8 <_malloc_r+0xa8>
 800902a:	230c      	movs	r3, #12
 800902c:	6033      	str	r3, [r6, #0]
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f80c 	bl	800904c <__malloc_unlock>
 8009034:	e794      	b.n	8008f60 <_malloc_r+0x20>
 8009036:	6005      	str	r5, [r0, #0]
 8009038:	e7d6      	b.n	8008fe8 <_malloc_r+0xa8>
 800903a:	bf00      	nop
 800903c:	20000908 	.word	0x20000908

08009040 <__malloc_lock>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__malloc_lock+0x8>)
 8009042:	f7ff b88e 	b.w	8008162 <__retarget_lock_acquire_recursive>
 8009046:	bf00      	nop
 8009048:	20000900 	.word	0x20000900

0800904c <__malloc_unlock>:
 800904c:	4801      	ldr	r0, [pc, #4]	@ (8009054 <__malloc_unlock+0x8>)
 800904e:	f7ff b889 	b.w	8008164 <__retarget_lock_release_recursive>
 8009052:	bf00      	nop
 8009054:	20000900 	.word	0x20000900

08009058 <_Balloc>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	69c6      	ldr	r6, [r0, #28]
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	b976      	cbnz	r6, 8009080 <_Balloc+0x28>
 8009062:	2010      	movs	r0, #16
 8009064:	f7ff ff42 	bl	8008eec <malloc>
 8009068:	4602      	mov	r2, r0
 800906a:	61e0      	str	r0, [r4, #28]
 800906c:	b920      	cbnz	r0, 8009078 <_Balloc+0x20>
 800906e:	4b18      	ldr	r3, [pc, #96]	@ (80090d0 <_Balloc+0x78>)
 8009070:	4818      	ldr	r0, [pc, #96]	@ (80090d4 <_Balloc+0x7c>)
 8009072:	216b      	movs	r1, #107	@ 0x6b
 8009074:	f7ff f878 	bl	8008168 <__assert_func>
 8009078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800907c:	6006      	str	r6, [r0, #0]
 800907e:	60c6      	str	r6, [r0, #12]
 8009080:	69e6      	ldr	r6, [r4, #28]
 8009082:	68f3      	ldr	r3, [r6, #12]
 8009084:	b183      	cbz	r3, 80090a8 <_Balloc+0x50>
 8009086:	69e3      	ldr	r3, [r4, #28]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800908e:	b9b8      	cbnz	r0, 80090c0 <_Balloc+0x68>
 8009090:	2101      	movs	r1, #1
 8009092:	fa01 f605 	lsl.w	r6, r1, r5
 8009096:	1d72      	adds	r2, r6, #5
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fdab 	bl	8009bf6 <_calloc_r>
 80090a0:	b160      	cbz	r0, 80090bc <_Balloc+0x64>
 80090a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090a6:	e00e      	b.n	80090c6 <_Balloc+0x6e>
 80090a8:	2221      	movs	r2, #33	@ 0x21
 80090aa:	2104      	movs	r1, #4
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fda2 	bl	8009bf6 <_calloc_r>
 80090b2:	69e3      	ldr	r3, [r4, #28]
 80090b4:	60f0      	str	r0, [r6, #12]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <_Balloc+0x2e>
 80090bc:	2000      	movs	r0, #0
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	6802      	ldr	r2, [r0, #0]
 80090c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090c6:	2300      	movs	r3, #0
 80090c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090cc:	e7f7      	b.n	80090be <_Balloc+0x66>
 80090ce:	bf00      	nop
 80090d0:	0800a26c 	.word	0x0800a26c
 80090d4:	0800a3c1 	.word	0x0800a3c1

080090d8 <_Bfree>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	69c6      	ldr	r6, [r0, #28]
 80090dc:	4605      	mov	r5, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	b976      	cbnz	r6, 8009100 <_Bfree+0x28>
 80090e2:	2010      	movs	r0, #16
 80090e4:	f7ff ff02 	bl	8008eec <malloc>
 80090e8:	4602      	mov	r2, r0
 80090ea:	61e8      	str	r0, [r5, #28]
 80090ec:	b920      	cbnz	r0, 80090f8 <_Bfree+0x20>
 80090ee:	4b09      	ldr	r3, [pc, #36]	@ (8009114 <_Bfree+0x3c>)
 80090f0:	4809      	ldr	r0, [pc, #36]	@ (8009118 <_Bfree+0x40>)
 80090f2:	218f      	movs	r1, #143	@ 0x8f
 80090f4:	f7ff f838 	bl	8008168 <__assert_func>
 80090f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090fc:	6006      	str	r6, [r0, #0]
 80090fe:	60c6      	str	r6, [r0, #12]
 8009100:	b13c      	cbz	r4, 8009112 <_Bfree+0x3a>
 8009102:	69eb      	ldr	r3, [r5, #28]
 8009104:	6862      	ldr	r2, [r4, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800910c:	6021      	str	r1, [r4, #0]
 800910e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	0800a26c 	.word	0x0800a26c
 8009118:	0800a3c1 	.word	0x0800a3c1

0800911c <__multadd>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	690d      	ldr	r5, [r1, #16]
 8009122:	4607      	mov	r7, r0
 8009124:	460c      	mov	r4, r1
 8009126:	461e      	mov	r6, r3
 8009128:	f101 0c14 	add.w	ip, r1, #20
 800912c:	2000      	movs	r0, #0
 800912e:	f8dc 3000 	ldr.w	r3, [ip]
 8009132:	b299      	uxth	r1, r3
 8009134:	fb02 6101 	mla	r1, r2, r1, r6
 8009138:	0c1e      	lsrs	r6, r3, #16
 800913a:	0c0b      	lsrs	r3, r1, #16
 800913c:	fb02 3306 	mla	r3, r2, r6, r3
 8009140:	b289      	uxth	r1, r1
 8009142:	3001      	adds	r0, #1
 8009144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009148:	4285      	cmp	r5, r0
 800914a:	f84c 1b04 	str.w	r1, [ip], #4
 800914e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009152:	dcec      	bgt.n	800912e <__multadd+0x12>
 8009154:	b30e      	cbz	r6, 800919a <__multadd+0x7e>
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	42ab      	cmp	r3, r5
 800915a:	dc19      	bgt.n	8009190 <__multadd+0x74>
 800915c:	6861      	ldr	r1, [r4, #4]
 800915e:	4638      	mov	r0, r7
 8009160:	3101      	adds	r1, #1
 8009162:	f7ff ff79 	bl	8009058 <_Balloc>
 8009166:	4680      	mov	r8, r0
 8009168:	b928      	cbnz	r0, 8009176 <__multadd+0x5a>
 800916a:	4602      	mov	r2, r0
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <__multadd+0x84>)
 800916e:	480d      	ldr	r0, [pc, #52]	@ (80091a4 <__multadd+0x88>)
 8009170:	21ba      	movs	r1, #186	@ 0xba
 8009172:	f7fe fff9 	bl	8008168 <__assert_func>
 8009176:	6922      	ldr	r2, [r4, #16]
 8009178:	3202      	adds	r2, #2
 800917a:	f104 010c 	add.w	r1, r4, #12
 800917e:	0092      	lsls	r2, r2, #2
 8009180:	300c      	adds	r0, #12
 8009182:	f000 fd23 	bl	8009bcc <memcpy>
 8009186:	4621      	mov	r1, r4
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ffa5 	bl	80090d8 <_Bfree>
 800918e:	4644      	mov	r4, r8
 8009190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009194:	3501      	adds	r5, #1
 8009196:	615e      	str	r6, [r3, #20]
 8009198:	6125      	str	r5, [r4, #16]
 800919a:	4620      	mov	r0, r4
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	0800a3b0 	.word	0x0800a3b0
 80091a4:	0800a3c1 	.word	0x0800a3c1

080091a8 <__hi0bits>:
 80091a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091ac:	4603      	mov	r3, r0
 80091ae:	bf36      	itet	cc
 80091b0:	0403      	lslcc	r3, r0, #16
 80091b2:	2000      	movcs	r0, #0
 80091b4:	2010      	movcc	r0, #16
 80091b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091ba:	bf3c      	itt	cc
 80091bc:	021b      	lslcc	r3, r3, #8
 80091be:	3008      	addcc	r0, #8
 80091c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091c4:	bf3c      	itt	cc
 80091c6:	011b      	lslcc	r3, r3, #4
 80091c8:	3004      	addcc	r0, #4
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ce:	bf3c      	itt	cc
 80091d0:	009b      	lslcc	r3, r3, #2
 80091d2:	3002      	addcc	r0, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	db05      	blt.n	80091e4 <__hi0bits+0x3c>
 80091d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091dc:	f100 0001 	add.w	r0, r0, #1
 80091e0:	bf08      	it	eq
 80091e2:	2020      	moveq	r0, #32
 80091e4:	4770      	bx	lr

080091e6 <__lo0bits>:
 80091e6:	6803      	ldr	r3, [r0, #0]
 80091e8:	4602      	mov	r2, r0
 80091ea:	f013 0007 	ands.w	r0, r3, #7
 80091ee:	d00b      	beq.n	8009208 <__lo0bits+0x22>
 80091f0:	07d9      	lsls	r1, r3, #31
 80091f2:	d421      	bmi.n	8009238 <__lo0bits+0x52>
 80091f4:	0798      	lsls	r0, r3, #30
 80091f6:	bf49      	itett	mi
 80091f8:	085b      	lsrmi	r3, r3, #1
 80091fa:	089b      	lsrpl	r3, r3, #2
 80091fc:	2001      	movmi	r0, #1
 80091fe:	6013      	strmi	r3, [r2, #0]
 8009200:	bf5c      	itt	pl
 8009202:	6013      	strpl	r3, [r2, #0]
 8009204:	2002      	movpl	r0, #2
 8009206:	4770      	bx	lr
 8009208:	b299      	uxth	r1, r3
 800920a:	b909      	cbnz	r1, 8009210 <__lo0bits+0x2a>
 800920c:	0c1b      	lsrs	r3, r3, #16
 800920e:	2010      	movs	r0, #16
 8009210:	b2d9      	uxtb	r1, r3
 8009212:	b909      	cbnz	r1, 8009218 <__lo0bits+0x32>
 8009214:	3008      	adds	r0, #8
 8009216:	0a1b      	lsrs	r3, r3, #8
 8009218:	0719      	lsls	r1, r3, #28
 800921a:	bf04      	itt	eq
 800921c:	091b      	lsreq	r3, r3, #4
 800921e:	3004      	addeq	r0, #4
 8009220:	0799      	lsls	r1, r3, #30
 8009222:	bf04      	itt	eq
 8009224:	089b      	lsreq	r3, r3, #2
 8009226:	3002      	addeq	r0, #2
 8009228:	07d9      	lsls	r1, r3, #31
 800922a:	d403      	bmi.n	8009234 <__lo0bits+0x4e>
 800922c:	085b      	lsrs	r3, r3, #1
 800922e:	f100 0001 	add.w	r0, r0, #1
 8009232:	d003      	beq.n	800923c <__lo0bits+0x56>
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	4770      	bx	lr
 8009238:	2000      	movs	r0, #0
 800923a:	4770      	bx	lr
 800923c:	2020      	movs	r0, #32
 800923e:	4770      	bx	lr

08009240 <__i2b>:
 8009240:	b510      	push	{r4, lr}
 8009242:	460c      	mov	r4, r1
 8009244:	2101      	movs	r1, #1
 8009246:	f7ff ff07 	bl	8009058 <_Balloc>
 800924a:	4602      	mov	r2, r0
 800924c:	b928      	cbnz	r0, 800925a <__i2b+0x1a>
 800924e:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <__i2b+0x24>)
 8009250:	4805      	ldr	r0, [pc, #20]	@ (8009268 <__i2b+0x28>)
 8009252:	f240 1145 	movw	r1, #325	@ 0x145
 8009256:	f7fe ff87 	bl	8008168 <__assert_func>
 800925a:	2301      	movs	r3, #1
 800925c:	6144      	str	r4, [r0, #20]
 800925e:	6103      	str	r3, [r0, #16]
 8009260:	bd10      	pop	{r4, pc}
 8009262:	bf00      	nop
 8009264:	0800a3b0 	.word	0x0800a3b0
 8009268:	0800a3c1 	.word	0x0800a3c1

0800926c <__multiply>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	4617      	mov	r7, r2
 8009272:	690a      	ldr	r2, [r1, #16]
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	429a      	cmp	r2, r3
 8009278:	bfa8      	it	ge
 800927a:	463b      	movge	r3, r7
 800927c:	4689      	mov	r9, r1
 800927e:	bfa4      	itt	ge
 8009280:	460f      	movge	r7, r1
 8009282:	4699      	movge	r9, r3
 8009284:	693d      	ldr	r5, [r7, #16]
 8009286:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	eb05 060a 	add.w	r6, r5, sl
 8009292:	42b3      	cmp	r3, r6
 8009294:	b085      	sub	sp, #20
 8009296:	bfb8      	it	lt
 8009298:	3101      	addlt	r1, #1
 800929a:	f7ff fedd 	bl	8009058 <_Balloc>
 800929e:	b930      	cbnz	r0, 80092ae <__multiply+0x42>
 80092a0:	4602      	mov	r2, r0
 80092a2:	4b41      	ldr	r3, [pc, #260]	@ (80093a8 <__multiply+0x13c>)
 80092a4:	4841      	ldr	r0, [pc, #260]	@ (80093ac <__multiply+0x140>)
 80092a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092aa:	f7fe ff5d 	bl	8008168 <__assert_func>
 80092ae:	f100 0414 	add.w	r4, r0, #20
 80092b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80092b6:	4623      	mov	r3, r4
 80092b8:	2200      	movs	r2, #0
 80092ba:	4573      	cmp	r3, lr
 80092bc:	d320      	bcc.n	8009300 <__multiply+0x94>
 80092be:	f107 0814 	add.w	r8, r7, #20
 80092c2:	f109 0114 	add.w	r1, r9, #20
 80092c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80092ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80092ce:	9302      	str	r3, [sp, #8]
 80092d0:	1beb      	subs	r3, r5, r7
 80092d2:	3b15      	subs	r3, #21
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	3304      	adds	r3, #4
 80092da:	3715      	adds	r7, #21
 80092dc:	42bd      	cmp	r5, r7
 80092de:	bf38      	it	cc
 80092e0:	2304      	movcc	r3, #4
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	9b02      	ldr	r3, [sp, #8]
 80092e6:	9103      	str	r1, [sp, #12]
 80092e8:	428b      	cmp	r3, r1
 80092ea:	d80c      	bhi.n	8009306 <__multiply+0x9a>
 80092ec:	2e00      	cmp	r6, #0
 80092ee:	dd03      	ble.n	80092f8 <__multiply+0x8c>
 80092f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d055      	beq.n	80093a4 <__multiply+0x138>
 80092f8:	6106      	str	r6, [r0, #16]
 80092fa:	b005      	add	sp, #20
 80092fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009300:	f843 2b04 	str.w	r2, [r3], #4
 8009304:	e7d9      	b.n	80092ba <__multiply+0x4e>
 8009306:	f8b1 a000 	ldrh.w	sl, [r1]
 800930a:	f1ba 0f00 	cmp.w	sl, #0
 800930e:	d01f      	beq.n	8009350 <__multiply+0xe4>
 8009310:	46c4      	mov	ip, r8
 8009312:	46a1      	mov	r9, r4
 8009314:	2700      	movs	r7, #0
 8009316:	f85c 2b04 	ldr.w	r2, [ip], #4
 800931a:	f8d9 3000 	ldr.w	r3, [r9]
 800931e:	fa1f fb82 	uxth.w	fp, r2
 8009322:	b29b      	uxth	r3, r3
 8009324:	fb0a 330b 	mla	r3, sl, fp, r3
 8009328:	443b      	add	r3, r7
 800932a:	f8d9 7000 	ldr.w	r7, [r9]
 800932e:	0c12      	lsrs	r2, r2, #16
 8009330:	0c3f      	lsrs	r7, r7, #16
 8009332:	fb0a 7202 	mla	r2, sl, r2, r7
 8009336:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009340:	4565      	cmp	r5, ip
 8009342:	f849 3b04 	str.w	r3, [r9], #4
 8009346:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800934a:	d8e4      	bhi.n	8009316 <__multiply+0xaa>
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	50e7      	str	r7, [r4, r3]
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009356:	3104      	adds	r1, #4
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	d020      	beq.n	80093a0 <__multiply+0x134>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	4647      	mov	r7, r8
 8009362:	46a4      	mov	ip, r4
 8009364:	f04f 0a00 	mov.w	sl, #0
 8009368:	f8b7 b000 	ldrh.w	fp, [r7]
 800936c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009370:	fb09 220b 	mla	r2, r9, fp, r2
 8009374:	4452      	add	r2, sl
 8009376:	b29b      	uxth	r3, r3
 8009378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800937c:	f84c 3b04 	str.w	r3, [ip], #4
 8009380:	f857 3b04 	ldr.w	r3, [r7], #4
 8009384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009388:	f8bc 3000 	ldrh.w	r3, [ip]
 800938c:	fb09 330a 	mla	r3, r9, sl, r3
 8009390:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009394:	42bd      	cmp	r5, r7
 8009396:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800939a:	d8e5      	bhi.n	8009368 <__multiply+0xfc>
 800939c:	9a01      	ldr	r2, [sp, #4]
 800939e:	50a3      	str	r3, [r4, r2]
 80093a0:	3404      	adds	r4, #4
 80093a2:	e79f      	b.n	80092e4 <__multiply+0x78>
 80093a4:	3e01      	subs	r6, #1
 80093a6:	e7a1      	b.n	80092ec <__multiply+0x80>
 80093a8:	0800a3b0 	.word	0x0800a3b0
 80093ac:	0800a3c1 	.word	0x0800a3c1

080093b0 <__pow5mult>:
 80093b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b4:	4615      	mov	r5, r2
 80093b6:	f012 0203 	ands.w	r2, r2, #3
 80093ba:	4607      	mov	r7, r0
 80093bc:	460e      	mov	r6, r1
 80093be:	d007      	beq.n	80093d0 <__pow5mult+0x20>
 80093c0:	4c25      	ldr	r4, [pc, #148]	@ (8009458 <__pow5mult+0xa8>)
 80093c2:	3a01      	subs	r2, #1
 80093c4:	2300      	movs	r3, #0
 80093c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ca:	f7ff fea7 	bl	800911c <__multadd>
 80093ce:	4606      	mov	r6, r0
 80093d0:	10ad      	asrs	r5, r5, #2
 80093d2:	d03d      	beq.n	8009450 <__pow5mult+0xa0>
 80093d4:	69fc      	ldr	r4, [r7, #28]
 80093d6:	b97c      	cbnz	r4, 80093f8 <__pow5mult+0x48>
 80093d8:	2010      	movs	r0, #16
 80093da:	f7ff fd87 	bl	8008eec <malloc>
 80093de:	4602      	mov	r2, r0
 80093e0:	61f8      	str	r0, [r7, #28]
 80093e2:	b928      	cbnz	r0, 80093f0 <__pow5mult+0x40>
 80093e4:	4b1d      	ldr	r3, [pc, #116]	@ (800945c <__pow5mult+0xac>)
 80093e6:	481e      	ldr	r0, [pc, #120]	@ (8009460 <__pow5mult+0xb0>)
 80093e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093ec:	f7fe febc 	bl	8008168 <__assert_func>
 80093f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093f4:	6004      	str	r4, [r0, #0]
 80093f6:	60c4      	str	r4, [r0, #12]
 80093f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009400:	b94c      	cbnz	r4, 8009416 <__pow5mult+0x66>
 8009402:	f240 2171 	movw	r1, #625	@ 0x271
 8009406:	4638      	mov	r0, r7
 8009408:	f7ff ff1a 	bl	8009240 <__i2b>
 800940c:	2300      	movs	r3, #0
 800940e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009412:	4604      	mov	r4, r0
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	f04f 0900 	mov.w	r9, #0
 800941a:	07eb      	lsls	r3, r5, #31
 800941c:	d50a      	bpl.n	8009434 <__pow5mult+0x84>
 800941e:	4631      	mov	r1, r6
 8009420:	4622      	mov	r2, r4
 8009422:	4638      	mov	r0, r7
 8009424:	f7ff ff22 	bl	800926c <__multiply>
 8009428:	4631      	mov	r1, r6
 800942a:	4680      	mov	r8, r0
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff fe53 	bl	80090d8 <_Bfree>
 8009432:	4646      	mov	r6, r8
 8009434:	106d      	asrs	r5, r5, #1
 8009436:	d00b      	beq.n	8009450 <__pow5mult+0xa0>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	b938      	cbnz	r0, 800944c <__pow5mult+0x9c>
 800943c:	4622      	mov	r2, r4
 800943e:	4621      	mov	r1, r4
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ff13 	bl	800926c <__multiply>
 8009446:	6020      	str	r0, [r4, #0]
 8009448:	f8c0 9000 	str.w	r9, [r0]
 800944c:	4604      	mov	r4, r0
 800944e:	e7e4      	b.n	800941a <__pow5mult+0x6a>
 8009450:	4630      	mov	r0, r6
 8009452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009456:	bf00      	nop
 8009458:	0800a438 	.word	0x0800a438
 800945c:	0800a26c 	.word	0x0800a26c
 8009460:	0800a3c1 	.word	0x0800a3c1

08009464 <__lshift>:
 8009464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	460c      	mov	r4, r1
 800946a:	6849      	ldr	r1, [r1, #4]
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	4607      	mov	r7, r0
 8009476:	4691      	mov	r9, r2
 8009478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800947c:	f108 0601 	add.w	r6, r8, #1
 8009480:	42b3      	cmp	r3, r6
 8009482:	db0b      	blt.n	800949c <__lshift+0x38>
 8009484:	4638      	mov	r0, r7
 8009486:	f7ff fde7 	bl	8009058 <_Balloc>
 800948a:	4605      	mov	r5, r0
 800948c:	b948      	cbnz	r0, 80094a2 <__lshift+0x3e>
 800948e:	4602      	mov	r2, r0
 8009490:	4b28      	ldr	r3, [pc, #160]	@ (8009534 <__lshift+0xd0>)
 8009492:	4829      	ldr	r0, [pc, #164]	@ (8009538 <__lshift+0xd4>)
 8009494:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009498:	f7fe fe66 	bl	8008168 <__assert_func>
 800949c:	3101      	adds	r1, #1
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	e7ee      	b.n	8009480 <__lshift+0x1c>
 80094a2:	2300      	movs	r3, #0
 80094a4:	f100 0114 	add.w	r1, r0, #20
 80094a8:	f100 0210 	add.w	r2, r0, #16
 80094ac:	4618      	mov	r0, r3
 80094ae:	4553      	cmp	r3, sl
 80094b0:	db33      	blt.n	800951a <__lshift+0xb6>
 80094b2:	6920      	ldr	r0, [r4, #16]
 80094b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b8:	f104 0314 	add.w	r3, r4, #20
 80094bc:	f019 091f 	ands.w	r9, r9, #31
 80094c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094c8:	d02b      	beq.n	8009522 <__lshift+0xbe>
 80094ca:	f1c9 0e20 	rsb	lr, r9, #32
 80094ce:	468a      	mov	sl, r1
 80094d0:	2200      	movs	r2, #0
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	fa00 f009 	lsl.w	r0, r0, r9
 80094d8:	4310      	orrs	r0, r2
 80094da:	f84a 0b04 	str.w	r0, [sl], #4
 80094de:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e2:	459c      	cmp	ip, r3
 80094e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80094e8:	d8f3      	bhi.n	80094d2 <__lshift+0x6e>
 80094ea:	ebac 0304 	sub.w	r3, ip, r4
 80094ee:	3b15      	subs	r3, #21
 80094f0:	f023 0303 	bic.w	r3, r3, #3
 80094f4:	3304      	adds	r3, #4
 80094f6:	f104 0015 	add.w	r0, r4, #21
 80094fa:	4560      	cmp	r0, ip
 80094fc:	bf88      	it	hi
 80094fe:	2304      	movhi	r3, #4
 8009500:	50ca      	str	r2, [r1, r3]
 8009502:	b10a      	cbz	r2, 8009508 <__lshift+0xa4>
 8009504:	f108 0602 	add.w	r6, r8, #2
 8009508:	3e01      	subs	r6, #1
 800950a:	4638      	mov	r0, r7
 800950c:	612e      	str	r6, [r5, #16]
 800950e:	4621      	mov	r1, r4
 8009510:	f7ff fde2 	bl	80090d8 <_Bfree>
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951a:	f842 0f04 	str.w	r0, [r2, #4]!
 800951e:	3301      	adds	r3, #1
 8009520:	e7c5      	b.n	80094ae <__lshift+0x4a>
 8009522:	3904      	subs	r1, #4
 8009524:	f853 2b04 	ldr.w	r2, [r3], #4
 8009528:	f841 2f04 	str.w	r2, [r1, #4]!
 800952c:	459c      	cmp	ip, r3
 800952e:	d8f9      	bhi.n	8009524 <__lshift+0xc0>
 8009530:	e7ea      	b.n	8009508 <__lshift+0xa4>
 8009532:	bf00      	nop
 8009534:	0800a3b0 	.word	0x0800a3b0
 8009538:	0800a3c1 	.word	0x0800a3c1

0800953c <__mcmp>:
 800953c:	690a      	ldr	r2, [r1, #16]
 800953e:	4603      	mov	r3, r0
 8009540:	6900      	ldr	r0, [r0, #16]
 8009542:	1a80      	subs	r0, r0, r2
 8009544:	b530      	push	{r4, r5, lr}
 8009546:	d10e      	bne.n	8009566 <__mcmp+0x2a>
 8009548:	3314      	adds	r3, #20
 800954a:	3114      	adds	r1, #20
 800954c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009550:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009554:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009558:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800955c:	4295      	cmp	r5, r2
 800955e:	d003      	beq.n	8009568 <__mcmp+0x2c>
 8009560:	d205      	bcs.n	800956e <__mcmp+0x32>
 8009562:	f04f 30ff 	mov.w	r0, #4294967295
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	42a3      	cmp	r3, r4
 800956a:	d3f3      	bcc.n	8009554 <__mcmp+0x18>
 800956c:	e7fb      	b.n	8009566 <__mcmp+0x2a>
 800956e:	2001      	movs	r0, #1
 8009570:	e7f9      	b.n	8009566 <__mcmp+0x2a>
	...

08009574 <__mdiff>:
 8009574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	4689      	mov	r9, r1
 800957a:	4606      	mov	r6, r0
 800957c:	4611      	mov	r1, r2
 800957e:	4648      	mov	r0, r9
 8009580:	4614      	mov	r4, r2
 8009582:	f7ff ffdb 	bl	800953c <__mcmp>
 8009586:	1e05      	subs	r5, r0, #0
 8009588:	d112      	bne.n	80095b0 <__mdiff+0x3c>
 800958a:	4629      	mov	r1, r5
 800958c:	4630      	mov	r0, r6
 800958e:	f7ff fd63 	bl	8009058 <_Balloc>
 8009592:	4602      	mov	r2, r0
 8009594:	b928      	cbnz	r0, 80095a2 <__mdiff+0x2e>
 8009596:	4b3f      	ldr	r3, [pc, #252]	@ (8009694 <__mdiff+0x120>)
 8009598:	f240 2137 	movw	r1, #567	@ 0x237
 800959c:	483e      	ldr	r0, [pc, #248]	@ (8009698 <__mdiff+0x124>)
 800959e:	f7fe fde3 	bl	8008168 <__assert_func>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a8:	4610      	mov	r0, r2
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	bfbc      	itt	lt
 80095b2:	464b      	movlt	r3, r9
 80095b4:	46a1      	movlt	r9, r4
 80095b6:	4630      	mov	r0, r6
 80095b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095bc:	bfba      	itte	lt
 80095be:	461c      	movlt	r4, r3
 80095c0:	2501      	movlt	r5, #1
 80095c2:	2500      	movge	r5, #0
 80095c4:	f7ff fd48 	bl	8009058 <_Balloc>
 80095c8:	4602      	mov	r2, r0
 80095ca:	b918      	cbnz	r0, 80095d4 <__mdiff+0x60>
 80095cc:	4b31      	ldr	r3, [pc, #196]	@ (8009694 <__mdiff+0x120>)
 80095ce:	f240 2145 	movw	r1, #581	@ 0x245
 80095d2:	e7e3      	b.n	800959c <__mdiff+0x28>
 80095d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095d8:	6926      	ldr	r6, [r4, #16]
 80095da:	60c5      	str	r5, [r0, #12]
 80095dc:	f109 0310 	add.w	r3, r9, #16
 80095e0:	f109 0514 	add.w	r5, r9, #20
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	f100 0b14 	add.w	fp, r0, #20
 80095ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	46d9      	mov	r9, fp
 80095f8:	f04f 0c00 	mov.w	ip, #0
 80095fc:	9b01      	ldr	r3, [sp, #4]
 80095fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009602:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	fa1f f38a 	uxth.w	r3, sl
 800960c:	4619      	mov	r1, r3
 800960e:	b283      	uxth	r3, r0
 8009610:	1acb      	subs	r3, r1, r3
 8009612:	0c00      	lsrs	r0, r0, #16
 8009614:	4463      	add	r3, ip
 8009616:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800961a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800961e:	b29b      	uxth	r3, r3
 8009620:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009624:	4576      	cmp	r6, lr
 8009626:	f849 3b04 	str.w	r3, [r9], #4
 800962a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800962e:	d8e5      	bhi.n	80095fc <__mdiff+0x88>
 8009630:	1b33      	subs	r3, r6, r4
 8009632:	3b15      	subs	r3, #21
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	3415      	adds	r4, #21
 800963a:	3304      	adds	r3, #4
 800963c:	42a6      	cmp	r6, r4
 800963e:	bf38      	it	cc
 8009640:	2304      	movcc	r3, #4
 8009642:	441d      	add	r5, r3
 8009644:	445b      	add	r3, fp
 8009646:	461e      	mov	r6, r3
 8009648:	462c      	mov	r4, r5
 800964a:	4544      	cmp	r4, r8
 800964c:	d30e      	bcc.n	800966c <__mdiff+0xf8>
 800964e:	f108 0103 	add.w	r1, r8, #3
 8009652:	1b49      	subs	r1, r1, r5
 8009654:	f021 0103 	bic.w	r1, r1, #3
 8009658:	3d03      	subs	r5, #3
 800965a:	45a8      	cmp	r8, r5
 800965c:	bf38      	it	cc
 800965e:	2100      	movcc	r1, #0
 8009660:	440b      	add	r3, r1
 8009662:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009666:	b191      	cbz	r1, 800968e <__mdiff+0x11a>
 8009668:	6117      	str	r7, [r2, #16]
 800966a:	e79d      	b.n	80095a8 <__mdiff+0x34>
 800966c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009670:	46e6      	mov	lr, ip
 8009672:	0c08      	lsrs	r0, r1, #16
 8009674:	fa1c fc81 	uxtah	ip, ip, r1
 8009678:	4471      	add	r1, lr
 800967a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800967e:	b289      	uxth	r1, r1
 8009680:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009684:	f846 1b04 	str.w	r1, [r6], #4
 8009688:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800968c:	e7dd      	b.n	800964a <__mdiff+0xd6>
 800968e:	3f01      	subs	r7, #1
 8009690:	e7e7      	b.n	8009662 <__mdiff+0xee>
 8009692:	bf00      	nop
 8009694:	0800a3b0 	.word	0x0800a3b0
 8009698:	0800a3c1 	.word	0x0800a3c1

0800969c <__d2b>:
 800969c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	460f      	mov	r7, r1
 80096a2:	2101      	movs	r1, #1
 80096a4:	ec59 8b10 	vmov	r8, r9, d0
 80096a8:	4616      	mov	r6, r2
 80096aa:	f7ff fcd5 	bl	8009058 <_Balloc>
 80096ae:	4604      	mov	r4, r0
 80096b0:	b930      	cbnz	r0, 80096c0 <__d2b+0x24>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b23      	ldr	r3, [pc, #140]	@ (8009744 <__d2b+0xa8>)
 80096b6:	4824      	ldr	r0, [pc, #144]	@ (8009748 <__d2b+0xac>)
 80096b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80096bc:	f7fe fd54 	bl	8008168 <__assert_func>
 80096c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c8:	b10d      	cbz	r5, 80096ce <__d2b+0x32>
 80096ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	f1b8 0300 	subs.w	r3, r8, #0
 80096d4:	d023      	beq.n	800971e <__d2b+0x82>
 80096d6:	4668      	mov	r0, sp
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	f7ff fd84 	bl	80091e6 <__lo0bits>
 80096de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096e2:	b1d0      	cbz	r0, 800971a <__d2b+0x7e>
 80096e4:	f1c0 0320 	rsb	r3, r0, #32
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	430b      	orrs	r3, r1
 80096ee:	40c2      	lsrs	r2, r0
 80096f0:	6163      	str	r3, [r4, #20]
 80096f2:	9201      	str	r2, [sp, #4]
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf0c      	ite	eq
 80096fc:	2201      	moveq	r2, #1
 80096fe:	2202      	movne	r2, #2
 8009700:	6122      	str	r2, [r4, #16]
 8009702:	b1a5      	cbz	r5, 800972e <__d2b+0x92>
 8009704:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009708:	4405      	add	r5, r0
 800970a:	603d      	str	r5, [r7, #0]
 800970c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009710:	6030      	str	r0, [r6, #0]
 8009712:	4620      	mov	r0, r4
 8009714:	b003      	add	sp, #12
 8009716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800971a:	6161      	str	r1, [r4, #20]
 800971c:	e7ea      	b.n	80096f4 <__d2b+0x58>
 800971e:	a801      	add	r0, sp, #4
 8009720:	f7ff fd61 	bl	80091e6 <__lo0bits>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	3020      	adds	r0, #32
 800972a:	2201      	movs	r2, #1
 800972c:	e7e8      	b.n	8009700 <__d2b+0x64>
 800972e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009732:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009736:	6038      	str	r0, [r7, #0]
 8009738:	6918      	ldr	r0, [r3, #16]
 800973a:	f7ff fd35 	bl	80091a8 <__hi0bits>
 800973e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009742:	e7e5      	b.n	8009710 <__d2b+0x74>
 8009744:	0800a3b0 	.word	0x0800a3b0
 8009748:	0800a3c1 	.word	0x0800a3c1

0800974c <__ssputs_r>:
 800974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	688e      	ldr	r6, [r1, #8]
 8009752:	461f      	mov	r7, r3
 8009754:	42be      	cmp	r6, r7
 8009756:	680b      	ldr	r3, [r1, #0]
 8009758:	4682      	mov	sl, r0
 800975a:	460c      	mov	r4, r1
 800975c:	4690      	mov	r8, r2
 800975e:	d82d      	bhi.n	80097bc <__ssputs_r+0x70>
 8009760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009768:	d026      	beq.n	80097b8 <__ssputs_r+0x6c>
 800976a:	6965      	ldr	r5, [r4, #20]
 800976c:	6909      	ldr	r1, [r1, #16]
 800976e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009772:	eba3 0901 	sub.w	r9, r3, r1
 8009776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800977a:	1c7b      	adds	r3, r7, #1
 800977c:	444b      	add	r3, r9
 800977e:	106d      	asrs	r5, r5, #1
 8009780:	429d      	cmp	r5, r3
 8009782:	bf38      	it	cc
 8009784:	461d      	movcc	r5, r3
 8009786:	0553      	lsls	r3, r2, #21
 8009788:	d527      	bpl.n	80097da <__ssputs_r+0x8e>
 800978a:	4629      	mov	r1, r5
 800978c:	f7ff fbd8 	bl	8008f40 <_malloc_r>
 8009790:	4606      	mov	r6, r0
 8009792:	b360      	cbz	r0, 80097ee <__ssputs_r+0xa2>
 8009794:	6921      	ldr	r1, [r4, #16]
 8009796:	464a      	mov	r2, r9
 8009798:	f000 fa18 	bl	8009bcc <memcpy>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	6126      	str	r6, [r4, #16]
 80097aa:	6165      	str	r5, [r4, #20]
 80097ac:	444e      	add	r6, r9
 80097ae:	eba5 0509 	sub.w	r5, r5, r9
 80097b2:	6026      	str	r6, [r4, #0]
 80097b4:	60a5      	str	r5, [r4, #8]
 80097b6:	463e      	mov	r6, r7
 80097b8:	42be      	cmp	r6, r7
 80097ba:	d900      	bls.n	80097be <__ssputs_r+0x72>
 80097bc:	463e      	mov	r6, r7
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	4632      	mov	r2, r6
 80097c2:	4641      	mov	r1, r8
 80097c4:	f000 f9d8 	bl	8009b78 <memmove>
 80097c8:	68a3      	ldr	r3, [r4, #8]
 80097ca:	1b9b      	subs	r3, r3, r6
 80097cc:	60a3      	str	r3, [r4, #8]
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	4433      	add	r3, r6
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	2000      	movs	r0, #0
 80097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097da:	462a      	mov	r2, r5
 80097dc:	f000 fa31 	bl	8009c42 <_realloc_r>
 80097e0:	4606      	mov	r6, r0
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d1e0      	bne.n	80097a8 <__ssputs_r+0x5c>
 80097e6:	6921      	ldr	r1, [r4, #16]
 80097e8:	4650      	mov	r0, sl
 80097ea:	f7ff fb35 	bl	8008e58 <_free_r>
 80097ee:	230c      	movs	r3, #12
 80097f0:	f8ca 3000 	str.w	r3, [sl]
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	e7e9      	b.n	80097d6 <__ssputs_r+0x8a>
	...

08009804 <_svfiprintf_r>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4698      	mov	r8, r3
 800980a:	898b      	ldrh	r3, [r1, #12]
 800980c:	061b      	lsls	r3, r3, #24
 800980e:	b09d      	sub	sp, #116	@ 0x74
 8009810:	4607      	mov	r7, r0
 8009812:	460d      	mov	r5, r1
 8009814:	4614      	mov	r4, r2
 8009816:	d510      	bpl.n	800983a <_svfiprintf_r+0x36>
 8009818:	690b      	ldr	r3, [r1, #16]
 800981a:	b973      	cbnz	r3, 800983a <_svfiprintf_r+0x36>
 800981c:	2140      	movs	r1, #64	@ 0x40
 800981e:	f7ff fb8f 	bl	8008f40 <_malloc_r>
 8009822:	6028      	str	r0, [r5, #0]
 8009824:	6128      	str	r0, [r5, #16]
 8009826:	b930      	cbnz	r0, 8009836 <_svfiprintf_r+0x32>
 8009828:	230c      	movs	r3, #12
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	f04f 30ff 	mov.w	r0, #4294967295
 8009830:	b01d      	add	sp, #116	@ 0x74
 8009832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009836:	2340      	movs	r3, #64	@ 0x40
 8009838:	616b      	str	r3, [r5, #20]
 800983a:	2300      	movs	r3, #0
 800983c:	9309      	str	r3, [sp, #36]	@ 0x24
 800983e:	2320      	movs	r3, #32
 8009840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009844:	f8cd 800c 	str.w	r8, [sp, #12]
 8009848:	2330      	movs	r3, #48	@ 0x30
 800984a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099e8 <_svfiprintf_r+0x1e4>
 800984e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009852:	f04f 0901 	mov.w	r9, #1
 8009856:	4623      	mov	r3, r4
 8009858:	469a      	mov	sl, r3
 800985a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800985e:	b10a      	cbz	r2, 8009864 <_svfiprintf_r+0x60>
 8009860:	2a25      	cmp	r2, #37	@ 0x25
 8009862:	d1f9      	bne.n	8009858 <_svfiprintf_r+0x54>
 8009864:	ebba 0b04 	subs.w	fp, sl, r4
 8009868:	d00b      	beq.n	8009882 <_svfiprintf_r+0x7e>
 800986a:	465b      	mov	r3, fp
 800986c:	4622      	mov	r2, r4
 800986e:	4629      	mov	r1, r5
 8009870:	4638      	mov	r0, r7
 8009872:	f7ff ff6b 	bl	800974c <__ssputs_r>
 8009876:	3001      	adds	r0, #1
 8009878:	f000 80a7 	beq.w	80099ca <_svfiprintf_r+0x1c6>
 800987c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800987e:	445a      	add	r2, fp
 8009880:	9209      	str	r2, [sp, #36]	@ 0x24
 8009882:	f89a 3000 	ldrb.w	r3, [sl]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 809f 	beq.w	80099ca <_svfiprintf_r+0x1c6>
 800988c:	2300      	movs	r3, #0
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009896:	f10a 0a01 	add.w	sl, sl, #1
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098a4:	4654      	mov	r4, sl
 80098a6:	2205      	movs	r2, #5
 80098a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ac:	484e      	ldr	r0, [pc, #312]	@ (80099e8 <_svfiprintf_r+0x1e4>)
 80098ae:	f7f6 fc8f 	bl	80001d0 <memchr>
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	b9d8      	cbnz	r0, 80098ee <_svfiprintf_r+0xea>
 80098b6:	06d0      	lsls	r0, r2, #27
 80098b8:	bf44      	itt	mi
 80098ba:	2320      	movmi	r3, #32
 80098bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c0:	0711      	lsls	r1, r2, #28
 80098c2:	bf44      	itt	mi
 80098c4:	232b      	movmi	r3, #43	@ 0x2b
 80098c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ca:	f89a 3000 	ldrb.w	r3, [sl]
 80098ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d0:	d015      	beq.n	80098fe <_svfiprintf_r+0xfa>
 80098d2:	9a07      	ldr	r2, [sp, #28]
 80098d4:	4654      	mov	r4, sl
 80098d6:	2000      	movs	r0, #0
 80098d8:	f04f 0c0a 	mov.w	ip, #10
 80098dc:	4621      	mov	r1, r4
 80098de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e2:	3b30      	subs	r3, #48	@ 0x30
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d94b      	bls.n	8009980 <_svfiprintf_r+0x17c>
 80098e8:	b1b0      	cbz	r0, 8009918 <_svfiprintf_r+0x114>
 80098ea:	9207      	str	r2, [sp, #28]
 80098ec:	e014      	b.n	8009918 <_svfiprintf_r+0x114>
 80098ee:	eba0 0308 	sub.w	r3, r0, r8
 80098f2:	fa09 f303 	lsl.w	r3, r9, r3
 80098f6:	4313      	orrs	r3, r2
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	46a2      	mov	sl, r4
 80098fc:	e7d2      	b.n	80098a4 <_svfiprintf_r+0xa0>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	1d19      	adds	r1, r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	9103      	str	r1, [sp, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfbb      	ittet	lt
 800990a:	425b      	neglt	r3, r3
 800990c:	f042 0202 	orrlt.w	r2, r2, #2
 8009910:	9307      	strge	r3, [sp, #28]
 8009912:	9307      	strlt	r3, [sp, #28]
 8009914:	bfb8      	it	lt
 8009916:	9204      	strlt	r2, [sp, #16]
 8009918:	7823      	ldrb	r3, [r4, #0]
 800991a:	2b2e      	cmp	r3, #46	@ 0x2e
 800991c:	d10a      	bne.n	8009934 <_svfiprintf_r+0x130>
 800991e:	7863      	ldrb	r3, [r4, #1]
 8009920:	2b2a      	cmp	r3, #42	@ 0x2a
 8009922:	d132      	bne.n	800998a <_svfiprintf_r+0x186>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	9203      	str	r2, [sp, #12]
 800992c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009930:	3402      	adds	r4, #2
 8009932:	9305      	str	r3, [sp, #20]
 8009934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099f8 <_svfiprintf_r+0x1f4>
 8009938:	7821      	ldrb	r1, [r4, #0]
 800993a:	2203      	movs	r2, #3
 800993c:	4650      	mov	r0, sl
 800993e:	f7f6 fc47 	bl	80001d0 <memchr>
 8009942:	b138      	cbz	r0, 8009954 <_svfiprintf_r+0x150>
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	eba0 000a 	sub.w	r0, r0, sl
 800994a:	2240      	movs	r2, #64	@ 0x40
 800994c:	4082      	lsls	r2, r0
 800994e:	4313      	orrs	r3, r2
 8009950:	3401      	adds	r4, #1
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009958:	4824      	ldr	r0, [pc, #144]	@ (80099ec <_svfiprintf_r+0x1e8>)
 800995a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800995e:	2206      	movs	r2, #6
 8009960:	f7f6 fc36 	bl	80001d0 <memchr>
 8009964:	2800      	cmp	r0, #0
 8009966:	d036      	beq.n	80099d6 <_svfiprintf_r+0x1d2>
 8009968:	4b21      	ldr	r3, [pc, #132]	@ (80099f0 <_svfiprintf_r+0x1ec>)
 800996a:	bb1b      	cbnz	r3, 80099b4 <_svfiprintf_r+0x1b0>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	3307      	adds	r3, #7
 8009970:	f023 0307 	bic.w	r3, r3, #7
 8009974:	3308      	adds	r3, #8
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997a:	4433      	add	r3, r6
 800997c:	9309      	str	r3, [sp, #36]	@ 0x24
 800997e:	e76a      	b.n	8009856 <_svfiprintf_r+0x52>
 8009980:	fb0c 3202 	mla	r2, ip, r2, r3
 8009984:	460c      	mov	r4, r1
 8009986:	2001      	movs	r0, #1
 8009988:	e7a8      	b.n	80098dc <_svfiprintf_r+0xd8>
 800998a:	2300      	movs	r3, #0
 800998c:	3401      	adds	r4, #1
 800998e:	9305      	str	r3, [sp, #20]
 8009990:	4619      	mov	r1, r3
 8009992:	f04f 0c0a 	mov.w	ip, #10
 8009996:	4620      	mov	r0, r4
 8009998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999c:	3a30      	subs	r2, #48	@ 0x30
 800999e:	2a09      	cmp	r2, #9
 80099a0:	d903      	bls.n	80099aa <_svfiprintf_r+0x1a6>
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0c6      	beq.n	8009934 <_svfiprintf_r+0x130>
 80099a6:	9105      	str	r1, [sp, #20]
 80099a8:	e7c4      	b.n	8009934 <_svfiprintf_r+0x130>
 80099aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ae:	4604      	mov	r4, r0
 80099b0:	2301      	movs	r3, #1
 80099b2:	e7f0      	b.n	8009996 <_svfiprintf_r+0x192>
 80099b4:	ab03      	add	r3, sp, #12
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	462a      	mov	r2, r5
 80099ba:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <_svfiprintf_r+0x1f0>)
 80099bc:	a904      	add	r1, sp, #16
 80099be:	4638      	mov	r0, r7
 80099c0:	f7fd fe60 	bl	8007684 <_printf_float>
 80099c4:	1c42      	adds	r2, r0, #1
 80099c6:	4606      	mov	r6, r0
 80099c8:	d1d6      	bne.n	8009978 <_svfiprintf_r+0x174>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	065b      	lsls	r3, r3, #25
 80099ce:	f53f af2d 	bmi.w	800982c <_svfiprintf_r+0x28>
 80099d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099d4:	e72c      	b.n	8009830 <_svfiprintf_r+0x2c>
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	462a      	mov	r2, r5
 80099dc:	4b05      	ldr	r3, [pc, #20]	@ (80099f4 <_svfiprintf_r+0x1f0>)
 80099de:	a904      	add	r1, sp, #16
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7fe f8e7 	bl	8007bb4 <_printf_i>
 80099e6:	e7ed      	b.n	80099c4 <_svfiprintf_r+0x1c0>
 80099e8:	0800a41a 	.word	0x0800a41a
 80099ec:	0800a424 	.word	0x0800a424
 80099f0:	08007685 	.word	0x08007685
 80099f4:	0800974d 	.word	0x0800974d
 80099f8:	0800a420 	.word	0x0800a420

080099fc <__sflush_r>:
 80099fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a04:	0716      	lsls	r6, r2, #28
 8009a06:	4605      	mov	r5, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	d454      	bmi.n	8009ab6 <__sflush_r+0xba>
 8009a0c:	684b      	ldr	r3, [r1, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	dc02      	bgt.n	8009a18 <__sflush_r+0x1c>
 8009a12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dd48      	ble.n	8009aaa <__sflush_r+0xae>
 8009a18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	d045      	beq.n	8009aaa <__sflush_r+0xae>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a24:	682f      	ldr	r7, [r5, #0]
 8009a26:	6a21      	ldr	r1, [r4, #32]
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	d030      	beq.n	8009a8e <__sflush_r+0x92>
 8009a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	0759      	lsls	r1, r3, #29
 8009a32:	d505      	bpl.n	8009a40 <__sflush_r+0x44>
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	1ad2      	subs	r2, r2, r3
 8009a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a3a:	b10b      	cbz	r3, 8009a40 <__sflush_r+0x44>
 8009a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a3e:	1ad2      	subs	r2, r2, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a44:	6a21      	ldr	r1, [r4, #32]
 8009a46:	4628      	mov	r0, r5
 8009a48:	47b0      	blx	r6
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	d106      	bne.n	8009a5e <__sflush_r+0x62>
 8009a50:	6829      	ldr	r1, [r5, #0]
 8009a52:	291d      	cmp	r1, #29
 8009a54:	d82b      	bhi.n	8009aae <__sflush_r+0xb2>
 8009a56:	4a2a      	ldr	r2, [pc, #168]	@ (8009b00 <__sflush_r+0x104>)
 8009a58:	40ca      	lsrs	r2, r1
 8009a5a:	07d6      	lsls	r6, r2, #31
 8009a5c:	d527      	bpl.n	8009aae <__sflush_r+0xb2>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	6062      	str	r2, [r4, #4]
 8009a62:	04d9      	lsls	r1, r3, #19
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	d504      	bpl.n	8009a74 <__sflush_r+0x78>
 8009a6a:	1c42      	adds	r2, r0, #1
 8009a6c:	d101      	bne.n	8009a72 <__sflush_r+0x76>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b903      	cbnz	r3, 8009a74 <__sflush_r+0x78>
 8009a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a76:	602f      	str	r7, [r5, #0]
 8009a78:	b1b9      	cbz	r1, 8009aaa <__sflush_r+0xae>
 8009a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a7e:	4299      	cmp	r1, r3
 8009a80:	d002      	beq.n	8009a88 <__sflush_r+0x8c>
 8009a82:	4628      	mov	r0, r5
 8009a84:	f7ff f9e8 	bl	8008e58 <_free_r>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a8c:	e00d      	b.n	8009aaa <__sflush_r+0xae>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4628      	mov	r0, r5
 8009a92:	47b0      	blx	r6
 8009a94:	4602      	mov	r2, r0
 8009a96:	1c50      	adds	r0, r2, #1
 8009a98:	d1c9      	bne.n	8009a2e <__sflush_r+0x32>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0c6      	beq.n	8009a2e <__sflush_r+0x32>
 8009aa0:	2b1d      	cmp	r3, #29
 8009aa2:	d001      	beq.n	8009aa8 <__sflush_r+0xac>
 8009aa4:	2b16      	cmp	r3, #22
 8009aa6:	d11e      	bne.n	8009ae6 <__sflush_r+0xea>
 8009aa8:	602f      	str	r7, [r5, #0]
 8009aaa:	2000      	movs	r0, #0
 8009aac:	e022      	b.n	8009af4 <__sflush_r+0xf8>
 8009aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab2:	b21b      	sxth	r3, r3
 8009ab4:	e01b      	b.n	8009aee <__sflush_r+0xf2>
 8009ab6:	690f      	ldr	r7, [r1, #16]
 8009ab8:	2f00      	cmp	r7, #0
 8009aba:	d0f6      	beq.n	8009aaa <__sflush_r+0xae>
 8009abc:	0793      	lsls	r3, r2, #30
 8009abe:	680e      	ldr	r6, [r1, #0]
 8009ac0:	bf08      	it	eq
 8009ac2:	694b      	ldreq	r3, [r1, #20]
 8009ac4:	600f      	str	r7, [r1, #0]
 8009ac6:	bf18      	it	ne
 8009ac8:	2300      	movne	r3, #0
 8009aca:	eba6 0807 	sub.w	r8, r6, r7
 8009ace:	608b      	str	r3, [r1, #8]
 8009ad0:	f1b8 0f00 	cmp.w	r8, #0
 8009ad4:	dde9      	ble.n	8009aaa <__sflush_r+0xae>
 8009ad6:	6a21      	ldr	r1, [r4, #32]
 8009ad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ada:	4643      	mov	r3, r8
 8009adc:	463a      	mov	r2, r7
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b0      	blx	r6
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	dc08      	bgt.n	8009af8 <__sflush_r+0xfc>
 8009ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	4407      	add	r7, r0
 8009afa:	eba8 0800 	sub.w	r8, r8, r0
 8009afe:	e7e7      	b.n	8009ad0 <__sflush_r+0xd4>
 8009b00:	20400001 	.word	0x20400001

08009b04 <_fflush_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	690b      	ldr	r3, [r1, #16]
 8009b08:	4605      	mov	r5, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b913      	cbnz	r3, 8009b14 <_fflush_r+0x10>
 8009b0e:	2500      	movs	r5, #0
 8009b10:	4628      	mov	r0, r5
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	b118      	cbz	r0, 8009b1e <_fflush_r+0x1a>
 8009b16:	6a03      	ldr	r3, [r0, #32]
 8009b18:	b90b      	cbnz	r3, 8009b1e <_fflush_r+0x1a>
 8009b1a:	f7fe f9f5 	bl	8007f08 <__sinit>
 8009b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0f3      	beq.n	8009b0e <_fflush_r+0xa>
 8009b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b28:	07d0      	lsls	r0, r2, #31
 8009b2a:	d404      	bmi.n	8009b36 <_fflush_r+0x32>
 8009b2c:	0599      	lsls	r1, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_fflush_r+0x32>
 8009b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b32:	f7fe fb16 	bl	8008162 <__retarget_lock_acquire_recursive>
 8009b36:	4628      	mov	r0, r5
 8009b38:	4621      	mov	r1, r4
 8009b3a:	f7ff ff5f 	bl	80099fc <__sflush_r>
 8009b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b40:	07da      	lsls	r2, r3, #31
 8009b42:	4605      	mov	r5, r0
 8009b44:	d4e4      	bmi.n	8009b10 <_fflush_r+0xc>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	059b      	lsls	r3, r3, #22
 8009b4a:	d4e1      	bmi.n	8009b10 <_fflush_r+0xc>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b4e:	f7fe fb09 	bl	8008164 <__retarget_lock_release_recursive>
 8009b52:	e7dd      	b.n	8009b10 <_fflush_r+0xc>

08009b54 <fiprintf>:
 8009b54:	b40e      	push	{r1, r2, r3}
 8009b56:	b503      	push	{r0, r1, lr}
 8009b58:	4601      	mov	r1, r0
 8009b5a:	ab03      	add	r3, sp, #12
 8009b5c:	4805      	ldr	r0, [pc, #20]	@ (8009b74 <fiprintf+0x20>)
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f000 f8d1 	bl	8009d0c <_vfiprintf_r>
 8009b6a:	b002      	add	sp, #8
 8009b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b70:	b003      	add	sp, #12
 8009b72:	4770      	bx	lr
 8009b74:	20000094 	.word	0x20000094

08009b78 <memmove>:
 8009b78:	4288      	cmp	r0, r1
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	eb01 0402 	add.w	r4, r1, r2
 8009b80:	d902      	bls.n	8009b88 <memmove+0x10>
 8009b82:	4284      	cmp	r4, r0
 8009b84:	4623      	mov	r3, r4
 8009b86:	d807      	bhi.n	8009b98 <memmove+0x20>
 8009b88:	1e43      	subs	r3, r0, #1
 8009b8a:	42a1      	cmp	r1, r4
 8009b8c:	d008      	beq.n	8009ba0 <memmove+0x28>
 8009b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b96:	e7f8      	b.n	8009b8a <memmove+0x12>
 8009b98:	4402      	add	r2, r0
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	428a      	cmp	r2, r1
 8009b9e:	d100      	bne.n	8009ba2 <memmove+0x2a>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009baa:	e7f7      	b.n	8009b9c <memmove+0x24>

08009bac <_sbrk_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d06      	ldr	r5, [pc, #24]	@ (8009bc8 <_sbrk_r+0x1c>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f8 fc28 	bl	800240c <_sbrk>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_sbrk_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_sbrk_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	200008fc 	.word	0x200008fc

08009bcc <memcpy>:
 8009bcc:	440a      	add	r2, r1
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd4:	d100      	bne.n	8009bd8 <memcpy+0xc>
 8009bd6:	4770      	bx	lr
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be2:	4291      	cmp	r1, r2
 8009be4:	d1f9      	bne.n	8009bda <memcpy+0xe>
 8009be6:	bd10      	pop	{r4, pc}

08009be8 <abort>:
 8009be8:	b508      	push	{r3, lr}
 8009bea:	2006      	movs	r0, #6
 8009bec:	f000 fa62 	bl	800a0b4 <raise>
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	f7f8 fb93 	bl	800231c <_exit>

08009bf6 <_calloc_r>:
 8009bf6:	b570      	push	{r4, r5, r6, lr}
 8009bf8:	fba1 5402 	umull	r5, r4, r1, r2
 8009bfc:	b934      	cbnz	r4, 8009c0c <_calloc_r+0x16>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7ff f99e 	bl	8008f40 <_malloc_r>
 8009c04:	4606      	mov	r6, r0
 8009c06:	b928      	cbnz	r0, 8009c14 <_calloc_r+0x1e>
 8009c08:	4630      	mov	r0, r6
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	220c      	movs	r2, #12
 8009c0e:	6002      	str	r2, [r0, #0]
 8009c10:	2600      	movs	r6, #0
 8009c12:	e7f9      	b.n	8009c08 <_calloc_r+0x12>
 8009c14:	462a      	mov	r2, r5
 8009c16:	4621      	mov	r1, r4
 8009c18:	f7fe fa25 	bl	8008066 <memset>
 8009c1c:	e7f4      	b.n	8009c08 <_calloc_r+0x12>

08009c1e <__ascii_mbtowc>:
 8009c1e:	b082      	sub	sp, #8
 8009c20:	b901      	cbnz	r1, 8009c24 <__ascii_mbtowc+0x6>
 8009c22:	a901      	add	r1, sp, #4
 8009c24:	b142      	cbz	r2, 8009c38 <__ascii_mbtowc+0x1a>
 8009c26:	b14b      	cbz	r3, 8009c3c <__ascii_mbtowc+0x1e>
 8009c28:	7813      	ldrb	r3, [r2, #0]
 8009c2a:	600b      	str	r3, [r1, #0]
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	1e10      	subs	r0, r2, #0
 8009c30:	bf18      	it	ne
 8009c32:	2001      	movne	r0, #1
 8009c34:	b002      	add	sp, #8
 8009c36:	4770      	bx	lr
 8009c38:	4610      	mov	r0, r2
 8009c3a:	e7fb      	b.n	8009c34 <__ascii_mbtowc+0x16>
 8009c3c:	f06f 0001 	mvn.w	r0, #1
 8009c40:	e7f8      	b.n	8009c34 <__ascii_mbtowc+0x16>

08009c42 <_realloc_r>:
 8009c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	4607      	mov	r7, r0
 8009c48:	4614      	mov	r4, r2
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	b921      	cbnz	r1, 8009c58 <_realloc_r+0x16>
 8009c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c52:	4611      	mov	r1, r2
 8009c54:	f7ff b974 	b.w	8008f40 <_malloc_r>
 8009c58:	b92a      	cbnz	r2, 8009c66 <_realloc_r+0x24>
 8009c5a:	f7ff f8fd 	bl	8008e58 <_free_r>
 8009c5e:	4625      	mov	r5, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c66:	f000 fa41 	bl	800a0ec <_malloc_usable_size_r>
 8009c6a:	4284      	cmp	r4, r0
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	d802      	bhi.n	8009c76 <_realloc_r+0x34>
 8009c70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c74:	d8f4      	bhi.n	8009c60 <_realloc_r+0x1e>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f7ff f961 	bl	8008f40 <_malloc_r>
 8009c7e:	4680      	mov	r8, r0
 8009c80:	b908      	cbnz	r0, 8009c86 <_realloc_r+0x44>
 8009c82:	4645      	mov	r5, r8
 8009c84:	e7ec      	b.n	8009c60 <_realloc_r+0x1e>
 8009c86:	42b4      	cmp	r4, r6
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	bf28      	it	cs
 8009c8e:	4632      	movcs	r2, r6
 8009c90:	f7ff ff9c 	bl	8009bcc <memcpy>
 8009c94:	4629      	mov	r1, r5
 8009c96:	4638      	mov	r0, r7
 8009c98:	f7ff f8de 	bl	8008e58 <_free_r>
 8009c9c:	e7f1      	b.n	8009c82 <_realloc_r+0x40>

08009c9e <__ascii_wctomb>:
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	b141      	cbz	r1, 8009cb6 <__ascii_wctomb+0x18>
 8009ca4:	2aff      	cmp	r2, #255	@ 0xff
 8009ca6:	d904      	bls.n	8009cb2 <__ascii_wctomb+0x14>
 8009ca8:	228a      	movs	r2, #138	@ 0x8a
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	4770      	bx	lr
 8009cb2:	700a      	strb	r2, [r1, #0]
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	4770      	bx	lr

08009cb8 <__sfputc_r>:
 8009cb8:	6893      	ldr	r3, [r2, #8]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	b410      	push	{r4}
 8009cc0:	6093      	str	r3, [r2, #8]
 8009cc2:	da08      	bge.n	8009cd6 <__sfputc_r+0x1e>
 8009cc4:	6994      	ldr	r4, [r2, #24]
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	db01      	blt.n	8009cce <__sfputc_r+0x16>
 8009cca:	290a      	cmp	r1, #10
 8009ccc:	d103      	bne.n	8009cd6 <__sfputc_r+0x1e>
 8009cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd2:	f000 b933 	b.w	8009f3c <__swbuf_r>
 8009cd6:	6813      	ldr	r3, [r2, #0]
 8009cd8:	1c58      	adds	r0, r3, #1
 8009cda:	6010      	str	r0, [r2, #0]
 8009cdc:	7019      	strb	r1, [r3, #0]
 8009cde:	4608      	mov	r0, r1
 8009ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <__sfputs_r>:
 8009ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce8:	4606      	mov	r6, r0
 8009cea:	460f      	mov	r7, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	18d5      	adds	r5, r2, r3
 8009cf0:	42ac      	cmp	r4, r5
 8009cf2:	d101      	bne.n	8009cf8 <__sfputs_r+0x12>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e007      	b.n	8009d08 <__sfputs_r+0x22>
 8009cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfc:	463a      	mov	r2, r7
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff ffda 	bl	8009cb8 <__sfputc_r>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d1f3      	bne.n	8009cf0 <__sfputs_r+0xa>
 8009d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d0c <_vfiprintf_r>:
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	460d      	mov	r5, r1
 8009d12:	b09d      	sub	sp, #116	@ 0x74
 8009d14:	4614      	mov	r4, r2
 8009d16:	4698      	mov	r8, r3
 8009d18:	4606      	mov	r6, r0
 8009d1a:	b118      	cbz	r0, 8009d24 <_vfiprintf_r+0x18>
 8009d1c:	6a03      	ldr	r3, [r0, #32]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <_vfiprintf_r+0x18>
 8009d20:	f7fe f8f2 	bl	8007f08 <__sinit>
 8009d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d405      	bmi.n	8009d36 <_vfiprintf_r+0x2a>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	059a      	lsls	r2, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_vfiprintf_r+0x2a>
 8009d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d32:	f7fe fa16 	bl	8008162 <__retarget_lock_acquire_recursive>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	071b      	lsls	r3, r3, #28
 8009d3a:	d501      	bpl.n	8009d40 <_vfiprintf_r+0x34>
 8009d3c:	692b      	ldr	r3, [r5, #16]
 8009d3e:	b99b      	cbnz	r3, 8009d68 <_vfiprintf_r+0x5c>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 f938 	bl	8009fb8 <__swsetup_r>
 8009d48:	b170      	cbz	r0, 8009d68 <_vfiprintf_r+0x5c>
 8009d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4c:	07dc      	lsls	r4, r3, #31
 8009d4e:	d504      	bpl.n	8009d5a <_vfiprintf_r+0x4e>
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	b01d      	add	sp, #116	@ 0x74
 8009d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	0598      	lsls	r0, r3, #22
 8009d5e:	d4f7      	bmi.n	8009d50 <_vfiprintf_r+0x44>
 8009d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d62:	f7fe f9ff 	bl	8008164 <__retarget_lock_release_recursive>
 8009d66:	e7f3      	b.n	8009d50 <_vfiprintf_r+0x44>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d76:	2330      	movs	r3, #48	@ 0x30
 8009d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f28 <_vfiprintf_r+0x21c>
 8009d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d80:	f04f 0901 	mov.w	r9, #1
 8009d84:	4623      	mov	r3, r4
 8009d86:	469a      	mov	sl, r3
 8009d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d8c:	b10a      	cbz	r2, 8009d92 <_vfiprintf_r+0x86>
 8009d8e:	2a25      	cmp	r2, #37	@ 0x25
 8009d90:	d1f9      	bne.n	8009d86 <_vfiprintf_r+0x7a>
 8009d92:	ebba 0b04 	subs.w	fp, sl, r4
 8009d96:	d00b      	beq.n	8009db0 <_vfiprintf_r+0xa4>
 8009d98:	465b      	mov	r3, fp
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ffa1 	bl	8009ce6 <__sfputs_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	f000 80a7 	beq.w	8009ef8 <_vfiprintf_r+0x1ec>
 8009daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dac:	445a      	add	r2, fp
 8009dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db0:	f89a 3000 	ldrb.w	r3, [sl]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 809f 	beq.w	8009ef8 <_vfiprintf_r+0x1ec>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc4:	f10a 0a01 	add.w	sl, sl, #1
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dd2:	4654      	mov	r4, sl
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dda:	4853      	ldr	r0, [pc, #332]	@ (8009f28 <_vfiprintf_r+0x21c>)
 8009ddc:	f7f6 f9f8 	bl	80001d0 <memchr>
 8009de0:	9a04      	ldr	r2, [sp, #16]
 8009de2:	b9d8      	cbnz	r0, 8009e1c <_vfiprintf_r+0x110>
 8009de4:	06d1      	lsls	r1, r2, #27
 8009de6:	bf44      	itt	mi
 8009de8:	2320      	movmi	r3, #32
 8009dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dee:	0713      	lsls	r3, r2, #28
 8009df0:	bf44      	itt	mi
 8009df2:	232b      	movmi	r3, #43	@ 0x2b
 8009df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009df8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfe:	d015      	beq.n	8009e2c <_vfiprintf_r+0x120>
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	4654      	mov	r4, sl
 8009e04:	2000      	movs	r0, #0
 8009e06:	f04f 0c0a 	mov.w	ip, #10
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e10:	3b30      	subs	r3, #48	@ 0x30
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	d94b      	bls.n	8009eae <_vfiprintf_r+0x1a2>
 8009e16:	b1b0      	cbz	r0, 8009e46 <_vfiprintf_r+0x13a>
 8009e18:	9207      	str	r2, [sp, #28]
 8009e1a:	e014      	b.n	8009e46 <_vfiprintf_r+0x13a>
 8009e1c:	eba0 0308 	sub.w	r3, r0, r8
 8009e20:	fa09 f303 	lsl.w	r3, r9, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	46a2      	mov	sl, r4
 8009e2a:	e7d2      	b.n	8009dd2 <_vfiprintf_r+0xc6>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	1d19      	adds	r1, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9103      	str	r1, [sp, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfbb      	ittet	lt
 8009e38:	425b      	neglt	r3, r3
 8009e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e3e:	9307      	strge	r3, [sp, #28]
 8009e40:	9307      	strlt	r3, [sp, #28]
 8009e42:	bfb8      	it	lt
 8009e44:	9204      	strlt	r2, [sp, #16]
 8009e46:	7823      	ldrb	r3, [r4, #0]
 8009e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e4a:	d10a      	bne.n	8009e62 <_vfiprintf_r+0x156>
 8009e4c:	7863      	ldrb	r3, [r4, #1]
 8009e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e50:	d132      	bne.n	8009eb8 <_vfiprintf_r+0x1ac>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	1d1a      	adds	r2, r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	9203      	str	r2, [sp, #12]
 8009e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e5e:	3402      	adds	r4, #2
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f38 <_vfiprintf_r+0x22c>
 8009e66:	7821      	ldrb	r1, [r4, #0]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f7f6 f9b0 	bl	80001d0 <memchr>
 8009e70:	b138      	cbz	r0, 8009e82 <_vfiprintf_r+0x176>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	eba0 000a 	sub.w	r0, r0, sl
 8009e78:	2240      	movs	r2, #64	@ 0x40
 8009e7a:	4082      	lsls	r2, r0
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	3401      	adds	r4, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e86:	4829      	ldr	r0, [pc, #164]	@ (8009f2c <_vfiprintf_r+0x220>)
 8009e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e8c:	2206      	movs	r2, #6
 8009e8e:	f7f6 f99f 	bl	80001d0 <memchr>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d03f      	beq.n	8009f16 <_vfiprintf_r+0x20a>
 8009e96:	4b26      	ldr	r3, [pc, #152]	@ (8009f30 <_vfiprintf_r+0x224>)
 8009e98:	bb1b      	cbnz	r3, 8009ee2 <_vfiprintf_r+0x1d6>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea8:	443b      	add	r3, r7
 8009eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eac:	e76a      	b.n	8009d84 <_vfiprintf_r+0x78>
 8009eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	e7a8      	b.n	8009e0a <_vfiprintf_r+0xfe>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	3401      	adds	r4, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f04f 0c0a 	mov.w	ip, #10
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eca:	3a30      	subs	r2, #48	@ 0x30
 8009ecc:	2a09      	cmp	r2, #9
 8009ece:	d903      	bls.n	8009ed8 <_vfiprintf_r+0x1cc>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0c6      	beq.n	8009e62 <_vfiprintf_r+0x156>
 8009ed4:	9105      	str	r1, [sp, #20]
 8009ed6:	e7c4      	b.n	8009e62 <_vfiprintf_r+0x156>
 8009ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009edc:	4604      	mov	r4, r0
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7f0      	b.n	8009ec4 <_vfiprintf_r+0x1b8>
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4b12      	ldr	r3, [pc, #72]	@ (8009f34 <_vfiprintf_r+0x228>)
 8009eea:	a904      	add	r1, sp, #16
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7fd fbc9 	bl	8007684 <_printf_float>
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	1c78      	adds	r0, r7, #1
 8009ef6:	d1d6      	bne.n	8009ea6 <_vfiprintf_r+0x19a>
 8009ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d405      	bmi.n	8009f0a <_vfiprintf_r+0x1fe>
 8009efe:	89ab      	ldrh	r3, [r5, #12]
 8009f00:	059a      	lsls	r2, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <_vfiprintf_r+0x1fe>
 8009f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f06:	f7fe f92d 	bl	8008164 <__retarget_lock_release_recursive>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	065b      	lsls	r3, r3, #25
 8009f0e:	f53f af1f 	bmi.w	8009d50 <_vfiprintf_r+0x44>
 8009f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f14:	e71e      	b.n	8009d54 <_vfiprintf_r+0x48>
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4b05      	ldr	r3, [pc, #20]	@ (8009f34 <_vfiprintf_r+0x228>)
 8009f1e:	a904      	add	r1, sp, #16
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fd fe47 	bl	8007bb4 <_printf_i>
 8009f26:	e7e4      	b.n	8009ef2 <_vfiprintf_r+0x1e6>
 8009f28:	0800a41a 	.word	0x0800a41a
 8009f2c:	0800a424 	.word	0x0800a424
 8009f30:	08007685 	.word	0x08007685
 8009f34:	08009ce7 	.word	0x08009ce7
 8009f38:	0800a420 	.word	0x0800a420

08009f3c <__swbuf_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	460e      	mov	r6, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	4605      	mov	r5, r0
 8009f44:	b118      	cbz	r0, 8009f4e <__swbuf_r+0x12>
 8009f46:	6a03      	ldr	r3, [r0, #32]
 8009f48:	b90b      	cbnz	r3, 8009f4e <__swbuf_r+0x12>
 8009f4a:	f7fd ffdd 	bl	8007f08 <__sinit>
 8009f4e:	69a3      	ldr	r3, [r4, #24]
 8009f50:	60a3      	str	r3, [r4, #8]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	071a      	lsls	r2, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <__swbuf_r+0x20>
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	b943      	cbnz	r3, 8009f6e <__swbuf_r+0x32>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f82a 	bl	8009fb8 <__swsetup_r>
 8009f64:	b118      	cbz	r0, 8009f6e <__swbuf_r+0x32>
 8009f66:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	1a98      	subs	r0, r3, r2
 8009f74:	6963      	ldr	r3, [r4, #20]
 8009f76:	b2f6      	uxtb	r6, r6
 8009f78:	4283      	cmp	r3, r0
 8009f7a:	4637      	mov	r7, r6
 8009f7c:	dc05      	bgt.n	8009f8a <__swbuf_r+0x4e>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f7ff fdbf 	bl	8009b04 <_fflush_r>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d1ed      	bne.n	8009f66 <__swbuf_r+0x2a>
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	60a3      	str	r3, [r4, #8]
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	701e      	strb	r6, [r3, #0]
 8009f98:	6962      	ldr	r2, [r4, #20]
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d004      	beq.n	8009faa <__swbuf_r+0x6e>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	07db      	lsls	r3, r3, #31
 8009fa4:	d5e1      	bpl.n	8009f6a <__swbuf_r+0x2e>
 8009fa6:	2e0a      	cmp	r6, #10
 8009fa8:	d1df      	bne.n	8009f6a <__swbuf_r+0x2e>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f7ff fda9 	bl	8009b04 <_fflush_r>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0d9      	beq.n	8009f6a <__swbuf_r+0x2e>
 8009fb6:	e7d6      	b.n	8009f66 <__swbuf_r+0x2a>

08009fb8 <__swsetup_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4b29      	ldr	r3, [pc, #164]	@ (800a060 <__swsetup_r+0xa8>)
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	b118      	cbz	r0, 8009fcc <__swsetup_r+0x14>
 8009fc4:	6a03      	ldr	r3, [r0, #32]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <__swsetup_r+0x14>
 8009fc8:	f7fd ff9e 	bl	8007f08 <__sinit>
 8009fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd0:	0719      	lsls	r1, r3, #28
 8009fd2:	d422      	bmi.n	800a01a <__swsetup_r+0x62>
 8009fd4:	06da      	lsls	r2, r3, #27
 8009fd6:	d407      	bmi.n	8009fe8 <__swsetup_r+0x30>
 8009fd8:	2209      	movs	r2, #9
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	e033      	b.n	800a050 <__swsetup_r+0x98>
 8009fe8:	0758      	lsls	r0, r3, #29
 8009fea:	d512      	bpl.n	800a012 <__swsetup_r+0x5a>
 8009fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fee:	b141      	cbz	r1, 800a002 <__swsetup_r+0x4a>
 8009ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff4:	4299      	cmp	r1, r3
 8009ff6:	d002      	beq.n	8009ffe <__swsetup_r+0x46>
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f7fe ff2d 	bl	8008e58 <_free_r>
 8009ffe:	2300      	movs	r3, #0
 800a000:	6363      	str	r3, [r4, #52]	@ 0x34
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	2300      	movs	r3, #0
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	b94b      	cbnz	r3, 800a032 <__swsetup_r+0x7a>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a028:	d003      	beq.n	800a032 <__swsetup_r+0x7a>
 800a02a:	4621      	mov	r1, r4
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 f88b 	bl	800a148 <__smakebuf_r>
 800a032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a036:	f013 0201 	ands.w	r2, r3, #1
 800a03a:	d00a      	beq.n	800a052 <__swsetup_r+0x9a>
 800a03c:	2200      	movs	r2, #0
 800a03e:	60a2      	str	r2, [r4, #8]
 800a040:	6962      	ldr	r2, [r4, #20]
 800a042:	4252      	negs	r2, r2
 800a044:	61a2      	str	r2, [r4, #24]
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	b942      	cbnz	r2, 800a05c <__swsetup_r+0xa4>
 800a04a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a04e:	d1c5      	bne.n	8009fdc <__swsetup_r+0x24>
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	0799      	lsls	r1, r3, #30
 800a054:	bf58      	it	pl
 800a056:	6962      	ldrpl	r2, [r4, #20]
 800a058:	60a2      	str	r2, [r4, #8]
 800a05a:	e7f4      	b.n	800a046 <__swsetup_r+0x8e>
 800a05c:	2000      	movs	r0, #0
 800a05e:	e7f7      	b.n	800a050 <__swsetup_r+0x98>
 800a060:	20000094 	.word	0x20000094

0800a064 <_raise_r>:
 800a064:	291f      	cmp	r1, #31
 800a066:	b538      	push	{r3, r4, r5, lr}
 800a068:	4605      	mov	r5, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	d904      	bls.n	800a078 <_raise_r+0x14>
 800a06e:	2316      	movs	r3, #22
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a07a:	b112      	cbz	r2, 800a082 <_raise_r+0x1e>
 800a07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a080:	b94b      	cbnz	r3, 800a096 <_raise_r+0x32>
 800a082:	4628      	mov	r0, r5
 800a084:	f000 f830 	bl	800a0e8 <_getpid_r>
 800a088:	4622      	mov	r2, r4
 800a08a:	4601      	mov	r1, r0
 800a08c:	4628      	mov	r0, r5
 800a08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a092:	f000 b817 	b.w	800a0c4 <_kill_r>
 800a096:	2b01      	cmp	r3, #1
 800a098:	d00a      	beq.n	800a0b0 <_raise_r+0x4c>
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	d103      	bne.n	800a0a6 <_raise_r+0x42>
 800a09e:	2316      	movs	r3, #22
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	e7e7      	b.n	800a076 <_raise_r+0x12>
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4798      	blx	r3
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	e7e0      	b.n	800a076 <_raise_r+0x12>

0800a0b4 <raise>:
 800a0b4:	4b02      	ldr	r3, [pc, #8]	@ (800a0c0 <raise+0xc>)
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f7ff bfd3 	b.w	800a064 <_raise_r>
 800a0be:	bf00      	nop
 800a0c0:	20000094 	.word	0x20000094

0800a0c4 <_kill_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	@ (800a0e4 <_kill_r+0x20>)
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	f7f8 f913 	bl	80022fc <_kill>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	d102      	bne.n	800a0e0 <_kill_r+0x1c>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b103      	cbz	r3, 800a0e0 <_kill_r+0x1c>
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200008fc 	.word	0x200008fc

0800a0e8 <_getpid_r>:
 800a0e8:	f7f8 b900 	b.w	80022ec <_getpid>

0800a0ec <_malloc_usable_size_r>:
 800a0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f0:	1f18      	subs	r0, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bfbc      	itt	lt
 800a0f6:	580b      	ldrlt	r3, [r1, r0]
 800a0f8:	18c0      	addlt	r0, r0, r3
 800a0fa:	4770      	bx	lr

0800a0fc <__swhatbuf_r>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	460c      	mov	r4, r1
 800a100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a104:	2900      	cmp	r1, #0
 800a106:	b096      	sub	sp, #88	@ 0x58
 800a108:	4615      	mov	r5, r2
 800a10a:	461e      	mov	r6, r3
 800a10c:	da0d      	bge.n	800a12a <__swhatbuf_r+0x2e>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a114:	f04f 0100 	mov.w	r1, #0
 800a118:	bf14      	ite	ne
 800a11a:	2340      	movne	r3, #64	@ 0x40
 800a11c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a120:	2000      	movs	r0, #0
 800a122:	6031      	str	r1, [r6, #0]
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	b016      	add	sp, #88	@ 0x58
 800a128:	bd70      	pop	{r4, r5, r6, pc}
 800a12a:	466a      	mov	r2, sp
 800a12c:	f000 f848 	bl	800a1c0 <_fstat_r>
 800a130:	2800      	cmp	r0, #0
 800a132:	dbec      	blt.n	800a10e <__swhatbuf_r+0x12>
 800a134:	9901      	ldr	r1, [sp, #4]
 800a136:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a13a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a13e:	4259      	negs	r1, r3
 800a140:	4159      	adcs	r1, r3
 800a142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a146:	e7eb      	b.n	800a120 <__swhatbuf_r+0x24>

0800a148 <__smakebuf_r>:
 800a148:	898b      	ldrh	r3, [r1, #12]
 800a14a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a14c:	079d      	lsls	r5, r3, #30
 800a14e:	4606      	mov	r6, r0
 800a150:	460c      	mov	r4, r1
 800a152:	d507      	bpl.n	800a164 <__smakebuf_r+0x1c>
 800a154:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	2301      	movs	r3, #1
 800a15e:	6163      	str	r3, [r4, #20]
 800a160:	b003      	add	sp, #12
 800a162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a164:	ab01      	add	r3, sp, #4
 800a166:	466a      	mov	r2, sp
 800a168:	f7ff ffc8 	bl	800a0fc <__swhatbuf_r>
 800a16c:	9f00      	ldr	r7, [sp, #0]
 800a16e:	4605      	mov	r5, r0
 800a170:	4639      	mov	r1, r7
 800a172:	4630      	mov	r0, r6
 800a174:	f7fe fee4 	bl	8008f40 <_malloc_r>
 800a178:	b948      	cbnz	r0, 800a18e <__smakebuf_r+0x46>
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	059a      	lsls	r2, r3, #22
 800a180:	d4ee      	bmi.n	800a160 <__smakebuf_r+0x18>
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	f043 0302 	orr.w	r3, r3, #2
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	e7e2      	b.n	800a154 <__smakebuf_r+0xc>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	6020      	str	r0, [r4, #0]
 800a192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	9b01      	ldr	r3, [sp, #4]
 800a19a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a19e:	b15b      	cbz	r3, 800a1b8 <__smakebuf_r+0x70>
 800a1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f000 f81d 	bl	800a1e4 <_isatty_r>
 800a1aa:	b128      	cbz	r0, 800a1b8 <__smakebuf_r+0x70>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	431d      	orrs	r5, r3
 800a1bc:	81a5      	strh	r5, [r4, #12]
 800a1be:	e7cf      	b.n	800a160 <__smakebuf_r+0x18>

0800a1c0 <_fstat_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	@ (800a1e0 <_fstat_r+0x20>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	602b      	str	r3, [r5, #0]
 800a1ce:	f7f8 f8f5 	bl	80023bc <_fstat>
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	d102      	bne.n	800a1dc <_fstat_r+0x1c>
 800a1d6:	682b      	ldr	r3, [r5, #0]
 800a1d8:	b103      	cbz	r3, 800a1dc <_fstat_r+0x1c>
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	200008fc 	.word	0x200008fc

0800a1e4 <_isatty_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d06      	ldr	r5, [pc, #24]	@ (800a200 <_isatty_r+0x1c>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	4608      	mov	r0, r1
 800a1ee:	602b      	str	r3, [r5, #0]
 800a1f0:	f7f8 f8f4 	bl	80023dc <_isatty>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d102      	bne.n	800a1fe <_isatty_r+0x1a>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b103      	cbz	r3, 800a1fe <_isatty_r+0x1a>
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	200008fc 	.word	0x200008fc

0800a204 <_init>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr

0800a210 <_fini>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	bf00      	nop
 800a214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a216:	bc08      	pop	{r3}
 800a218:	469e      	mov	lr, r3
 800a21a:	4770      	bx	lr
