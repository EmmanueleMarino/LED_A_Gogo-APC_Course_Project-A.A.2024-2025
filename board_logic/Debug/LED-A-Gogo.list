
LED-A-Gogo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004818  08004818  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004820  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000444  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bf9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002767  00000000  00000000  00018c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0001b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b59  00000000  00000000  0001c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e3b5  00000000  00000000  0001cd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139df  00000000  00000000  0003b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3ee4  00000000  00000000  0004eb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102a01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d0c  00000000  00000000  00102a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  00106750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800478c 	.word	0x0800478c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800478c 	.word	0x0800478c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fca0 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f816 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f948 	bl	8000478 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e8:	f000 f876 	bl	80002d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001ec:	f000 f8b4 	bl	8000358 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001f0:	f000 f920 	bl	8000434 <MX_USB_PCD_Init>
  MX_UART5_Init();
 80001f4:	f000 f8ee 	bl	80003d4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <main+0x30>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <main+0x34>)
 80001fe:	f003 f87f 	bl	8003300 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000202:	bf00      	nop
 8000204:	e7fd      	b.n	8000202 <main+0x2a>
 8000206:	bf00      	nop
 8000208:	2000043c 	.word	0x2000043c
 800020c:	200000e0 	.word	0x200000e0

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09e      	sub	sp, #120	@ 0x78
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f004 fa87 	bl	8004732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	223c      	movs	r2, #60	@ 0x3c
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f004 fa79 	bl	8004732 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000240:	2303      	movs	r3, #3
 8000242:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000244:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000248:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000260:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000264:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f9d8 	bl	8001620 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000276:	f000 fa6d 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000290:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000294:	2101      	movs	r1, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f9d0 	bl	800263c <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a2:	f000 fa57 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <SystemClock_Config+0xc4>)
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fbd0 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002c6:	f000 fa45 	bl	8000754 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3778      	adds	r7, #120	@ 0x78
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	00020030 	.word	0x00020030

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	@ (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	480e      	ldr	r0, [pc, #56]	@ (800034c <MX_I2C1_Init+0x74>)
 8000314:	f000 ff8a 	bl	800122c <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 fa19 	bl	8000754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	@ (800034c <MX_I2C1_Init+0x74>)
 8000326:	f001 f81c 	bl	8001362 <HAL_I2CEx_ConfigAnalogFilter>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 fa10 	bl	8000754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	2100      	movs	r1, #0
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <MX_I2C1_Init+0x74>)
 8000338:	f001 f85e 	bl	80013f8 <HAL_I2CEx_ConfigDigitalFilter>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 fa07 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40005400 	.word	0x40005400
 8000354:	2000090e 	.word	0x2000090e

08000358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <MX_SPI1_Init+0x74>)
 800035e:	4a1c      	ldr	r2, [pc, #112]	@ (80003d0 <MX_SPI1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000362:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <MX_SPI1_Init+0x74>)
 8000364:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036a:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <MX_SPI1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000370:	4b16      	ldr	r3, [pc, #88]	@ (80003cc <MX_SPI1_Init+0x74>)
 8000372:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037e:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <MX_SPI1_Init+0x74>)
 8000386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800038a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <MX_SPI1_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <MX_SPI1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <MX_SPI1_Init+0x74>)
 80003a6:	2207      	movs	r2, #7
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <MX_SPI1_Init+0x74>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	@ (80003cc <MX_SPI1_Init+0x74>)
 80003b8:	f002 fd00 	bl	8002dbc <HAL_SPI_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f9c7 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000007c 	.word	0x2000007c
 80003d0:	40013000 	.word	0x40013000

080003d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80003d8:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_UART5_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	@ (8000430 <MX_UART5_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <MX_UART5_Init+0x58>)
 80003e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_UART5_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_UART5_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_UART5_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_UART5_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	@ (800042c <MX_UART5_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_UART5_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	@ (800042c <MX_UART5_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_UART5_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	@ (800042c <MX_UART5_Init+0x58>)
 8000418:	f002 fe9b 	bl	8003152 <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 f997 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000e0 	.word	0x200000e0
 8000430:	40005000 	.word	0x40005000

08000434 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 800043a:	4a0e      	ldr	r2, [pc, #56]	@ (8000474 <MX_USB_PCD_Init+0x40>)
 800043c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 8000440:	2208      	movs	r2, #8
 8000442:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 8000446:	2202      	movs	r2, #2
 8000448:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 800044c:	2202      	movs	r2, #2
 800044e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 8000452:	2200      	movs	r2, #0
 8000454:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 8000458:	2200      	movs	r2, #0
 800045a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_USB_PCD_Init+0x3c>)
 800045e:	f001 f817 	bl	8001490 <HAL_PCD_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000468:	f000 f974 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000168 	.word	0x20000168
 8000474:	40005c00 	.word	0x40005c00

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08c      	sub	sp, #48	@ 0x30
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4b3d      	ldr	r3, [pc, #244]	@ (8000584 <MX_GPIO_Init+0x10c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a3c      	ldr	r2, [pc, #240]	@ (8000584 <MX_GPIO_Init+0x10c>)
 8000494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b3a      	ldr	r3, [pc, #232]	@ (8000584 <MX_GPIO_Init+0x10c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004a2:	61bb      	str	r3, [r7, #24]
 80004a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b37      	ldr	r3, [pc, #220]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a36      	ldr	r2, [pc, #216]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b34      	ldr	r3, [pc, #208]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4b31      	ldr	r3, [pc, #196]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a30      	ldr	r2, [pc, #192]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a2a      	ldr	r2, [pc, #168]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ee:	4b25      	ldr	r3, [pc, #148]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a24      	ldr	r2, [pc, #144]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <MX_GPIO_Init+0x10c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <MX_GPIO_Init+0x10c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a1e      	ldr	r2, [pc, #120]	@ (8000584 <MX_GPIO_Init+0x10c>)
 800050c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <MX_GPIO_Init+0x10c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800051e:	2200      	movs	r2, #0
 8000520:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000524:	4818      	ldr	r0, [pc, #96]	@ (8000588 <MX_GPIO_Init+0x110>)
 8000526:	f000 fe69 	bl	80011fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800052a:	2337      	movs	r3, #55	@ 0x37
 800052c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800052e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	4619      	mov	r1, r3
 800053e:	4812      	ldr	r0, [pc, #72]	@ (8000588 <MX_GPIO_Init+0x110>)
 8000540:	f000 fce2 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000544:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000548:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	4619      	mov	r1, r3
 800055c:	480a      	ldr	r0, [pc, #40]	@ (8000588 <MX_GPIO_Init+0x110>)
 800055e:	f000 fcd3 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000578:	f000 fcc6 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800057c:	bf00      	nop
 800057e:	3730      	adds	r7, #48	@ 0x30
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	48001000 	.word	0x48001000

0800058c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b090      	sub	sp, #64	@ 0x40
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a60      	ldr	r2, [pc, #384]	@ (800071c <HAL_UART_RxCpltCallback+0x190>)
 800059a:	4293      	cmp	r3, r2
 800059c:	f040 80ba 	bne.w	8000714 <HAL_UART_RxCpltCallback+0x188>
        //HAL_UART_Transmit(&huart5, (uint8_t*)buf, strlen(buf), 100);

        static uint8_t i = 0;
        static char rx_buffer[10];

        if (rx_byte != '\n' && rx_byte != '\r' && i < sizeof(rx_buffer) - 1)
 80005a0:	4b5f      	ldr	r3, [pc, #380]	@ (8000720 <HAL_UART_RxCpltCallback+0x194>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b0a      	cmp	r3, #10
 80005a6:	d013      	beq.n	80005d0 <HAL_UART_RxCpltCallback+0x44>
 80005a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000720 <HAL_UART_RxCpltCallback+0x194>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	d00f      	beq.n	80005d0 <HAL_UART_RxCpltCallback+0x44>
 80005b0:	4b5c      	ldr	r3, [pc, #368]	@ (8000724 <HAL_UART_RxCpltCallback+0x198>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	d80b      	bhi.n	80005d0 <HAL_UART_RxCpltCallback+0x44>
        {
            rx_buffer[i++] = rx_byte;
 80005b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000724 <HAL_UART_RxCpltCallback+0x198>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	b2d1      	uxtb	r1, r2
 80005c0:	4a58      	ldr	r2, [pc, #352]	@ (8000724 <HAL_UART_RxCpltCallback+0x198>)
 80005c2:	7011      	strb	r1, [r2, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b56      	ldr	r3, [pc, #344]	@ (8000720 <HAL_UART_RxCpltCallback+0x194>)
 80005c8:	7819      	ldrb	r1, [r3, #0]
 80005ca:	4b57      	ldr	r3, [pc, #348]	@ (8000728 <HAL_UART_RxCpltCallback+0x19c>)
 80005cc:	5499      	strb	r1, [r3, r2]
 80005ce:	e09c      	b.n	800070a <HAL_UART_RxCpltCallback+0x17e>
        }
        else
        {
            rx_buffer[i] = '\0';
 80005d0:	4b54      	ldr	r3, [pc, #336]	@ (8000724 <HAL_UART_RxCpltCallback+0x198>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b54      	ldr	r3, [pc, #336]	@ (8000728 <HAL_UART_RxCpltCallback+0x19c>)
 80005d8:	2100      	movs	r1, #0
 80005da:	5499      	strb	r1, [r3, r2]
            i = 0;
 80005dc:	4b51      	ldr	r3, [pc, #324]	@ (8000724 <HAL_UART_RxCpltCallback+0x198>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]

            uint8_t valid_command = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

            if (rx_buffer[1] != '\0')
 80005e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000728 <HAL_UART_RxCpltCallback+0x19c>)
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <HAL_UART_RxCpltCallback+0x6c>
            {
                valid_command = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80005f6:	e06d      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
            }
            else
            {
                switch (rx_buffer[0])
 80005f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000728 <HAL_UART_RxCpltCallback+0x19c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3b30      	subs	r3, #48	@ 0x30
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d864      	bhi.n	80006cc <HAL_UART_RxCpltCallback+0x140>
 8000602:	a201      	add	r2, pc, #4	@ (adr r2, 8000608 <HAL_UART_RxCpltCallback+0x7c>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	0800062d 	.word	0x0800062d
 800060c:	0800065d 	.word	0x0800065d
 8000610:	0800066b 	.word	0x0800066b
 8000614:	08000679 	.word	0x08000679
 8000618:	08000687 	.word	0x08000687
 800061c:	08000695 	.word	0x08000695
 8000620:	080006a3 	.word	0x080006a3
 8000624:	080006b1 	.word	0x080006b1
 8000628:	080006bf 	.word	0x080006bf
                {
                    case '0':
                        turn_off_led();
 800062c:	f000 f886 	bl	800073c <turn_off_led>
                        {
                            char complete_msg[] = "Game complete!!\r\n";
 8000630:	4b3e      	ldr	r3, [pc, #248]	@ (800072c <HAL_UART_RxCpltCallback+0x1a0>)
 8000632:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	682b      	ldr	r3, [r5, #0]
 800063e:	8023      	strh	r3, [r4, #0]
                            HAL_UART_Transmit(&huart5, (uint8_t*)complete_msg, strlen(complete_msg), 100);
 8000640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdbf 	bl	80001c8 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	4836      	ldr	r0, [pc, #216]	@ (8000730 <HAL_UART_RxCpltCallback+0x1a4>)
 8000656:	f002 fdca 	bl	80031ee <HAL_UART_Transmit>
                        }
                        break;
 800065a:	e03b      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>

                    case '1': HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET); break;
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	4834      	ldr	r0, [pc, #208]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 8000664:	f000 fdca 	bl	80011fc <HAL_GPIO_WritePin>
 8000668:	e034      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '2': HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET); break;
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	4830      	ldr	r0, [pc, #192]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 8000672:	f000 fdc3 	bl	80011fc <HAL_GPIO_WritePin>
 8000676:	e02d      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '3': HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET); break;
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800067e:	482d      	ldr	r0, [pc, #180]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 8000680:	f000 fdbc 	bl	80011fc <HAL_GPIO_WritePin>
 8000684:	e026      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '4': HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET); break;
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	4829      	ldr	r0, [pc, #164]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 800068e:	f000 fdb5 	bl	80011fc <HAL_GPIO_WritePin>
 8000692:	e01f      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '5': HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET); break;
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800069a:	4826      	ldr	r0, [pc, #152]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 800069c:	f000 fdae 	bl	80011fc <HAL_GPIO_WritePin>
 80006a0:	e018      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '6': HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET); break;
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 80006aa:	f000 fda7 	bl	80011fc <HAL_GPIO_WritePin>
 80006ae:	e011      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '7': HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET); break;
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b6:	481f      	ldr	r0, [pc, #124]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 80006b8:	f000 fda0 	bl	80011fc <HAL_GPIO_WritePin>
 80006bc:	e00a      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>
                    case '8': HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET); break;
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c4:	481b      	ldr	r0, [pc, #108]	@ (8000734 <HAL_UART_RxCpltCallback+0x1a8>)
 80006c6:	f000 fd99 	bl	80011fc <HAL_GPIO_WritePin>
 80006ca:	e003      	b.n	80006d4 <HAL_UART_RxCpltCallback+0x148>

                    default:
                        valid_command = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        break;
 80006d2:	bf00      	nop
                }
            }

            if (!valid_command)
 80006d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d116      	bne.n	800070a <HAL_UART_RxCpltCallback+0x17e>
            {
                char error[] = "Warning: invalid command!!\r\n";
 80006dc:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <HAL_UART_RxCpltCallback+0x1ac>)
 80006de:	f107 040c 	add.w	r4, r7, #12
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ec:	c407      	stmia	r4!, {r0, r1, r2}
 80006ee:	7023      	strb	r3, [r4, #0]
                HAL_UART_Transmit(&huart5, (uint8_t*)error, strlen(error), 100);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd67 	bl	80001c8 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 010c 	add.w	r1, r7, #12
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	480a      	ldr	r0, [pc, #40]	@ (8000730 <HAL_UART_RxCpltCallback+0x1a4>)
 8000706:	f002 fd72 	bl	80031ee <HAL_UART_Transmit>
              //  char ok[] = "For debugging purposes: command executed successfully\r\n";
                //HAL_UART_Transmit(&huart5, (uint8_t*)ok, strlen(ok), 100);
            //}
        }

        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	4904      	ldr	r1, [pc, #16]	@ (8000720 <HAL_UART_RxCpltCallback+0x194>)
 800070e:	4808      	ldr	r0, [pc, #32]	@ (8000730 <HAL_UART_RxCpltCallback+0x1a4>)
 8000710:	f002 fdf6 	bl	8003300 <HAL_UART_Receive_IT>
    }
}
 8000714:	bf00      	nop
 8000716:	3740      	adds	r7, #64	@ 0x40
 8000718:	46bd      	mov	sp, r7
 800071a:	bdb0      	pop	{r4, r5, r7, pc}
 800071c:	40005000 	.word	0x40005000
 8000720:	2000043c 	.word	0x2000043c
 8000724:	2000043d 	.word	0x2000043d
 8000728:	20000440 	.word	0x20000440
 800072c:	080047a4 	.word	0x080047a4
 8000730:	200000e0 	.word	0x200000e0
 8000734:	48001000 	.word	0x48001000
 8000738:	080047b8 	.word	0x080047b8

0800073c <turn_off_led>:


void turn_off_led(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin|
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000746:	4802      	ldr	r0, [pc, #8]	@ (8000750 <turn_off_led+0x14>)
 8000748:	f000 fd58 	bl	80011fc <HAL_GPIO_WritePin>
                            LD7_Pin|LD8_Pin|LD9_Pin|LD10_Pin, GPIO_PIN_RESET);
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	48001000 	.word	0x48001000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000796:	2007      	movs	r0, #7
 8000798:	f000 faf8 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a17      	ldr	r2, [pc, #92]	@ (8000824 <HAL_I2C_MspInit+0x7c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d127      	bne.n	800081a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007e2:	23c0      	movs	r3, #192	@ 0xc0
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e6:	2312      	movs	r3, #18
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f2:	2304      	movs	r3, #4
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <HAL_I2C_MspInit+0x84>)
 80007fe:	f000 fb83 	bl	8000f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 8000808:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_I2C_MspInit+0x80>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	@ 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40005400 	.word	0x40005400
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400

08000830 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <HAL_SPI_MspInit+0x8c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d130      	bne.n	80008b4 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000852:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a1a      	ldr	r2, [pc, #104]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 8000858:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_SPI_MspInit+0x90>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000882:	23e0      	movs	r3, #224	@ 0xe0
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000892:	2305      	movs	r3, #5
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 fb32 	bl	8000f08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2023      	movs	r0, #35	@ 0x23
 80008aa:	f000 fa7a 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008ae:	2023      	movs	r0, #35	@ 0x23
 80008b0:	f000 fa93 	bl	8000dda <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40013000 	.word	0x40013000
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a29      	ldr	r2, [pc, #164]	@ (8000988 <HAL_UART_MspInit+0xc4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d14c      	bne.n	8000980 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <HAL_UART_MspInit+0xc8>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a28      	ldr	r2, [pc, #160]	@ (800098c <HAL_UART_MspInit+0xc8>)
 80008ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b26      	ldr	r3, [pc, #152]	@ (800098c <HAL_UART_MspInit+0xc8>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <HAL_UART_MspInit+0xc8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a22      	ldr	r2, [pc, #136]	@ (800098c <HAL_UART_MspInit+0xc8>)
 8000904:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <HAL_UART_MspInit+0xc8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <HAL_UART_MspInit+0xc8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <HAL_UART_MspInit+0xc8>)
 800091c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <HAL_UART_MspInit+0xc8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000940:	2305      	movs	r3, #5
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <HAL_UART_MspInit+0xcc>)
 800094c:	f000 fadc 	bl	8000f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000950:	2304      	movs	r3, #4
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000960:	2305      	movs	r3, #5
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	480a      	ldr	r0, [pc, #40]	@ (8000994 <HAL_UART_MspInit+0xd0>)
 800096c:	f000 facc 	bl	8000f08 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2035      	movs	r0, #53	@ 0x35
 8000976:	f000 fa14 	bl	8000da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800097a:	2035      	movs	r0, #53	@ 0x35
 800097c:	f000 fa2d 	bl	8000dda <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40005000 	.word	0x40005000
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000c00 	.word	0x48000c00

08000998 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <HAL_PCD_MspInit+0x80>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d129      	bne.n	8000a0e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009e4:	230e      	movs	r3, #14
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f000 fa89 	bl	8000f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 80009fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_PCD_MspInit+0x84>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40005c00 	.word	0x40005c00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <NMI_Handler+0x4>

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f899 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <SPI1_IRQHandler+0x10>)
 8000a86:	f002 fa45 	bl	8002f14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000007c 	.word	0x2000007c

08000a94 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a98:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <UART5_IRQHandler+0x10>)
 8000a9a:	f002 fc75 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000e0 	.word	0x200000e0

08000aa8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad0:	f7ff ffea 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	@ (8000b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	@ (8000b18 <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f003 fe23 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f7ff fb6b 	bl	80001d8 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b04:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b10:	08004820 	.word	0x08004820
  ldr r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b18:	20000450 	.word	0x20000450

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x28>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f92b 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe10 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f943 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f90b 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000044c 	.word	0x2000044c

08000bd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000044c 	.word	0x2000044c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff29 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff3e 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff8e 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5d 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff31 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffa2 	bl	8000d48 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e02e      	b.n	8000e7e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d008      	beq.n	8000e3c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e020      	b.n	8000e7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 020e 	bic.w	r2, r2, #14
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d005      	beq.n	8000eac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e027      	b.n	8000efc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020e 	bic.w	r2, r2, #14
 8000eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3
    }
  }
  return status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e154      	b.n	80011c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8146 	beq.w	80011bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 0201 	and.w	r2, r3, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	6939      	ldr	r1, [r7, #16]
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0203 	and.w	r2, r3, #3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a0 	beq.w	80011bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b58      	ldr	r3, [pc, #352]	@ (80011e0 <HAL_GPIO_Init+0x2d8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <HAL_GPIO_Init+0x2d8>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b55      	ldr	r3, [pc, #340]	@ (80011e0 <HAL_GPIO_Init+0x2d8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001094:	4a53      	ldr	r2, [pc, #332]	@ (80011e4 <HAL_GPIO_Init+0x2dc>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010be:	d019      	beq.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a49      	ldr	r2, [pc, #292]	@ (80011e8 <HAL_GPIO_Init+0x2e0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1e8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a48      	ldr	r2, [pc, #288]	@ (80011ec <HAL_GPIO_Init+0x2e4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a47      	ldr	r2, [pc, #284]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a46      	ldr	r2, [pc, #280]	@ (80011f4 <HAL_GPIO_Init+0x2ec>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1dc>
 80010e0:	2304      	movs	r3, #4
 80010e2:	e008      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e4:	2305      	movs	r3, #5
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f4:	2300      	movs	r3, #0
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001106:	4937      	ldr	r1, [pc, #220]	@ (80011e4 <HAL_GPIO_Init+0x2dc>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001114:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001138:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113e:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001162:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800118c:	4a1a      	ldr	r2, [pc, #104]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011b6:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <HAL_GPIO_Init+0x2f0>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f47f aea3 	bne.w	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000
 80011e8:	48000400 	.word	0x48000400
 80011ec:	48000800 	.word	0x48000800
 80011f0:	48000c00 	.word	0x48000c00
 80011f4:	48001000 	.word	0x48001000
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e002      	b.n	8001220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e08d      	b.n	800135a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff faa8 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	@ 0x24
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800127c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800128c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e006      	b.n	80012b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d108      	bne.n	80012ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	e007      	b.n	80012de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69d9      	ldr	r1, [r3, #28]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b20      	cmp	r3, #32
 8001376:	d138      	bne.n	80013ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001382:	2302      	movs	r3, #2
 8001384:	e032      	b.n	80013ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2224      	movs	r2, #36	@ 0x24
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80013b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013ea:	2302      	movs	r3, #2
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b20      	cmp	r3, #32
 800140c:	d139      	bne.n	8001482 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001418:	2302      	movs	r3, #2
 800141a:	e033      	b.n	8001484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2224      	movs	r2, #36	@ 0x24
 8001428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800144a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001482:	2302      	movs	r3, #2
  }
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0b9      	b.n	8001616 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fa6e 	bl	8000998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 f8f9 	bl	80046c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e03e      	b.n	8001552 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	3311      	adds	r3, #17
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	3310      	adds	r3, #16
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	3313      	adds	r3, #19
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3320      	adds	r3, #32
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3324      	adds	r3, #36	@ 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	3301      	adds	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	429a      	cmp	r2, r3
 800155a:	d3bb      	bcc.n	80014d4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e044      	b.n	80015ec <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	440b      	add	r3, r1
 8001586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3b5      	bcc.n	8001562 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001602:	f003 f878 	bl	80046f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001626:	af00      	add	r7, sp, #0
 8001628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001630:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f000 bff4 	b.w	800262e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 816d 	beq.w	8001936 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800165c:	4bb4      	ldr	r3, [pc, #720]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b04      	cmp	r3, #4
 8001666:	d00c      	beq.n	8001682 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001668:	4bb1      	ldr	r3, [pc, #708]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d157      	bne.n	8001724 <HAL_RCC_OscConfig+0x104>
 8001674:	4bae      	ldr	r3, [pc, #696]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001680:	d150      	bne.n	8001724 <HAL_RCC_OscConfig+0x104>
 8001682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001686:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001696:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80016a2:	d802      	bhi.n	80016aa <HAL_RCC_OscConfig+0x8a>
 80016a4:	4ba2      	ldr	r3, [pc, #648]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0xb6>
 80016aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ae:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80016be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80016c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80016d2:	4b97      	ldr	r3, [pc, #604]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016da:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80016de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80016e2:	fa92 f2a2 	rbit	r2, r2
 80016e6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80016ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80016ee:	fab2 f282 	clz	r2, r2
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f042 0220 	orr.w	r2, r2, #32
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	f002 021f 	and.w	r2, r2, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8114 	beq.w	8001934 <HAL_RCC_OscConfig+0x314>
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 810b 	bne.w	8001934 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f000 bf85 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x124>
 8001736:	4b7e      	ldr	r3, [pc, #504]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7d      	ldr	r2, [pc, #500]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e036      	b.n	80017b2 <HAL_RCC_OscConfig+0x192>
 8001744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x14e>
 8001754:	4b76      	ldr	r3, [pc, #472]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a75      	ldr	r2, [pc, #468]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b73      	ldr	r3, [pc, #460]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a72      	ldr	r2, [pc, #456]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e021      	b.n	80017b2 <HAL_RCC_OscConfig+0x192>
 800176e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x17a>
 8001780:	4b6b      	ldr	r3, [pc, #428]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6a      	ldr	r2, [pc, #424]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b68      	ldr	r3, [pc, #416]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a67      	ldr	r2, [pc, #412]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x192>
 800179a:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a64      	ldr	r2, [pc, #400]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b62      	ldr	r3, [pc, #392]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a61      	ldr	r2, [pc, #388]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	f023 020f 	bic.w	r2, r3, #15
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	495a      	ldr	r1, [pc, #360]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d054      	beq.n	8001886 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9fa 	bl	8000bd4 <HAL_GetTick>
 80017e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e6:	f7ff f9f5 	bl	8000bd4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d902      	bls.n	80017fc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f000 bf19 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 80017fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001800:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001810:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b3f      	cmp	r3, #63	@ 0x3f
 800181c:	d802      	bhi.n	8001824 <HAL_RCC_OscConfig+0x204>
 800181e:	4b44      	ldr	r3, [pc, #272]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0x230>
 8001824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001828:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001838:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800183c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001840:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800184c:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001854:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001858:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800185c:	fa92 f2a2 	rbit	r2, r2
 8001860:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001864:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001868:	fab2 f282 	clz	r2, r2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f002 021f 	and.w	r2, r2, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0b0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1c6>
 8001884:	e057      	b.n	8001936 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff f9a5 	bl	8000bd4 <HAL_GetTick>
 800188a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f9a0 	bl	8000bd4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	@ 0x64
 800189e:	d902      	bls.n	80018a6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f000 bec4 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 80018a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80018ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018c6:	d802      	bhi.n	80018ce <HAL_RCC_OscConfig+0x2ae>
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x2da>
 80018ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <HAL_RCC_OscConfig+0x310>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018fe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001902:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001906:	fa92 f2a2 	rbit	r2, r2
 800190a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800190e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f002 021f 	and.w	r2, r2, #31
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1b0      	bne.n	8001890 <HAL_RCC_OscConfig+0x270>
 800192e:	e002      	b.n	8001936 <HAL_RCC_OscConfig+0x316>
 8001930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 816c 	beq.w	8001c24 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800194c:	4bcc      	ldr	r3, [pc, #816]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001958:	4bc9      	ldr	r3, [pc, #804]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d16d      	bne.n	8001a40 <HAL_RCC_OscConfig+0x420>
 8001964:	4bc6      	ldr	r3, [pc, #792]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d167      	bne.n	8001a40 <HAL_RCC_OscConfig+0x420>
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001982:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b3f      	cmp	r3, #63	@ 0x3f
 800198e:	d802      	bhi.n	8001996 <HAL_RCC_OscConfig+0x376>
 8001990:	4bbb      	ldr	r3, [pc, #748]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	e013      	b.n	80019be <HAL_RCC_OscConfig+0x39e>
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80019ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80019ba:	4bb1      	ldr	r3, [pc, #708]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	2202      	movs	r2, #2
 80019c0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80019c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80019c8:	fa92 f2a2 	rbit	r2, r2
 80019cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80019d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80019d4:	fab2 f282 	clz	r2, r2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f002 021f 	and.w	r2, r2, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00a      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3e6>
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d002      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f000 be14 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b9e      	ldr	r3, [pc, #632]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	21f8      	movs	r1, #248	@ 0xf8
 8001a1c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a24:	fa91 f1a1 	rbit	r1, r1
 8001a28:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a30:	fab1 f181 	clz	r1, r1
 8001a34:	b2c9      	uxtb	r1, r1
 8001a36:	408b      	lsls	r3, r1
 8001a38:	4991      	ldr	r1, [pc, #580]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e0f1      	b.n	8001c24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8083 	beq.w	8001b58 <HAL_RCC_OscConfig+0x538>
 8001a52:	2301      	movs	r3, #1
 8001a54:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001a64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f8a9 	bl	8000bd4 <HAL_GetTick>
 8001a82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f8a4 	bl	8000bd4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d902      	bls.n	8001a9e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f000 bdc8 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001ab0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b3f      	cmp	r3, #63	@ 0x3f
 8001abc:	d802      	bhi.n	8001ac4 <HAL_RCC_OscConfig+0x4a4>
 8001abe:	4b70      	ldr	r3, [pc, #448]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e013      	b.n	8001aec <HAL_RCC_OscConfig+0x4cc>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001adc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001af2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001af6:	fa92 f2a2 	rbit	r2, r2
 8001afa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001afe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001b02:	fab2 f282 	clz	r2, r2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f002 021f 	and.w	r2, r2, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0b4      	beq.n	8001a88 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	21f8      	movs	r1, #248	@ 0xf8
 8001b34:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b3c:	fa91 f1a1 	rbit	r1, r1
 8001b40:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001b44:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001b48:	fab1 f181 	clz	r1, r1
 8001b4c:	b2c9      	uxtb	r1, r1
 8001b4e:	408b      	lsls	r3, r1
 8001b50:	494b      	ldr	r1, [pc, #300]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
 8001b56:	e065      	b.n	8001c24 <HAL_RCC_OscConfig+0x604>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f826 	bl	8000bd4 <HAL_GetTick>
 8001b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f821 	bl	8000bd4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d902      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f000 bd45 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bc2:	d802      	bhi.n	8001bca <HAL_RCC_OscConfig+0x5aa>
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	e013      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5d2>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001be2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001bee:	4b24      	ldr	r3, [pc, #144]	@ (8001c80 <HAL_RCC_OscConfig+0x660>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001bf8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001bfc:	fa92 f2a2 	rbit	r2, r2
 8001c00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001c04:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001c08:	fab2 f282 	clz	r2, r2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f002 021f 	and.w	r2, r2, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1b4      	bne.n	8001b8e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8115 	beq.w	8001e64 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d07e      	beq.n	8001d48 <HAL_RCC_OscConfig+0x728>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_RCC_OscConfig+0x664>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7fe ffae 	bl	8000bd4 <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7c:	e00f      	b.n	8001c9e <HAL_RCC_OscConfig+0x67e>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe ffa4 	bl	8000bd4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 bcc8 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cb8:	2202      	movs	r2, #2
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cdc:	2202      	movs	r2, #2
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	4bb0      	ldr	r3, [pc, #704]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d04:	2102      	movs	r1, #2
 8001d06:	6019      	str	r1, [r3, #0]
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f1a3 	rbit	r1, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d1e:	6019      	str	r1, [r3, #0]
  return result;
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0a0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x668>
 8001d46:	e08d      	b.n	8001e64 <HAL_RCC_OscConfig+0x844>
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b90      	ldr	r3, [pc, #576]	@ (8001fc0 <HAL_RCC_OscConfig+0x9a0>)
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	461a      	mov	r2, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe ff23 	bl	8000bd4 <HAL_GetTick>
 8001d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d94:	f7fe ff1e 	bl	8000bd4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d902      	bls.n	8001daa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	f000 bc42 	b.w	800262e <HAL_RCC_OscConfig+0x100e>
 8001daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	4b69      	ldr	r3, [pc, #420]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e22:	2102      	movs	r1, #2
 8001e24:	6019      	str	r1, [r3, #0]
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f1a3 	rbit	r1, r3
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e3c:	6019      	str	r1, [r3, #0]
  return result;
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d197      	bne.n	8001d94 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 819e 	beq.w	80021b6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	4b4e      	ldr	r3, [pc, #312]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	61d3      	str	r3, [r2, #28]
 8001e98:	4b48      	ldr	r3, [pc, #288]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001eb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b42      	ldr	r3, [pc, #264]	@ (8001fc4 <HAL_RCC_OscConfig+0x9a4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11a      	bne.n	8001efc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc4 <HAL_RCC_OscConfig+0x9a4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a3e      	ldr	r2, [pc, #248]	@ (8001fc4 <HAL_RCC_OscConfig+0x9a4>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fe7f 	bl	8000bd4 <HAL_GetTick>
 8001ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	e009      	b.n	8001ef0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7fe fe7a 	bl	8000bd4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	@ 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e39e      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b34      	ldr	r3, [pc, #208]	@ (8001fc4 <HAL_RCC_OscConfig+0x9a4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ef      	beq.n	8001edc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x8fa>
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e035      	b.n	8001f86 <HAL_RCC_OscConfig+0x966>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x924>
 8001f2a:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a20      	ldr	r2, [pc, #128]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	e020      	b.n	8001f86 <HAL_RCC_OscConfig+0x966>
 8001f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x94e>
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a15      	ldr	r2, [pc, #84]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x966>
 8001f6e:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_RCC_OscConfig+0x99c>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fe1c 	bl	8000bd4 <HAL_GetTick>
 8001f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	e012      	b.n	8001fc8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe fe17 	bl	8000bd4 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e339      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	10908120 	.word	0x10908120
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800200e:	601a      	str	r2, [r3, #0]
  return result;
 8002010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002014:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_RCC_OscConfig+0xa10>
 800202a:	4b98      	ldr	r3, [pc, #608]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	e013      	b.n	8002058 <HAL_RCC_OscConfig+0xa38>
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4b8d      	ldr	r3, [pc, #564]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800205c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002060:	2102      	movs	r1, #2
 8002062:	6011      	str	r1, [r2, #0]
 8002064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002068:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	fa92 f1a2 	rbit	r1, r2
 8002072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002076:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800207a:	6011      	str	r1, [r2, #0]
  return result;
 800207c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002080:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f43f af7f 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x982>
 80020a4:	e07d      	b.n	80021a2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fd95 	bl	8000bd4 <HAL_GetTick>
 80020aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe fd90 	bl	8000bd4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e2b2      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020d0:	2202      	movs	r2, #2
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020f4:	2202      	movs	r2, #2
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800210e:	601a      	str	r2, [r3, #0]
  return result;
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002118:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0xb10>
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0xb38>
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	4b4d      	ldr	r3, [pc, #308]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002160:	2102      	movs	r1, #2
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002168:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	fa92 f1a2 	rbit	r1, r2
 8002172:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002176:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800217a:	6011      	str	r1, [r2, #0]
  return result;
 800217c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002180:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d186      	bne.n	80020b0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a37      	ldr	r2, [pc, #220]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8232 	beq.w	800262c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b30      	ldr	r3, [pc, #192]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	f000 8201 	beq.w	80025d8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	f040 8157 	bne.w	8002496 <HAL_RCC_OscConfig+0xe76>
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800220c:	601a      	str	r2, [r3, #0]
  return result;
 800220e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002212:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002216:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002222:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	461a      	mov	r2, r3
 800222a:	2300      	movs	r3, #0
 800222c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe fcd1 	bl	8000bd4 <HAL_GetTick>
 8002232:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	e009      	b.n	800224c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fccc 	bl	8000bd4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1f0      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002270:	601a      	str	r2, [r3, #0]
  return result;
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800227a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b3f      	cmp	r3, #63	@ 0x3f
 8002284:	d804      	bhi.n	8002290 <HAL_RCC_OscConfig+0xc70>
 8002286:	4b01      	ldr	r3, [pc, #4]	@ (800228c <HAL_RCC_OscConfig+0xc6c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e029      	b.n	80022e0 <HAL_RCC_OscConfig+0xcc0>
 800228c:	40021000 	.word	0x40021000
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002298:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	4bc3      	ldr	r3, [pc, #780]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002300:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002304:	6011      	str	r1, [r2, #0]
  return result;
 8002306:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800230a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d185      	bne.n	8002238 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4baf      	ldr	r3, [pc, #700]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	430b      	orrs	r3, r1
 800234e:	49a7      	ldr	r1, [pc, #668]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800235c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002378:	601a      	str	r2, [r3, #0]
  return result;
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002382:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800238e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fc1b 	bl	8000bd4 <HAL_GetTick>
 800239e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a2:	e009      	b.n	80023b8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fc16 	bl	8000bd4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e13a      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	fa93 f2a3 	rbit	r2, r3
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023dc:	601a      	str	r2, [r3, #0]
  return result;
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80023f0:	d802      	bhi.n	80023f8 <HAL_RCC_OscConfig+0xdd8>
 80023f2:	4b7e      	ldr	r3, [pc, #504]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e027      	b.n	8002448 <HAL_RCC_OscConfig+0xe28>
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4b69      	ldr	r3, [pc, #420]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002450:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002468:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800246c:	6011      	str	r1, [r2, #0]
  return result;
 800246e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002472:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d087      	beq.n	80023a4 <HAL_RCC_OscConfig+0xd84>
 8002494:	e0ca      	b.n	800262c <HAL_RCC_OscConfig+0x100c>
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800249e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024ba:	601a      	str	r2, [r3, #0]
  return result;
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	461a      	mov	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fb7a 	bl	8000bd4 <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fb75 	bl	8000bd4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e099      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002502:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800251e:	601a      	str	r2, [r3, #0]
  return result;
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b3f      	cmp	r3, #63	@ 0x3f
 8002532:	d802      	bhi.n	800253a <HAL_RCC_OscConfig+0xf1a>
 8002534:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e027      	b.n	800258a <HAL_RCC_OscConfig+0xf6a>
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002542:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_RCC_OscConfig+0xfcc>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800258e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002592:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002596:	6011      	str	r1, [r2, #0]
 8002598:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800259c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	fa92 f1a2 	rbit	r1, r2
 80025a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025ae:	6011      	str	r1, [r2, #0]
  return result;
 80025b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d187      	bne.n	80024e6 <HAL_RCC_OscConfig+0xec6>
 80025d6:	e029      	b.n	800262c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d103      	bne.n	80025f0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e020      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
 80025ec:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f0:	4b11      	ldr	r3, [pc, #68]	@ (8002638 <HAL_RCC_OscConfig+0x1018>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002614:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b09e      	sub	sp, #120	@ 0x78
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e154      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b89      	ldr	r3, [pc, #548]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b86      	ldr	r3, [pc, #536]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4984      	ldr	r1, [pc, #528]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b82      	ldr	r3, [pc, #520]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e13c      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002690:	4b7b      	ldr	r3, [pc, #492]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4978      	ldr	r1, [pc, #480]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80cd 	beq.w	800284a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d137      	bne.n	8002728 <HAL_RCC_ClockConfig+0xec>
 80026b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d0:	d802      	bhi.n	80026d8 <HAL_RCC_ClockConfig+0x9c>
 80026d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e00f      	b.n	80026f8 <HAL_RCC_ClockConfig+0xbc>
 80026d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80026e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026f4:	4b62      	ldr	r3, [pc, #392]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002700:	fa92 f2a2 	rbit	r2, r2
 8002704:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002706:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002708:	fab2 f282 	clz	r2, r2
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	f042 0220 	orr.w	r2, r2, #32
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	f002 021f 	and.w	r2, r2, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f202 	lsl.w	r2, r1, r2
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d171      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ea      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d137      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x164>
 8002730:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002734:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800273e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b3f      	cmp	r3, #63	@ 0x3f
 8002748:	d802      	bhi.n	8002750 <HAL_RCC_ClockConfig+0x114>
 800274a:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e00f      	b.n	8002770 <HAL_RCC_ClockConfig+0x134>
 8002750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002754:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	647b      	str	r3, [r7, #68]	@ 0x44
 800275e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002762:	643b      	str	r3, [r7, #64]	@ 0x40
 8002764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800276c:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002774:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002778:	fa92 f2a2 	rbit	r2, r2
 800277c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800277e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d135      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0ae      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
 80027a0:	2302      	movs	r3, #2
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027b6:	d802      	bhi.n	80027be <HAL_RCC_ClockConfig+0x182>
 80027b8:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e00d      	b.n	80027da <HAL_RCC_ClockConfig+0x19e>
 80027be:	2302      	movs	r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	2302      	movs	r3, #2
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2202      	movs	r2, #2
 80027dc:	61ba      	str	r2, [r7, #24]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	fa92 f2a2 	rbit	r2, r2
 80027e4:	617a      	str	r2, [r7, #20]
  return result;
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e07a      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 0203 	bic.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	491a      	ldr	r1, [pc, #104]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281a:	f7fe f9db 	bl	8000bd4 <HAL_GetTick>
 800281e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002820:	e00a      	b.n	8002838 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe f9d7 	bl	8000bd4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e062      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_ClockConfig+0x244>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 020c 	and.w	r2, r3, #12
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	429a      	cmp	r2, r3
 8002848:	d1eb      	bne.n	8002822 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284a:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d215      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	4906      	ldr	r1, [pc, #24]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002868:	4b04      	ldr	r3, [pc, #16]	@ (800287c <HAL_RCC_ClockConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d006      	beq.n	8002884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e041      	b.n	80028fe <HAL_RCC_ClockConfig+0x2c2>
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_RCC_ClockConfig+0x2cc>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	491a      	ldr	r1, [pc, #104]	@ (8002908 <HAL_RCC_ClockConfig+0x2cc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_RCC_ClockConfig+0x2cc>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4912      	ldr	r1, [pc, #72]	@ (8002908 <HAL_RCC_ClockConfig+0x2cc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028c2:	f000 f829 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_RCC_ClockConfig+0x2cc>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d0:	22f0      	movs	r2, #240	@ 0xf0
 80028d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	60fa      	str	r2, [r7, #12]
  return result;
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x2d0>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	fa21 f303 	lsr.w	r3, r1, r3
 80028ee:	4a08      	ldr	r2, [pc, #32]	@ (8002910 <HAL_RCC_ClockConfig+0x2d4>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_RCC_ClockConfig+0x2d8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe f928 	bl	8000b4c <HAL_InitTick>
  
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3778      	adds	r7, #120	@ 0x78
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	080047d8 	.word	0x080047d8
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x30>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x36>
 8002946:	e026      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	e026      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0c9b      	lsrs	r3, r3, #18
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 800295e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002974:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e004      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
      break;
 8002994:	e002      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299c:	693b      	ldr	r3, [r7, #16]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	080047f0 	.word	0x080047f0
 80029b8:	08004800 	.word	0x08004800
 80029bc:	003d0900 	.word	0x003d0900

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029de:	f7ff ffef 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029ec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	603a      	str	r2, [r7, #0]
  return result;
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	40d3      	lsrs	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	080047e8 	.word	0x080047e8

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a22:	f7ff ffcd 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002a30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002a34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	603a      	str	r2, [r7, #0]
  return result;
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	080047e8 	.word	0x080047e8

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b092      	sub	sp, #72	@ 0x48
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d2 	beq.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a84:	4b4d      	ldr	r3, [pc, #308]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10e      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a49      	ldr	r2, [pc, #292]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b44      	ldr	r3, [pc, #272]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a40      	ldr	r2, [pc, #256]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f885 	bl	8000bd4 <HAL_GetTick>
 8002aca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe f881 	bl	8000bd4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	@ 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e167      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aec:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8082 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d07a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	2301      	movs	r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5e:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d049      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f831 	bl	8000bd4 <HAL_GetTick>
 8002b72:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f82d 	bl	8000bd4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e111      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002bb6:	4b01      	ldr	r3, [pc, #4]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	10908100 	.word	0x10908100
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	4b78      	ldr	r3, [pc, #480]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	613a      	str	r2, [r7, #16]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	60fa      	str	r2, [r7, #12]
  return result;
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0b9      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c02:	4b6d      	ldr	r3, [pc, #436]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	496a      	ldr	r1, [pc, #424]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b66      	ldr	r3, [pc, #408]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4a65      	ldr	r2, [pc, #404]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c34:	4b60      	ldr	r3, [pc, #384]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	495d      	ldr	r1, [pc, #372]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c52:	4b59      	ldr	r3, [pc, #356]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4956      	ldr	r1, [pc, #344]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c70:	4b51      	ldr	r3, [pc, #324]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	494e      	ldr	r1, [pc, #312]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f023 0210 	bic.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	4947      	ldr	r1, [pc, #284]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cac:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	493f      	ldr	r1, [pc, #252]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cca:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f023 0220 	bic.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4938      	ldr	r1, [pc, #224]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ce8:	4b33      	ldr	r3, [pc, #204]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	4930      	ldr	r1, [pc, #192]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d06:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	4929      	ldr	r1, [pc, #164]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d24:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	4921      	ldr	r1, [pc, #132]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	491a      	ldr	r1, [pc, #104]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d60:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	4912      	ldr	r1, [pc, #72]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	490b      	ldr	r1, [pc, #44]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da8:	4903      	ldr	r1, [pc, #12]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3748      	adds	r7, #72	@ 0x48
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e09d      	b.n	8002f0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dde:	d009      	beq.n	8002df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fd0e 	bl	8000830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e34:	d902      	bls.n	8002e3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e002      	b.n	8002e42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e4a:	d007      	beq.n	8002e5c <HAL_SPI_Init+0xa0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0204 	and.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ed8:	ea42 0103 	orr.w	r1, r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10f      	bne.n	8002f58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
    return;
 8002f56:	e0d7      	b.n	8003108 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_SPI_IRQHandler+0x66>
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	09db      	lsrs	r3, r3, #7
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    return;
 8002f78:	e0c6      	b.n	8003108 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_SPI_IRQHandler+0x8c>
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d106      	bne.n	8002fa0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80b4 	beq.w	8003108 <HAL_SPI_IRQHandler+0x1f4>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80ad 	beq.w	8003108 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d011      	beq.n	8002fea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e00b      	b.n	8003002 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
        return;
 8003000:	e082      	b.n	8003108 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d014      	beq.n	8003038 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	f043 0208 	orr.w	r2, r3, #8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003062:	2b00      	cmp	r3, #0
 8003064:	d04f      	beq.n	8003106 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003074:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_SPI_IRQHandler+0x17e>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d034      	beq.n	80030fc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0203 	bic.w	r2, r2, #3
 80030a0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d011      	beq.n	80030ce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <HAL_SPI_IRQHandler+0x1fc>)
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fee7 	bl	8000e8a <HAL_DMA_Abort_IT>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <HAL_SPI_IRQHandler+0x1fc>)
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fed1 	bl	8000e8a <HAL_DMA_Abort_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80030fa:	e003      	b.n	8003104 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f809 	bl	8003114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003102:	e000      	b.n	8003106 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003104:	bf00      	nop
    return;
 8003106:	bf00      	nop
  }
}
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08003129 	.word	0x08003129

08003114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7ff ffe5 	bl	8003114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e040      	b.n	80031e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fba5 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2224      	movs	r2, #36	@ 0x24
 800317e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fdcf 	bl	8003d3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fbf8 	bl	8003994 <UART_SetConfig>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e01b      	b.n	80031e6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fe4e 	bl	8003e80 <UART_CheckIdleState>
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b08a      	sub	sp, #40	@ 0x28
 80031f2:	af02      	add	r7, sp, #8
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003202:	2b20      	cmp	r3, #32
 8003204:	d177      	bne.n	80032f6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_UART_Transmit+0x24>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e070      	b.n	80032f8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	@ 0x21
 8003222:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003224:	f7fd fcd6 	bl	8000bd4 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003242:	d108      	bne.n	8003256 <HAL_UART_Transmit+0x68>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d104      	bne.n	8003256 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e003      	b.n	800325e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800325e:	e02f      	b.n	80032c0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	2180      	movs	r1, #128	@ 0x80
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 feb0 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e03b      	b.n	80032f8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003292:	b292      	uxth	r2, r2
 8003294:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3302      	adds	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e007      	b.n	80032ae <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1c9      	bne.n	8003260 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2140      	movs	r1, #64	@ 0x40
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fe7a 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e005      	b.n	80032f8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	@ 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003314:	2b20      	cmp	r3, #32
 8003316:	d132      	bne.n	800337e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Receive_IT+0x24>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e02b      	b.n	8003380 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d018      	beq.n	800336e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	613b      	str	r3, [r7, #16]
   return(result);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	69f9      	ldr	r1, [r7, #28]
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	61bb      	str	r3, [r7, #24]
   return(result);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	461a      	mov	r2, r3
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fe99 	bl	80040ac <UART_Start_Receive_IT>
 800337a:	4603      	mov	r3, r0
 800337c:	e000      	b.n	8003380 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	@ 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b0ba      	sub	sp, #232	@ 0xe8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80033b6:	4013      	ands	r3, r2
 80033b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80033bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d115      	bne.n	80033f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00f      	beq.n	80033f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 82ab 	beq.w	800393c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
      }
      return;
 80033ee:	e2a5      	b.n	800393c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8117 	beq.w	8003628 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003406:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800340a:	4b85      	ldr	r3, [pc, #532]	@ (8003620 <HAL_UART_IRQHandler+0x298>)
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 810a 	beq.w	8003628 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d011      	beq.n	8003444 <HAL_UART_IRQHandler+0xbc>
 8003420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d011      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
 8003450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2202      	movs	r2, #2
 8003462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d011      	beq.n	80034a4 <HAL_UART_IRQHandler+0x11c>
 8003480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2204      	movs	r2, #4
 8003492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2208      	movs	r2, #8
 80034ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d6:	f043 0208 	orr.w	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d012      	beq.n	8003512 <HAL_UART_IRQHandler+0x18a>
 80034ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8211 	beq.w	8003940 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d005      	beq.n	800356a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800355e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003562:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04f      	beq.n	800360a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fe52 	bl	8004214 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b40      	cmp	r3, #64	@ 0x40
 800357c:	d141      	bne.n	8003602 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3308      	adds	r3, #8
 80035a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1d9      	bne.n	800357e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d013      	beq.n	80035fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d6:	4a13      	ldr	r2, [pc, #76]	@ (8003624 <HAL_UART_IRQHandler+0x29c>)
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fc53 	bl	8000e8a <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00f      	b.n	800361a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9b4 	bl	8003968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e00b      	b.n	800361a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9b0 	bl	8003968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e007      	b.n	800361a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f9ac 	bl	8003968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003618:	e192      	b.n	8003940 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361a:	bf00      	nop
    return;
 800361c:	e190      	b.n	8003940 <HAL_UART_IRQHandler+0x5b8>
 800361e:	bf00      	nop
 8003620:	04000120 	.word	0x04000120
 8003624:	080042dd 	.word	0x080042dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 814b 	bne.w	80038c8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8144 	beq.w	80038c8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 813d 	beq.w	80038c8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2210      	movs	r2, #16
 8003654:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	f040 80b5 	bne.w	80037d0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003672:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8164 	beq.w	8003944 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003686:	429a      	cmp	r2, r3
 8003688:	f080 815c 	bcs.w	8003944 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003692:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b20      	cmp	r3, #32
 800369e:	f000 8086 	beq.w	80037ae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1da      	bne.n	80036a2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003710:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003714:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003718:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e1      	bne.n	80036ec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800373a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3308      	adds	r3, #8
 8003748:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800374c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800374e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003752:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800375a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800377c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800377e:	f023 0310 	bic.w	r3, r3, #16
 8003782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003792:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800379e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e4      	bne.n	800376e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd fb30 	bl	8000e0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8d7 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037ce:	e0b9      	b.n	8003944 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ab 	beq.w	8003948 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80037f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a6 	beq.w	8003948 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800381e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003820:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800382c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e4      	bne.n	80037fc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	623b      	str	r3, [r7, #32]
   return(result);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003856:	633a      	str	r2, [r7, #48]	@ 0x30
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800385c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e3      	bne.n	8003832 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60fb      	str	r3, [r7, #12]
   return(result);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0310 	bic.w	r3, r3, #16
 8003892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	617b      	str	r3, [r7, #20]
   return(result);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e4      	bne.n	800387e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f85b 	bl	800397c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038c6:	e03f      	b.n	8003948 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <HAL_UART_IRQHandler+0x56a>
 80038d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fede 	bl	80046ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038f0:	e02d      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01c      	beq.n	800394c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
    }
    return;
 800391a:	e017      	b.n	800394c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_UART_IRQHandler+0x5c6>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fce7 	bl	8004308 <UART_EndTransmit_IT>
    return;
 800393a:	e008      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
      return;
 800393c:	bf00      	nop
 800393e:	e006      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003940:	bf00      	nop
 8003942:	e004      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003944:	bf00      	nop
 8003946:	e002      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003948:	bf00      	nop
 800394a:	e000      	b.n	800394e <HAL_UART_IRQHandler+0x5c6>
    return;
 800394c:	bf00      	nop
  }

}
 800394e:	37e8      	adds	r7, #232	@ 0xe8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80039c2:	f023 030c 	bic.w	r3, r3, #12
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4aa7      	ldr	r2, [pc, #668]	@ (8003cac <UART_SetConfig+0x318>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d120      	bne.n	8003a56 <UART_SetConfig+0xc2>
 8003a14:	4ba6      	ldr	r3, [pc, #664]	@ (8003cb0 <UART_SetConfig+0x31c>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d817      	bhi.n	8003a50 <UART_SetConfig+0xbc>
 8003a20:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <UART_SetConfig+0x94>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a45 	.word	0x08003a45
 8003a30:	08003a4b 	.word	0x08003a4b
 8003a34:	08003a3f 	.word	0x08003a3f
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e0b5      	b.n	8003baa <UART_SetConfig+0x216>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e0b2      	b.n	8003baa <UART_SetConfig+0x216>
 8003a44:	2304      	movs	r3, #4
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e0af      	b.n	8003baa <UART_SetConfig+0x216>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e0ac      	b.n	8003baa <UART_SetConfig+0x216>
 8003a50:	2310      	movs	r3, #16
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e0a9      	b.n	8003baa <UART_SetConfig+0x216>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a96      	ldr	r2, [pc, #600]	@ (8003cb4 <UART_SetConfig+0x320>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d124      	bne.n	8003aaa <UART_SetConfig+0x116>
 8003a60:	4b93      	ldr	r3, [pc, #588]	@ (8003cb0 <UART_SetConfig+0x31c>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a6c:	d011      	beq.n	8003a92 <UART_SetConfig+0xfe>
 8003a6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a72:	d817      	bhi.n	8003aa4 <UART_SetConfig+0x110>
 8003a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a78:	d011      	beq.n	8003a9e <UART_SetConfig+0x10a>
 8003a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a7e:	d811      	bhi.n	8003aa4 <UART_SetConfig+0x110>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0xf8>
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a88:	d006      	beq.n	8003a98 <UART_SetConfig+0x104>
 8003a8a:	e00b      	b.n	8003aa4 <UART_SetConfig+0x110>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e08b      	b.n	8003baa <UART_SetConfig+0x216>
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e088      	b.n	8003baa <UART_SetConfig+0x216>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e085      	b.n	8003baa <UART_SetConfig+0x216>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e082      	b.n	8003baa <UART_SetConfig+0x216>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e07f      	b.n	8003baa <UART_SetConfig+0x216>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a82      	ldr	r2, [pc, #520]	@ (8003cb8 <UART_SetConfig+0x324>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d124      	bne.n	8003afe <UART_SetConfig+0x16a>
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cb0 <UART_SetConfig+0x31c>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003abc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ac0:	d011      	beq.n	8003ae6 <UART_SetConfig+0x152>
 8003ac2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ac6:	d817      	bhi.n	8003af8 <UART_SetConfig+0x164>
 8003ac8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003acc:	d011      	beq.n	8003af2 <UART_SetConfig+0x15e>
 8003ace:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ad2:	d811      	bhi.n	8003af8 <UART_SetConfig+0x164>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x14c>
 8003ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003adc:	d006      	beq.n	8003aec <UART_SetConfig+0x158>
 8003ade:	e00b      	b.n	8003af8 <UART_SetConfig+0x164>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e061      	b.n	8003baa <UART_SetConfig+0x216>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e05e      	b.n	8003baa <UART_SetConfig+0x216>
 8003aec:	2304      	movs	r3, #4
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e05b      	b.n	8003baa <UART_SetConfig+0x216>
 8003af2:	2308      	movs	r3, #8
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e058      	b.n	8003baa <UART_SetConfig+0x216>
 8003af8:	2310      	movs	r3, #16
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e055      	b.n	8003baa <UART_SetConfig+0x216>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <UART_SetConfig+0x328>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d124      	bne.n	8003b52 <UART_SetConfig+0x1be>
 8003b08:	4b69      	ldr	r3, [pc, #420]	@ (8003cb0 <UART_SetConfig+0x31c>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b14:	d011      	beq.n	8003b3a <UART_SetConfig+0x1a6>
 8003b16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b1a:	d817      	bhi.n	8003b4c <UART_SetConfig+0x1b8>
 8003b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b20:	d011      	beq.n	8003b46 <UART_SetConfig+0x1b2>
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b26:	d811      	bhi.n	8003b4c <UART_SetConfig+0x1b8>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <UART_SetConfig+0x1a0>
 8003b2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b30:	d006      	beq.n	8003b40 <UART_SetConfig+0x1ac>
 8003b32:	e00b      	b.n	8003b4c <UART_SetConfig+0x1b8>
 8003b34:	2300      	movs	r3, #0
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e037      	b.n	8003baa <UART_SetConfig+0x216>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e034      	b.n	8003baa <UART_SetConfig+0x216>
 8003b40:	2304      	movs	r3, #4
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e031      	b.n	8003baa <UART_SetConfig+0x216>
 8003b46:	2308      	movs	r3, #8
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e02e      	b.n	8003baa <UART_SetConfig+0x216>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e02b      	b.n	8003baa <UART_SetConfig+0x216>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5a      	ldr	r2, [pc, #360]	@ (8003cc0 <UART_SetConfig+0x32c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d124      	bne.n	8003ba6 <UART_SetConfig+0x212>
 8003b5c:	4b54      	ldr	r3, [pc, #336]	@ (8003cb0 <UART_SetConfig+0x31c>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003b64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b68:	d011      	beq.n	8003b8e <UART_SetConfig+0x1fa>
 8003b6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b6e:	d817      	bhi.n	8003ba0 <UART_SetConfig+0x20c>
 8003b70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b74:	d011      	beq.n	8003b9a <UART_SetConfig+0x206>
 8003b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b7a:	d811      	bhi.n	8003ba0 <UART_SetConfig+0x20c>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <UART_SetConfig+0x1f4>
 8003b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b84:	d006      	beq.n	8003b94 <UART_SetConfig+0x200>
 8003b86:	e00b      	b.n	8003ba0 <UART_SetConfig+0x20c>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e00d      	b.n	8003baa <UART_SetConfig+0x216>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e00a      	b.n	8003baa <UART_SetConfig+0x216>
 8003b94:	2304      	movs	r3, #4
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e007      	b.n	8003baa <UART_SetConfig+0x216>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e004      	b.n	8003baa <UART_SetConfig+0x216>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e001      	b.n	8003baa <UART_SetConfig+0x216>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb2:	d15b      	bne.n	8003c6c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003bb4:	7ffb      	ldrb	r3, [r7, #31]
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d827      	bhi.n	8003c0a <UART_SetConfig+0x276>
 8003bba:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <UART_SetConfig+0x22c>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003bfb 	.word	0x08003bfb
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7fe fef8 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61b8      	str	r0, [r7, #24]
        break;
 8003bea:	e013      	b.n	8003c14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7fe ff16 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b33      	ldr	r3, [pc, #204]	@ (8003cc4 <UART_SetConfig+0x330>)
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e00c      	b.n	8003c14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fe8d 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003bfe:	61b8      	str	r0, [r7, #24]
        break;
 8003c00:	e008      	b.n	8003c14 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c06:	61bb      	str	r3, [r7, #24]
        break;
 8003c08:	e004      	b.n	8003c14 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77bb      	strb	r3, [r7, #30]
        break;
 8003c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8082 	beq.w	8003d20 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	005a      	lsls	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b0f      	cmp	r3, #15
 8003c36:	d916      	bls.n	8003c66 <UART_SetConfig+0x2d2>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3e:	d212      	bcs.n	8003c66 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f023 030f 	bic.w	r3, r3, #15
 8003c48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	89fb      	ldrh	r3, [r7, #14]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	89fa      	ldrh	r2, [r7, #14]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e05c      	b.n	8003d20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	77bb      	strb	r3, [r7, #30]
 8003c6a:	e059      	b.n	8003d20 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d835      	bhi.n	8003cde <UART_SetConfig+0x34a>
 8003c72:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <UART_SetConfig+0x2e4>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cc9 	.word	0x08003cc9
 8003c84:	08003cdf 	.word	0x08003cdf
 8003c88:	08003ccf 	.word	0x08003ccf
 8003c8c:	08003cdf 	.word	0x08003cdf
 8003c90:	08003cdf 	.word	0x08003cdf
 8003c94:	08003cdf 	.word	0x08003cdf
 8003c98:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe fe9c 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61b8      	str	r0, [r7, #24]
        break;
 8003ca2:	e021      	b.n	8003ce8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe feba 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003ca8:	61b8      	str	r0, [r7, #24]
        break;
 8003caa:	e01d      	b.n	8003ce8 <UART_SetConfig+0x354>
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	40004c00 	.word	0x40004c00
 8003cc0:	40005000 	.word	0x40005000
 8003cc4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <UART_SetConfig+0x3a4>)
 8003cca:	61bb      	str	r3, [r7, #24]
        break;
 8003ccc:	e00c      	b.n	8003ce8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe fe23 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61b8      	str	r0, [r7, #24]
        break;
 8003cd4:	e008      	b.n	8003ce8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cda:	61bb      	str	r3, [r7, #24]
        break;
 8003cdc:	e004      	b.n	8003ce8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ce6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	085a      	lsrs	r2, r3, #1
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	441a      	add	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d909      	bls.n	8003d1c <UART_SetConfig+0x388>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0e:	d205      	bcs.n	8003d1c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e001      	b.n	8003d20 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01a      	beq.n	8003e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d10a      	bne.n	8003e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b098      	sub	sp, #96	@ 0x60
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e90:	f7fc fea0 	bl	8000bd4 <HAL_GetTick>
 8003e94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d12e      	bne.n	8003f02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f88c 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d021      	beq.n	8003f02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ede:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e062      	b.n	8003fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d149      	bne.n	8003fa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f856 	bl	8003fd0 <UART_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d03c      	beq.n	8003fa4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	623b      	str	r3, [r7, #32]
   return(result);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e6      	bne.n	8003f2a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3308      	adds	r3, #8
 8003f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f7c:	61fa      	str	r2, [r7, #28]
 8003f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	69b9      	ldr	r1, [r7, #24]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e011      	b.n	8003fc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3758      	adds	r7, #88	@ 0x58
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe0:	e04f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d04b      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fea:	f7fc fdf3 	bl	8000bd4 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d302      	bcc.n	8004000 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e04e      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d037      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b80      	cmp	r3, #128	@ 0x80
 8004016:	d034      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d031      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d110      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2208      	movs	r2, #8
 8004032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f8ed 	bl	8004214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2208      	movs	r2, #8
 800403e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e029      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	d111      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8d3 	bl	8004214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0a0      	beq.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b097      	sub	sp, #92	@ 0x5c
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040de:	d10e      	bne.n	80040fe <UART_Start_Receive_IT+0x52>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <UART_Start_Receive_IT+0x48>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80040ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040f2:	e01a      	b.n	800412a <UART_Start_Receive_IT+0x7e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	22ff      	movs	r2, #255	@ 0xff
 80040f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80040fc:	e015      	b.n	800412a <UART_Start_Receive_IT+0x7e>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <UART_Start_Receive_IT+0x76>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <UART_Start_Receive_IT+0x6c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	22ff      	movs	r2, #255	@ 0xff
 8004112:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004116:	e008      	b.n	800412a <UART_Start_Receive_IT+0x7e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	227f      	movs	r2, #127	@ 0x7f
 800411c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004120:	e003      	b.n	800412a <UART_Start_Receive_IT+0x7e>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2222      	movs	r2, #34	@ 0x22
 8004136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	657b      	str	r3, [r7, #84]	@ 0x54
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800415a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004176:	d107      	bne.n	8004188 <UART_Start_Receive_IT+0xdc>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a22      	ldr	r2, [pc, #136]	@ (800420c <UART_Start_Receive_IT+0x160>)
 8004184:	669a      	str	r2, [r3, #104]	@ 0x68
 8004186:	e002      	b.n	800418e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <UART_Start_Receive_IT+0x164>)
 800418c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d019      	beq.n	80041ca <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_Start_Receive_IT+0xea>
 80041c8:	e018      	b.n	80041fc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	613b      	str	r3, [r7, #16]
   return(result);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f043 0320 	orr.w	r3, r3, #32
 80041de:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	69f9      	ldr	r1, [r7, #28]
 80041ee:	6a3a      	ldr	r2, [r7, #32]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	375c      	adds	r7, #92	@ 0x5c
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	08004505 	.word	0x08004505
 8004210:	0800435d 	.word	0x0800435d

08004214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b095      	sub	sp, #84	@ 0x54
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800423a:	643b      	str	r3, [r7, #64]	@ 0x40
 800423c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e6      	bne.n	800421c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	61fb      	str	r3, [r7, #28]
   return(result);
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800426e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	2b01      	cmp	r3, #1
 8004288:	d118      	bne.n	80042bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60bb      	str	r3, [r7, #8]
   return(result);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6979      	ldr	r1, [r7, #20]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	613b      	str	r3, [r7, #16]
   return(result);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e6      	bne.n	800428a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042d0:	bf00      	nop
 80042d2:	3754      	adds	r7, #84	@ 0x54
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff fb34 	bl	8003968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fb00 	bl	8003954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004354:	bf00      	nop
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b09c      	sub	sp, #112	@ 0x70
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800436a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004374:	2b22      	cmp	r3, #34	@ 0x22
 8004376:	f040 80b9 	bne.w	80044ec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004380:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004384:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004388:	b2d9      	uxtb	r1, r3
 800438a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800438e:	b2da      	uxtb	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	400a      	ands	r2, r1
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 809c 	bne.w	80044fc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	667b      	str	r3, [r7, #100]	@ 0x64
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004416:	647a      	str	r2, [r7, #68]	@ 0x44
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d018      	beq.n	800447e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	623b      	str	r3, [r7, #32]
   return(result);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004460:	663b      	str	r3, [r7, #96]	@ 0x60
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800446a:	633b      	str	r3, [r7, #48]	@ 0x30
 800446c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e6      	bne.n	800444c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	2b01      	cmp	r3, #1
 8004484:	d12e      	bne.n	80044e4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	60fb      	str	r3, [r7, #12]
   return(result);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0310 	bic.w	r3, r3, #16
 80044a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	69b9      	ldr	r1, [r7, #24]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	617b      	str	r3, [r7, #20]
   return(result);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e6      	bne.n	800448c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d103      	bne.n	80044d4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2210      	movs	r2, #16
 80044d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fa4d 	bl	800397c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044e2:	e00b      	b.n	80044fc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc f851 	bl	800058c <HAL_UART_RxCpltCallback>
}
 80044ea:	e007      	b.n	80044fc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0208 	orr.w	r2, r2, #8
 80044fa:	619a      	str	r2, [r3, #24]
}
 80044fc:	bf00      	nop
 80044fe:	3770      	adds	r7, #112	@ 0x70
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b09c      	sub	sp, #112	@ 0x70
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004512:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451c:	2b22      	cmp	r3, #34	@ 0x22
 800451e:	f040 80b9 	bne.w	8004694 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004528:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004532:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800453a:	4013      	ands	r3, r2
 800453c:	b29a      	uxth	r2, r3
 800453e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004540:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 809c 	bne.w	80046a4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800457a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004580:	667b      	str	r3, [r7, #100]	@ 0x64
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800458a:	657b      	str	r3, [r7, #84]	@ 0x54
 800458c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e6      	bne.n	800456c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3308      	adds	r3, #8
 80045bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045be:	643a      	str	r2, [r7, #64]	@ 0x40
 80045c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e5      	bne.n	800459e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d018      	beq.n	8004626 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	61fb      	str	r3, [r7, #28]
   return(result);
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004614:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462a:	2b01      	cmp	r3, #1
 800462c:	d12e      	bne.n	800468c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	60bb      	str	r3, [r7, #8]
   return(result);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	613b      	str	r3, [r7, #16]
   return(result);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e6      	bne.n	8004634 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b10      	cmp	r3, #16
 8004672:	d103      	bne.n	800467c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2210      	movs	r2, #16
 800467a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff f979 	bl	800397c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800468a:	e00b      	b.n	80046a4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fb ff7d 	bl	800058c <HAL_UART_RxCpltCallback>
}
 8004692:	e007      	b.n	80046a4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	619a      	str	r2, [r3, #24]
}
 80046a4:	bf00      	nop
 80046a6:	3770      	adds	r7, #112	@ 0x70
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046c8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4013      	ands	r3, r2
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	1d3b      	adds	r3, r7, #4
 8004700:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <memset>:
 8004732:	4402      	add	r2, r0
 8004734:	4603      	mov	r3, r0
 8004736:	4293      	cmp	r3, r2
 8004738:	d100      	bne.n	800473c <memset+0xa>
 800473a:	4770      	bx	lr
 800473c:	f803 1b01 	strb.w	r1, [r3], #1
 8004740:	e7f9      	b.n	8004736 <memset+0x4>
	...

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	@ (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	@ (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	@ (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	@ (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f818 	bl	800478c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08004818 	.word	0x08004818
 8004780:	08004818 	.word	0x08004818
 8004784:	08004818 	.word	0x08004818
 8004788:	0800481c 	.word	0x0800481c

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
