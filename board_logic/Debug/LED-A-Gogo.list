
LED-A-Gogo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  0000a0d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  0000a0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0800805c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0d4  2**0
                  CONTENTS
 10 .bss          00000654  200000d4  200000d4  0000a0d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000728  20000728  0000a0d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a429  00000000  00000000  0000a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a9  00000000  00000000  0002452d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  00027cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011df  00000000  00000000  000293c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021362  00000000  00000000  0002a59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb1b  00000000  00000000  0004b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2fe1  00000000  00000000  0006841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b3fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bf8  00000000  00000000  0012b440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00132038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee0 	.word	0x08007ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	08007ee0 	.word	0x08007ee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800028e:	f000 fc77 	bl	8000b80 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000298:	f107 030f 	add.w	r3, r7, #15
 800029c:	2201      	movs	r2, #1
 800029e:	2120      	movs	r1, #32
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fcb3 	bl	8000c0c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80002b0:	f107 030f 	add.w	r3, r7, #15
 80002b4:	2201      	movs	r2, #1
 80002b6:	2123      	movs	r1, #35	@ 0x23
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fca7 	bl	8000c0c <GYRO_IO_Write>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 80002da:	f000 fc51 	bl	8000b80 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	2201      	movs	r2, #1
 80002e2:	210f      	movs	r1, #15
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fcc3 	bl	8000c70 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	2201      	movs	r2, #1
 80002fe:	2124      	movs	r1, #36	@ 0x24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fcb5 	bl	8000c70 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800030c:	b2db      	uxtb	r3, r3
 800030e:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	2201      	movs	r2, #1
 8000314:	2124      	movs	r1, #36	@ 0x24
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fc78 	bl	8000c0c <GYRO_IO_Write>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800032e:	2300      	movs	r3, #0
 8000330:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000332:	88fb      	ldrh	r3, [r7, #6]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000338:	f107 030f 	add.w	r3, r7, #15
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fc63 	bl	8000c0c <GYRO_IO_Write>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b084      	sub	sp, #16
 8000352:	af00      	add	r7, sp, #0
 8000354:	4603      	mov	r3, r0
 8000356:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000358:	2300      	movs	r3, #0
 800035a:	73fb      	strb	r3, [r7, #15]
 800035c:	2300      	movs	r3, #0
 800035e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000360:	f107 030f 	add.w	r3, r7, #15
 8000364:	2201      	movs	r2, #1
 8000366:	2130      	movs	r1, #48	@ 0x30
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fc81 	bl	8000c70 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800036e:	f107 030e 	add.w	r3, r7, #14
 8000372:	2201      	movs	r2, #1
 8000374:	2122      	movs	r1, #34	@ 0x22
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fc7a 	bl	8000c70 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	121b      	asrs	r3, r3, #8
 800038c:	b25a      	sxtb	r2, r3
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	b25b      	sxtb	r3, r3
 8000392:	4313      	orrs	r3, r2
 8000394:	b25b      	sxtb	r3, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800039a:	7bbb      	ldrb	r3, [r7, #14]
 800039c:	f023 0320 	bic.w	r3, r3, #32
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80003b0:	f107 030f 	add.w	r3, r7, #15
 80003b4:	2201      	movs	r2, #1
 80003b6:	2130      	movs	r1, #48	@ 0x30
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fc27 	bl	8000c0c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80003be:	f107 030e 	add.w	r3, r7, #14
 80003c2:	2201      	movs	r2, #1
 80003c4:	2122      	movs	r1, #34	@ 0x22
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fc20 	bl	8000c0c <GYRO_IO_Write>
}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80003de:	f107 030f 	add.w	r3, r7, #15
 80003e2:	2201      	movs	r2, #1
 80003e4:	2122      	movs	r1, #34	@ 0x22
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fc42 	bl	8000c70 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10a      	bne.n	8000408 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000402:	b2db      	uxtb	r3, r3
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e00c      	b.n	8000422 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d109      	bne.n	8000422 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	f023 0308 	bic.w	r3, r3, #8
 8000414:	b2db      	uxtb	r3, r3
 8000416:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	b2db      	uxtb	r3, r3
 8000420:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000422:	f107 030f 	add.w	r3, r7, #15
 8000426:	2201      	movs	r2, #1
 8000428:	2122      	movs	r1, #34	@ 0x22
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fbee 	bl	8000c0c <GYRO_IO_Write>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000442:	f107 030f 	add.w	r3, r7, #15
 8000446:	2201      	movs	r2, #1
 8000448:	2122      	movs	r1, #34	@ 0x22
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fc10 	bl	8000c70 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d107      	bne.n	8000466 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800045c:	b2db      	uxtb	r3, r3
 800045e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	73fb      	strb	r3, [r7, #15]
 8000464:	e009      	b.n	800047a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d106      	bne.n	800047a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	f023 0308 	bic.w	r3, r3, #8
 8000472:	b2db      	uxtb	r3, r3
 8000474:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800047a:	f107 030f 	add.w	r3, r7, #15
 800047e:	2201      	movs	r2, #1
 8000480:	2122      	movs	r1, #34	@ 0x22
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fbc2 	bl	8000c0c <GYRO_IO_Write>
}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800049a:	f107 030f 	add.w	r3, r7, #15
 800049e:	2201      	movs	r2, #1
 80004a0:	2121      	movs	r1, #33	@ 0x21
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fbe4 	bl	8000c70 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80004b2:	7bfa      	ldrb	r2, [r7, #15]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80004bc:	f107 030f 	add.w	r3, r7, #15
 80004c0:	2201      	movs	r2, #1
 80004c2:	2121      	movs	r1, #33	@ 0x21
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 fba1 	bl	8000c0c <GYRO_IO_Write>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80004dc:	f107 030f 	add.w	r3, r7, #15
 80004e0:	2201      	movs	r2, #1
 80004e2:	2124      	movs	r1, #36	@ 0x24
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fbc3 	bl	8000c70 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f023 0310 	bic.w	r3, r3, #16
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80004f4:	7bfa      	ldrb	r2, [r7, #15]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80004fe:	f107 030f 	add.w	r3, r7, #15
 8000502:	2201      	movs	r2, #1
 8000504:	2124      	movs	r1, #36	@ 0x24
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb80 	bl	8000c0c <GYRO_IO_Write>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800053e:	f107 030f 	add.w	r3, r7, #15
 8000542:	2201      	movs	r2, #1
 8000544:	2123      	movs	r1, #35	@ 0x23
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fb92 	bl	8000c70 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	2206      	movs	r2, #6
 8000552:	2128      	movs	r1, #40	@ 0x28
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fb8b 	bl	8000c70 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000560:	2b00      	cmp	r3, #0
 8000562:	d121      	bne.n	80005a8 <I3G4250D_ReadXYZAngRate+0x94>
  {
    for (i = 0; i < 3; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	e01a      	b.n	80005a0 <I3G4250D_ReadXYZAngRate+0x8c>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800056a:	6a3b      	ldr	r3, [r7, #32]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	3301      	adds	r3, #1
 8000570:	3328      	adds	r3, #40	@ 0x28
 8000572:	443b      	add	r3, r7
 8000574:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b29b      	uxth	r3, r3
 800057c:	6a3a      	ldr	r2, [r7, #32]
 800057e:	0052      	lsls	r2, r2, #1
 8000580:	3228      	adds	r2, #40	@ 0x28
 8000582:	443a      	add	r2, r7
 8000584:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000588:	4413      	add	r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	b21a      	sxth	r2, r3
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	3328      	adds	r3, #40	@ 0x28
 8000594:	443b      	add	r3, r7
 8000596:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 800059a:	6a3b      	ldr	r3, [r7, #32]
 800059c:	3301      	adds	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	dde1      	ble.n	800056a <I3G4250D_ReadXYZAngRate+0x56>
 80005a6:	e020      	b.n	80005ea <I3G4250D_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
 80005ac:	e01a      	b.n	80005e4 <I3G4250D_ReadXYZAngRate+0xd0>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	3328      	adds	r3, #40	@ 0x28
 80005b4:	443b      	add	r3, r7
 80005b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	b29b      	uxth	r3, r3
 80005be:	6a3a      	ldr	r2, [r7, #32]
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	3201      	adds	r2, #1
 80005c4:	3228      	adds	r2, #40	@ 0x28
 80005c6:	443a      	add	r2, r7
 80005c8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80005cc:	4413      	add	r3, r2
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	3328      	adds	r3, #40	@ 0x28
 80005d8:	443b      	add	r3, r7
 80005da:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	3301      	adds	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	dde1      	ble.n	80005ae <I3G4250D_ReadXYZAngRate+0x9a>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80005f0:	2b20      	cmp	r3, #32
 80005f2:	d00c      	beq.n	800060e <I3G4250D_ReadXYZAngRate+0xfa>
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	dc0d      	bgt.n	8000614 <I3G4250D_ReadXYZAngRate+0x100>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <I3G4250D_ReadXYZAngRate+0xee>
 80005fc:	2b10      	cmp	r3, #16
 80005fe:	d003      	beq.n	8000608 <I3G4250D_ReadXYZAngRate+0xf4>
 8000600:	e008      	b.n	8000614 <I3G4250D_ReadXYZAngRate+0x100>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <I3G4250D_ReadXYZAngRate+0x144>)
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000606:	e005      	b.n	8000614 <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <I3G4250D_ReadXYZAngRate+0x148>)
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800060c:	e002      	b.n	8000614 <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <I3G4250D_ReadXYZAngRate+0x14c>)
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8000612:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	e016      	b.n	8000648 <I3G4250D_ReadXYZAngRate+0x134>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800061a:	6a3b      	ldr	r3, [r7, #32]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	3328      	adds	r3, #40	@ 0x28
 8000620:	443b      	add	r3, r7
 8000622:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800063a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063e:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	3301      	adds	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	2b02      	cmp	r3, #2
 800064c:	dde5      	ble.n	800061a <I3G4250D_ReadXYZAngRate+0x106>
  }
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	410c0000 	.word	0x410c0000
 800065c:	418c0000 	.word	0x418c0000
 8000660:	428c0000 	.word	0x428c0000

08000664 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000672:	f000 fa85 	bl	8000b80 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800067c:	f107 030f 	add.w	r3, r7, #15
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fac1 	bl	8000c0c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000694:	f107 030f 	add.w	r3, r7, #15
 8000698:	2201      	movs	r2, #1
 800069a:	2123      	movs	r1, #35	@ 0x23
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fab5 	bl	8000c0c <GYRO_IO_Write>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80006be:	f000 fa5f 	bl	8000b80 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	2201      	movs	r2, #1
 80006c6:	210f      	movs	r1, #15
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fad1 	bl	8000c70 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	2201      	movs	r2, #1
 80006e2:	2124      	movs	r1, #36	@ 0x24
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fac3 	bl	8000c70 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	2201      	movs	r2, #1
 80006f8:	2124      	movs	r1, #36	@ 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fa86 	bl	8000c0c <GYRO_IO_Write>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800071c:	f107 030f 	add.w	r3, r7, #15
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fa71 	bl	8000c0c <GYRO_IO_Write>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	2300      	movs	r3, #0
 8000742:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	2201      	movs	r2, #1
 800074a:	2130      	movs	r1, #48	@ 0x30
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fa8f 	bl	8000c70 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000752:	f107 030e 	add.w	r3, r7, #14
 8000756:	2201      	movs	r2, #1
 8000758:	2122      	movs	r1, #34	@ 0x22
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa88 	bl	8000c70 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000766:	b2db      	uxtb	r3, r3
 8000768:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	121b      	asrs	r3, r3, #8
 8000770:	b25a      	sxtb	r2, r3
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800077e:	7bbb      	ldrb	r3, [r7, #14]
 8000780:	f023 0320 	bic.w	r3, r3, #32
 8000784:	b2db      	uxtb	r3, r3
 8000786:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	4313      	orrs	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000794:	f107 030f 	add.w	r3, r7, #15
 8000798:	2201      	movs	r2, #1
 800079a:	2130      	movs	r1, #48	@ 0x30
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fa35 	bl	8000c0c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80007a2:	f107 030e 	add.w	r3, r7, #14
 80007a6:	2201      	movs	r2, #1
 80007a8:	2122      	movs	r1, #34	@ 0x22
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fa2e 	bl	8000c0c <GYRO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80007c2:	f107 030f 	add.w	r3, r7, #15
 80007c6:	2201      	movs	r2, #1
 80007c8:	2122      	movs	r1, #34	@ 0x22
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa50 	bl	8000c70 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10a      	bne.n	80007ec <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	e00c      	b.n	8000806 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d109      	bne.n	8000806 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0308 	bic.w	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	b2db      	uxtb	r3, r3
 8000804:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000806:	f107 030f 	add.w	r3, r7, #15
 800080a:	2201      	movs	r2, #1
 800080c:	2122      	movs	r1, #34	@ 0x22
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f9fc 	bl	8000c0c <GYRO_IO_Write>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000826:	f107 030f 	add.w	r3, r7, #15
 800082a:	2201      	movs	r2, #1
 800082c:	2122      	movs	r1, #34	@ 0x22
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fa1e 	bl	8000c70 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d107      	bne.n	800084a <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e009      	b.n	800085e <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d106      	bne.n	800085e <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f023 0308 	bic.w	r3, r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800085e:	f107 030f 	add.w	r3, r7, #15
 8000862:	2201      	movs	r2, #1
 8000864:	2122      	movs	r1, #34	@ 0x22
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f9d0 	bl	8000c0c <GYRO_IO_Write>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800087e:	f107 030f 	add.w	r3, r7, #15
 8000882:	2201      	movs	r2, #1
 8000884:	2121      	movs	r1, #33	@ 0x21
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f9f2 	bl	8000c70 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000892:	b2db      	uxtb	r3, r3
 8000894:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000896:	7bfa      	ldrb	r2, [r7, #15]
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4313      	orrs	r3, r2
 800089c:	b2db      	uxtb	r3, r3
 800089e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80008a0:	f107 030f 	add.w	r3, r7, #15
 80008a4:	2201      	movs	r2, #1
 80008a6:	2121      	movs	r1, #33	@ 0x21
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f9af 	bl	8000c0c <GYRO_IO_Write>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	2201      	movs	r2, #1
 80008c6:	2124      	movs	r1, #36	@ 0x24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f9d1 	bl	8000c70 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f023 0310 	bic.w	r3, r3, #16
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4313      	orrs	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008e2:	f107 030f 	add.w	r3, r7, #15
 80008e6:	2201      	movs	r2, #1
 80008e8:	2124      	movs	r1, #36	@ 0x24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f98e 	bl	8000c0c <GYRO_IO_Write>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000922:	f107 030f 	add.w	r3, r7, #15
 8000926:	2201      	movs	r2, #1
 8000928:	2123      	movs	r1, #35	@ 0x23
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f9a0 	bl	8000c70 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	2206      	movs	r2, #6
 8000936:	2128      	movs	r1, #40	@ 0x28
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f999 	bl	8000c70 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000944:	2b00      	cmp	r3, #0
 8000946:	d121      	bne.n	800098c <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
 800094c:	e01a      	b.n	8000984 <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	3301      	adds	r3, #1
 8000954:	3328      	adds	r3, #40	@ 0x28
 8000956:	443b      	add	r3, r7
 8000958:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	3228      	adds	r2, #40	@ 0x28
 8000966:	443a      	add	r2, r7
 8000968:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800096c:	4413      	add	r3, r2
 800096e:	b29b      	uxth	r3, r3
 8000970:	b21a      	sxth	r2, r3
 8000972:	6a3b      	ldr	r3, [r7, #32]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	3328      	adds	r3, #40	@ 0x28
 8000978:	443b      	add	r3, r7
 800097a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	3301      	adds	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	2b02      	cmp	r3, #2
 8000988:	dde1      	ble.n	800094e <L3GD20_ReadXYZAngRate+0x56>
 800098a:	e020      	b.n	80009ce <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
 8000990:	e01a      	b.n	80009c8 <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	3328      	adds	r3, #40	@ 0x28
 8000998:	443b      	add	r3, r7
 800099a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	6a3a      	ldr	r2, [r7, #32]
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	3201      	adds	r2, #1
 80009a8:	3228      	adds	r2, #40	@ 0x28
 80009aa:	443a      	add	r2, r7
 80009ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80009b0:	4413      	add	r3, r2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	3328      	adds	r3, #40	@ 0x28
 80009bc:	443b      	add	r3, r7
 80009be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	3301      	adds	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	dde1      	ble.n	8000992 <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80009d4:	2b20      	cmp	r3, #32
 80009d6:	d00c      	beq.n	80009f2 <L3GD20_ReadXYZAngRate+0xfa>
 80009d8:	2b20      	cmp	r3, #32
 80009da:	dc0d      	bgt.n	80009f8 <L3GD20_ReadXYZAngRate+0x100>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <L3GD20_ReadXYZAngRate+0xee>
 80009e0:	2b10      	cmp	r3, #16
 80009e2:	d003      	beq.n	80009ec <L3GD20_ReadXYZAngRate+0xf4>
 80009e4:	e008      	b.n	80009f8 <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <L3GD20_ReadXYZAngRate+0x144>)
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80009ea:	e005      	b.n	80009f8 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <L3GD20_ReadXYZAngRate+0x148>)
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80009f0:	e002      	b.n	80009f8 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <L3GD20_ReadXYZAngRate+0x14c>)
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80009f6:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	e016      	b.n	8000a2c <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	3328      	adds	r3, #40	@ 0x28
 8000a04:	443b      	add	r3, r7
 8000a06:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a22:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	dde5      	ble.n	80009fe <L3GD20_ReadXYZAngRate+0x106>
  }
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	@ 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	410c0000 	.word	0x410c0000
 8000a40:	418c0000 	.word	0x418c0000
 8000a44:	428c0000 	.word	0x428c0000

08000a48 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000a4c:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a4e:	f003 ff9f 	bl	8004990 <HAL_SPI_GetState>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d12c      	bne.n	8000ab2 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <SPIx_Init+0x74>)
 8000a5c:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a60:	2218      	movs	r2, #24
 8000a62:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a84:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a88:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a96:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <SPIx_Init+0x70>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <SPIx_Init+0x70>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8000aa6:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <SPIx_Init+0x70>)
 8000aa8:	f000 f836 	bl	8000b18 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000aac:	4802      	ldr	r0, [pc, #8]	@ (8000ab8 <SPIx_Init+0x70>)
 8000aae:	f003 fb6f 	bl	8004190 <HAL_SPI_Init>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000f0 	.word	0x200000f0
 8000abc:	40013000 	.word	0x40013000

08000ac0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <SPIx_WriteRead+0x38>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f107 020f 	add.w	r2, r7, #15
 8000ad6:	1df9      	adds	r1, r7, #7
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2301      	movs	r3, #1
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <SPIx_WriteRead+0x3c>)
 8000ade:	f003 fc2a 	bl	8004336 <HAL_SPI_TransmitReceive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8000ae8:	f000 f80a 	bl	8000b00 <SPIx_Error>
  }
  
  return receivedbyte;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000068 	.word	0x20000068
 8000afc:	200000f0 	.word	0x200000f0

08000b00 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <SPIx_Error+0x14>)
 8000b06:	f003 fbee 	bl	80042e6 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI communication BUS */
  SPIx_Init();
 8000b0a:	f7ff ff9d 	bl	8000a48 <SPIx_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000f0 	.word	0x200000f0

08000b18 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a15      	ldr	r2, [pc, #84]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b42:	6153      	str	r3, [r2, #20]
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <SPIx_MspInit+0x64>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000b50:	23e0      	movs	r3, #224	@ 0xe0
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000b60:	2305      	movs	r3, #5
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6e:	f001 fad9 	bl	8002124 <HAL_GPIO_Init>
}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <GYRO_IO_Init+0x88>)
 8000bb6:	f001 fab5 	bl	8002124 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <GYRO_IO_Init+0x88>)
 8000bc0:	f001 fd06 	bl	80025d0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000bca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bce:	6153      	str	r3, [r2, #20]
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <GYRO_IO_Init+0x84>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <GYRO_IO_Init+0x88>)
 8000bf4:	f001 fa96 	bl	8002124 <HAL_GPIO_Init>
  
  SPIx_Init();
 8000bf8:	f7ff ff26 	bl	8000a48 <SPIx_Init>
}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	48001000 	.word	0x48001000

08000c0c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d903      	bls.n	8000c2a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c28:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <GYRO_IO_Write+0x60>)
 8000c30:	f001 fcce 	bl	80025d0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff42 	bl	8000ac0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000c3c:	e00a      	b.n	8000c54 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff3c 	bl	8000ac0 <SPIx_WriteRead>
    NumByteToWrite--;
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3301      	adds	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8000c54:	883b      	ldrh	r3, [r7, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f1      	bne.n	8000c3e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <GYRO_IO_Write+0x60>)
 8000c60:	f001 fcb6 	bl	80025d0 <HAL_GPIO_WritePin>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	48001000 	.word	0x48001000

08000c70 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8000c80:	883b      	ldrh	r3, [r7, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d904      	bls.n	8000c90 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	e003      	b.n	8000c98 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c96:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4810      	ldr	r0, [pc, #64]	@ (8000ce0 <GYRO_IO_Read+0x70>)
 8000c9e:	f001 fc97 	bl	80025d0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff0b 	bl	8000ac0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000caa:	e00c      	b.n	8000cc6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff07 	bl	8000ac0 <SPIx_WriteRead>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000cba:	883b      	ldrh	r3, [r7, #0]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1ef      	bne.n	8000cac <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <GYRO_IO_Read+0x70>)
 8000cd2:	f001 fc7d 	bl	80025d0 <HAL_GPIO_WritePin>
}  
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	48001000 	.word	0x48001000

08000ce4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	703b      	strb	r3, [r7, #0]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8000cfa:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <BSP_GYRO_Init+0x15c>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4798      	blx	r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	2bd4      	cmp	r3, #212	@ 0xd4
 8000d04:	d005      	beq.n	8000d12 <BSP_GYRO_Init+0x2e>
 8000d06:	4b4e      	ldr	r3, [pc, #312]	@ (8000e40 <BSP_GYRO_Init+0x15c>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	4798      	blx	r3
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2bd5      	cmp	r3, #213	@ 0xd5
 8000d10:	d145      	bne.n	8000d9e <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8000d12:	4b4c      	ldr	r3, [pc, #304]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000d14:	4a4a      	ldr	r2, [pc, #296]	@ (8000e40 <BSP_GYRO_Init+0x15c>)
 8000d16:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8000d20:	2307      	movs	r3, #7
 8000d22:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8000d24:	2330      	movs	r3, #48	@ 0x30
 8000d26:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8000d30:	2310      	movs	r3, #16
 8000d32:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000d34:	793a      	ldrb	r2, [r7, #4]
 8000d36:	797b      	ldrb	r3, [r7, #5]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000d4a:	7a3a      	ldrb	r2, [r7, #8]
 8000d4c:	7a7b      	ldrb	r3, [r7, #9]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8000d52:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	89bb      	ldrh	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8000d62:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	89ba      	ldrh	r2, [r7, #12]
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000d76:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8000d78:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8000d80:	4b30      	ldr	r3, [pc, #192]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	89ba      	ldrh	r2, [r7, #12]
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d94:	2010      	movs	r0, #16
 8000d96:	4798      	blx	r3

    ret = GYRO_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e04a      	b.n	8000e34 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <BSP_GYRO_Init+0x164>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	4798      	blx	r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	2bd3      	cmp	r3, #211	@ 0xd3
 8000da8:	d144      	bne.n	8000e34 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8000daa:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <BSP_GYRO_Init+0x164>)
 8000dae:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8000db0:	2308      	movs	r3, #8
 8000db2:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8000db8:	2307      	movs	r3, #7
 8000dba:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8000dbc:	2330      	movs	r3, #48	@ 0x30
 8000dbe:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000dcc:	793a      	ldrb	r2, [r7, #4]
 8000dce:	797b      	ldrb	r3, [r7, #5]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000de2:	7a3a      	ldrb	r2, [r7, #8]
 8000de4:	7a7b      	ldrb	r3, [r7, #9]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8000dea:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	89ba      	ldrh	r2, [r7, #12]
 8000e02:	4610      	mov	r0, r2
 8000e04:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8000e06:	2300      	movs	r3, #0
 8000e08:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000e0e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8000e10:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8000e18:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1e:	89ba      	ldrh	r2, [r7, #12]
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	4610      	mov	r0, r2
 8000e24:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <BSP_GYRO_Init+0x160>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	2010      	movs	r0, #16
 8000e2e:	4798      	blx	r3

    ret = GYRO_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000034 	.word	0x20000034
 8000e44:	20000154 	.word	0x20000154
 8000e48:	20000000 	.word	0x20000000

08000e4c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <BSP_GYRO_GetXYZ+0x24>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <BSP_GYRO_GetXYZ+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	4798      	blx	r3
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000154 	.word	0x20000154

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f000 ff2e 	bl	8001cd8 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (BSP_GYRO_Init() != GYRO_OK) {
 8000e7c:	f7ff ff32 	bl	8000ce4 <BSP_GYRO_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <main+0x16>
          Error_Handler();
 8000e86:	f000 fc2d 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f823 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 f9a3 	bl	80011d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e92:	f000 f883 	bl	8000f9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e96:	f000 f8c1 	bl	800101c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000e9a:	f000 f97b 	bl	8001194 <MX_USB_PCD_Init>
  MX_UART5_Init();
 8000e9e:	f000 f949 	bl	8001134 <MX_UART5_Init>
  MX_TIM2_Init();
 8000ea2:	f000 f8f9 	bl	8001098 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4907      	ldr	r1, [pc, #28]	@ (8000ec8 <main+0x54>)
 8000eaa:	4808      	ldr	r0, [pc, #32]	@ (8000ecc <main+0x58>)
 8000eac:	f004 fc59 	bl	8005762 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <main+0x5c>)
 8000eb2:	f003 ff4d 	bl	8004d50 <HAL_TIM_Base_Start_IT>
  srand(HAL_GetTick());
 8000eb6:	f000 ff69 	bl	8001d8c <HAL_GetTick>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 fe6b 	bl	8006b98 <srand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <main+0x4e>
 8000ec6:	bf00      	nop
 8000ec8:	200005c4 	.word	0x200005c4
 8000ecc:	2000025c 	.word	0x2000025c
 8000ed0:	20000210 	.word	0x20000210

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b09e      	sub	sp, #120	@ 0x78
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ede:	2228      	movs	r2, #40	@ 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 ffad 	bl	8006e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	223c      	movs	r2, #60	@ 0x3c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 ff9f 	bl	8006e42 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f04:	2303      	movs	r3, #3
 8000f06:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f08:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f0c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f12:	2301      	movs	r3, #1
 8000f14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f22:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fd60 	bl	80029f4 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 fbd3 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f54:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fd58 	bl	8003a10 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f66:	f000 fbbd 	bl	80016e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <SystemClock_Config+0xc4>)
 8000f6c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ff58 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f8a:	f000 fbab 	bl	80016e4 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3778      	adds	r7, #120	@ 0x78
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	00020030 	.word	0x00020030

08000f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f001 fb12 	bl	8002600 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fb7f 	bl	80016e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f001 fba4 	bl	8002736 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fb76 	bl	80016e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f001 fbe6 	bl	80027cc <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fb6d 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000158 	.word	0x20000158
 8001014:	40005400 	.word	0x40005400
 8001018:	2000090e 	.word	0x2000090e

0800101c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001022:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <MX_SPI1_Init+0x78>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001036:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800103a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_SPI1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_SPI1_Init+0x74>)
 800104a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001052:	2208      	movs	r2, #8
 8001054:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_SPI1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_SPI1_Init+0x74>)
 800106a:	2207      	movs	r2, #7
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_SPI1_Init+0x74>)
 8001076:	2208      	movs	r2, #8
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_SPI1_Init+0x74>)
 800107c:	f003 f888 	bl	8004190 <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fb2d 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001ac 	.word	0x200001ac
 8001094:	40013000 	.word	0x40013000

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010c0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80010c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010ce:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010e2:	f003 fddd 	bl	8004ca0 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80010ec:	f000 fafa 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <MX_TIM2_Init+0x98>)
 80010fe:	f003 ff93 	bl	8005028 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001108:	f000 faec 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_TIM2_Init+0x98>)
 800111a:	f004 f9ad 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 fade 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000210 	.word	0x20000210

08001134 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_UART5_Init+0x58>)
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <MX_UART5_Init+0x5c>)
 800113c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_UART5_Init+0x58>)
 8001140:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001144:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_UART5_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_UART5_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_UART5_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_UART5_Init+0x58>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_UART5_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_UART5_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_UART5_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_UART5_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_UART5_Init+0x58>)
 8001178:	f004 fa1c 	bl	80055b4 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001182:	f000 faaf 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000025c 	.word	0x2000025c
 8001190:	40005000 	.word	0x40005000

08001194 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 800119a:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <MX_USB_PCD_Init+0x40>)
 800119c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_USB_PCD_Init+0x3c>)
 80011be:	f001 fb51 	bl	8002864 <HAL_PCD_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011c8:	f000 fa8c 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200002e4 	.word	0x200002e4
 80011d4:	40005c00 	.word	0x40005c00

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	@ 0x30
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a3c      	ldr	r2, [pc, #240]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b3a      	ldr	r3, [pc, #232]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a36      	ldr	r2, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 800120c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a30      	ldr	r2, [pc, #192]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001224:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a2a      	ldr	r2, [pc, #168]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a24      	ldr	r2, [pc, #144]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800127e:	2200      	movs	r2, #0
 8001280:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001284:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <MX_GPIO_Init+0x110>)
 8001286:	f001 f9a3 	bl	80025d0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800128a:	2337      	movs	r3, #55	@ 0x37
 800128c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800128e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <MX_GPIO_Init+0x110>)
 80012a0:	f000 ff40 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80012a4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80012a8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <MX_GPIO_Init+0x110>)
 80012be:	f000 ff31 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d8:	f000 ff24 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3730      	adds	r7, #48	@ 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48001000 	.word	0x48001000

080012ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART5)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a47      	ldr	r2, [pc, #284]	@ (8001418 <HAL_UART_RxCpltCallback+0x12c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	f040 8087 	bne.w	800140e <HAL_UART_RxCpltCallback+0x122>
		*/

        static uint8_t i = 0;
        static char rx_buffer[10];

        if (rx_byte != '\n' && rx_byte != '\r' && i < sizeof(rx_buffer) - 1)
 8001300:	4b46      	ldr	r3, [pc, #280]	@ (800141c <HAL_UART_RxCpltCallback+0x130>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b0a      	cmp	r3, #10
 8001306:	d013      	beq.n	8001330 <HAL_UART_RxCpltCallback+0x44>
 8001308:	4b44      	ldr	r3, [pc, #272]	@ (800141c <HAL_UART_RxCpltCallback+0x130>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	d00f      	beq.n	8001330 <HAL_UART_RxCpltCallback+0x44>
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <HAL_UART_RxCpltCallback+0x134>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d80b      	bhi.n	8001330 <HAL_UART_RxCpltCallback+0x44>
        {
            rx_buffer[i++] = rx_byte;
 8001318:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <HAL_UART_RxCpltCallback+0x134>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	b2d1      	uxtb	r1, r2
 8001320:	4a3f      	ldr	r2, [pc, #252]	@ (8001420 <HAL_UART_RxCpltCallback+0x134>)
 8001322:	7011      	strb	r1, [r2, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_UART_RxCpltCallback+0x130>)
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <HAL_UART_RxCpltCallback+0x138>)
 800132c:	5499      	strb	r1, [r3, r2]
 800132e:	e069      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
        }
        else
        {
            rx_buffer[i] = '\0';
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_UART_RxCpltCallback+0x134>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_UART_RxCpltCallback+0x138>)
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]
            i = 0;
 800133c:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_UART_RxCpltCallback+0x134>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

            uint8_t valid_command = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]

            if (rx_buffer[1] != '\0')
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_UART_RxCpltCallback+0x138>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_UART_RxCpltCallback+0x68>
            {
                valid_command = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e057      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
            }
            else
            {
                switch (rx_buffer[0])
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <HAL_UART_RxCpltCallback+0x138>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3b30      	subs	r3, #48	@ 0x30
 800135a:	2b08      	cmp	r3, #8
 800135c:	d84f      	bhi.n	80013fe <HAL_UART_RxCpltCallback+0x112>
 800135e:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <HAL_UART_RxCpltCallback+0x78>)
 8001360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001364:	08001389 	.word	0x08001389
 8001368:	0800138f 	.word	0x0800138f
 800136c:	0800139d 	.word	0x0800139d
 8001370:	080013ab 	.word	0x080013ab
 8001374:	080013b9 	.word	0x080013b9
 8001378:	080013c7 	.word	0x080013c7
 800137c:	080013d5 	.word	0x080013d5
 8001380:	080013e3 	.word	0x080013e3
 8001384:	080013f1 	.word	0x080013f1
                {
                    case '0':
                        turn_off_led();
 8001388:	f000 f852 	bl	8001430 <turn_off_led>
                        /*	[FOR DEBUGGING PURPOSES]
                        {
                            char complete_msg[] = "Game complete!!\r\n";
                            HAL_UART_Transmit(&huart5, (uint8_t*)complete_msg, strlen(complete_msg), 100);
                        }*/
                        break;
 800138c:	e03a      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>

                    case '1': HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET); break;
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001394:	4824      	ldr	r0, [pc, #144]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 8001396:	f001 f91b 	bl	80025d0 <HAL_GPIO_WritePin>
 800139a:	e033      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '2': HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET); break;
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a2:	4821      	ldr	r0, [pc, #132]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013a4:	f001 f914 	bl	80025d0 <HAL_GPIO_WritePin>
 80013a8:	e02c      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '3': HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET); break;
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b0:	481d      	ldr	r0, [pc, #116]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013b2:	f001 f90d 	bl	80025d0 <HAL_GPIO_WritePin>
 80013b6:	e025      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '4': HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET); break;
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013c0:	f001 f906 	bl	80025d0 <HAL_GPIO_WritePin>
 80013c4:	e01e      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '5': HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET); break;
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013cc:	4816      	ldr	r0, [pc, #88]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013ce:	f001 f8ff 	bl	80025d0 <HAL_GPIO_WritePin>
 80013d2:	e017      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '6': HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET); break;
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013dc:	f001 f8f8 	bl	80025d0 <HAL_GPIO_WritePin>
 80013e0:	e010      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '7': HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET); break;
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e8:	480f      	ldr	r0, [pc, #60]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013ea:	f001 f8f1 	bl	80025d0 <HAL_GPIO_WritePin>
 80013ee:	e009      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>
                    case '8': HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET); break;
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f6:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_UART_RxCpltCallback+0x13c>)
 80013f8:	f001 f8ea 	bl	80025d0 <HAL_GPIO_WritePin>
 80013fc:	e002      	b.n	8001404 <HAL_UART_RxCpltCallback+0x118>

                    default:
                        valid_command = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
                        break;
 8001402:	bf00      	nop
				HAL_UART_Transmit(&huart5, (uint8_t*)ok, strlen(ok), 100);
            }
            */
        }

        HAL_UART_Receive_IT(&huart5, &rx_byte, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	4905      	ldr	r1, [pc, #20]	@ (800141c <HAL_UART_RxCpltCallback+0x130>)
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <HAL_UART_RxCpltCallback+0x140>)
 800140a:	f004 f9aa 	bl	8005762 <HAL_UART_Receive_IT>
    }
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40005000 	.word	0x40005000
 800141c:	200005c4 	.word	0x200005c4
 8001420:	200005c5 	.word	0x200005c5
 8001424:	200005c8 	.word	0x200005c8
 8001428:	48001000 	.word	0x48001000
 800142c:	2000025c 	.word	0x2000025c

08001430 <turn_off_led>:


void turn_off_led(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, LD3_Pin|LD4_Pin|LD5_Pin|LD6_Pin|
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800143a:	4802      	ldr	r0, [pc, #8]	@ (8001444 <turn_off_led+0x14>)
 800143c:	f001 f8c8 	bl	80025d0 <HAL_GPIO_WritePin>
                            LD7_Pin|LD8_Pin|LD9_Pin|LD10_Pin, GPIO_PIN_RESET);
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	48001000 	.word	0x48001000

08001448 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b0a3      	sub	sp, #140	@ 0x8c
 800144c:	af0a      	add	r7, sp, #40	@ 0x28
 800144e:	6178      	str	r0, [r7, #20]
    if (htim->Instance == TIM2)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001458:	f040 8133 	bne.w	80016c2 <HAL_TIM_PeriodElapsedCallback+0x27a>
    {
    	/*
        uint32_t random_number= rand() % 100;	//random number
		*/

    	BSP_GYRO_GetXYZ(gyroscope_measurements);
 800145c:	489b      	ldr	r0, [pc, #620]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800145e:	f7ff fcf5 	bl	8000e4c <BSP_GYRO_GetXYZ>

    	// Signs for each axis
    	char axis_sign[3] = {'b','b','b'};
 8001462:	4a9b      	ldr	r2, [pc, #620]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001464:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4611      	mov	r1, r2
 800146c:	8019      	strh	r1, [r3, #0]
 800146e:	3302      	adds	r3, #2
 8001470:	0c12      	lsrs	r2, r2, #16
 8001472:	701a      	strb	r2, [r3, #0]

    	if (gyroscope_measurements[0] >= 0.0f) {
 8001474:	4b95      	ldr	r3, [pc, #596]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	db03      	blt.n	800148c <HAL_TIM_PeriodElapsedCallback+0x44>
    		axis_sign[0] = '+';
 8001484:	232b      	movs	r3, #43	@ 0x2b
 8001486:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 800148a:	e002      	b.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x4a>
    	} else {
    		axis_sign[0] = '-';
 800148c:	232d      	movs	r3, #45	@ 0x2d
 800148e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    	}

    	if (gyroscope_measurements[1] >= 0.0f) {
 8001492:	4b8e      	ldr	r3, [pc, #568]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001494:	edd3 7a01 	vldr	s15, [r3, #4]
 8001498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	db03      	blt.n	80014aa <HAL_TIM_PeriodElapsedCallback+0x62>
    		axis_sign[1] = '+';
 80014a2:	232b      	movs	r3, #43	@ 0x2b
 80014a4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80014a8:	e002      	b.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x68>
		} else {
			axis_sign[1] = '-';
 80014aa:	232d      	movs	r3, #45	@ 0x2d
 80014ac:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		}

    	if (gyroscope_measurements[1] >= 0.0f) {
 80014b0:	4b86      	ldr	r3, [pc, #536]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	db03      	blt.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0x80>
    		axis_sign[2] = '+';
 80014c0:	232b      	movs	r3, #43	@ 0x2b
 80014c2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80014c6:	e002      	b.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x86>
		} else {
			axis_sign[2] = '-';
 80014c8:	232d      	movs	r3, #45	@ 0x2d
 80014ca:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		}

    	int gyro_x[3] = {abs(((int)(gyroscope_measurements[0]))),
 80014ce:	4b7f      	ldr	r3, [pc, #508]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d8:	ee17 3a90 	vmov	r3, s15
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bfb8      	it	lt
 80014e0:	425b      	neglt	r3, r3
 80014e2:	653b      	str	r3, [r7, #80]	@ 0x50
    					 abs(((int)(gyroscope_measurements[0] * 10))   % 10),
 80014e4:	4b79      	ldr	r3, [pc, #484]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f6:	ee17 1a90 	vmov	r1, s15
 80014fa:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80014fc:	fb83 2301 	smull	r2, r3, r3, r1
 8001500:	109a      	asrs	r2, r3, #2
 8001502:	17cb      	asrs	r3, r1, #31
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	1aca      	subs	r2, r1, r3
 8001510:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001514:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_x[3] = {abs(((int)(gyroscope_measurements[0]))),
 8001518:	657b      	str	r3, [r7, #84]	@ 0x54
						 abs(((int)(gyroscope_measurements[0] * 100))   % 10)};
 800151a:	4b6c      	ldr	r3, [pc, #432]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152c:	ee17 1a90 	vmov	r1, s15
 8001530:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001532:	fb83 2301 	smull	r2, r3, r3, r1
 8001536:	109a      	asrs	r2, r3, #2
 8001538:	17cb      	asrs	r3, r1, #31
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	1aca      	subs	r2, r1, r3
 8001546:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800154a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_x[3] = {abs(((int)(gyroscope_measurements[0]))),
 800154e:	65bb      	str	r3, [r7, #88]	@ 0x58

    	int gyro_y[3] = {abs(((int)(gyroscope_measurements[1]))),
 8001550:	4b5e      	ldr	r3, [pc, #376]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001552:	edd3 7a01 	vldr	s15, [r3, #4]
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 3a90 	vmov	r3, s15
 800155e:	2b00      	cmp	r3, #0
 8001560:	bfb8      	it	lt
 8001562:	425b      	neglt	r3, r3
 8001564:	647b      	str	r3, [r7, #68]	@ 0x44
    					 abs(((int)(gyroscope_measurements[1] * 10))   % 10),
 8001566:	4b59      	ldr	r3, [pc, #356]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001568:	edd3 7a01 	vldr	s15, [r3, #4]
 800156c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 1a90 	vmov	r1, s15
 800157c:	4b55      	ldr	r3, [pc, #340]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800157e:	fb83 2301 	smull	r2, r3, r3, r1
 8001582:	109a      	asrs	r2, r3, #2
 8001584:	17cb      	asrs	r3, r1, #31
 8001586:	1ad2      	subs	r2, r2, r3
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	1aca      	subs	r2, r1, r3
 8001592:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001596:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_y[3] = {abs(((int)(gyroscope_measurements[1]))),
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
						 abs(((int)(gyroscope_measurements[1] * 100))   % 10)};
 800159c:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ae:	ee17 1a90 	vmov	r1, s15
 80015b2:	4b48      	ldr	r3, [pc, #288]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80015b4:	fb83 2301 	smull	r2, r3, r3, r1
 80015b8:	109a      	asrs	r2, r3, #2
 80015ba:	17cb      	asrs	r3, r1, #31
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1aca      	subs	r2, r1, r3
 80015c8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80015cc:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_y[3] = {abs(((int)(gyroscope_measurements[1]))),
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	int gyro_z[3] = {abs(((int)(gyroscope_measurements[2]))),
 80015d2:	4b3e      	ldr	r3, [pc, #248]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015dc:	ee17 3a90 	vmov	r3, s15
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bfb8      	it	lt
 80015e4:	425b      	neglt	r3, r3
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    					 abs(((int)(gyroscope_measurements[2] * 10))   % 10),
 80015e8:	4b38      	ldr	r3, [pc, #224]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fa:	ee17 1a90 	vmov	r1, s15
 80015fe:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001600:	fb83 2301 	smull	r2, r3, r3, r1
 8001604:	109a      	asrs	r2, r3, #2
 8001606:	17cb      	asrs	r3, r1, #31
 8001608:	1ad2      	subs	r2, r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1aca      	subs	r2, r1, r3
 8001614:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001618:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_z[3] = {abs(((int)(gyroscope_measurements[2]))),
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
						 abs(((int)(gyroscope_measurements[2] * 100))   % 10)};
 800161e:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001620:	edd3 7a02 	vldr	s15, [r3, #8]
 8001624:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80016d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001630:	ee17 1a90 	vmov	r1, s15
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001636:	fb83 2301 	smull	r2, r3, r3, r1
 800163a:	109a      	asrs	r2, r3, #2
 800163c:	17cb      	asrs	r3, r1, #31
 800163e:	1ad2      	subs	r2, r2, r3
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	1aca      	subs	r2, r1, r3
 800164a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800164e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    	int gyro_z[3] = {abs(((int)(gyroscope_measurements[2]))),
 8001652:	643b      	str	r3, [r7, #64]	@ 0x40

        char msg[30];


        sprintf(msg, "Gyro measurements: (%c%d.%d%d, %c%d.%d%d, %c%d.%d%d)",
                axis_sign[0], gyro_x[0], gyro_x[1], gyro_x[2],
 8001654:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
        sprintf(msg, "Gyro measurements: (%c%d.%d%d, %c%d.%d%d, %c%d.%d%d)",
 8001658:	469e      	mov	lr, r3
 800165a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001662:	60fa      	str	r2, [r7, #12]
                axis_sign[1], gyro_y[0], gyro_y[1], gyro_y[2],
 8001664:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
        sprintf(msg, "Gyro measurements: (%c%d.%d%d, %c%d.%d%d, %c%d.%d%d)",
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800166c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800166e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
                axis_sign[2], gyro_z[0], gyro_z[1], gyro_z[2]);
 8001670:	f897 505e 	ldrb.w	r5, [r7, #94]	@ 0x5e
        sprintf(msg, "Gyro measurements: (%c%d.%d%d, %c%d.%d%d, %c%d.%d%d)",
 8001674:	607d      	str	r5, [r7, #4]
 8001676:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8001678:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 800167a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800167c:	f107 0c18 	add.w	ip, r7, #24
 8001680:	9209      	str	r2, [sp, #36]	@ 0x24
 8001682:	9608      	str	r6, [sp, #32]
 8001684:	9507      	str	r5, [sp, #28]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	9206      	str	r2, [sp, #24]
 800168a:	9405      	str	r4, [sp, #20]
 800168c:	9004      	str	r0, [sp, #16]
 800168e:	9103      	str	r1, [sp, #12]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	9202      	str	r2, [sp, #8]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	9201      	str	r2, [sp, #4]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4672      	mov	r2, lr
 800169e:	490f      	ldr	r1, [pc, #60]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016a0:	4660      	mov	r0, ip
 80016a2:	f005 fb69 	bl	8006d78 <siprintf>

        HAL_UART_Transmit(&huart5, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd90 	bl	80001d0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0118 	add.w	r1, r7, #24
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016be:	f003 ffc7 	bl	8005650 <HAL_UART_Transmit>
    }
}
 80016c2:	bf00      	nop
 80016c4:	3764      	adds	r7, #100	@ 0x64
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200005b8 	.word	0x200005b8
 80016d0:	08007f30 	.word	0x08007f30
 80016d4:	66666667 	.word	0x66666667
 80016d8:	42c80000 	.word	0x42c80000
 80016dc:	08007ef8 	.word	0x08007ef8
 80016e0:	2000025c 	.word	0x2000025c

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_MspInit+0x44>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_MspInit+0x44>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_MspInit+0x44>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_MspInit+0x44>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001726:	2007      	movs	r0, #7
 8001728:	f000 fc30 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_I2C_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d127      	bne.n	80017aa <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001772:	23c0      	movs	r3, #192	@ 0xc0
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001782:	2304      	movs	r3, #4
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480b      	ldr	r0, [pc, #44]	@ (80017bc <HAL_I2C_MspInit+0x84>)
 800178e:	f000 fcc9 	bl	8002124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 8001798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_I2C_MspInit+0x80>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	@ 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40005400 	.word	0x40005400
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000400 	.word	0x48000400

080017c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_SPI_MspInit+0x8c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d130      	bne.n	8001844 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 80017e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_SPI_MspInit+0x90>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001812:	23e0      	movs	r3, #224	@ 0xe0
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001822:	2305      	movs	r3, #5
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f000 fc78 	bl	8002124 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2023      	movs	r0, #35	@ 0x23
 800183a:	f000 fbb2 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800183e:	2023      	movs	r0, #35	@ 0x23
 8001840:	f000 fbcb 	bl	8001fda <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	@ 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40013000 	.word	0x40013000
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_SPI_MspDeInit+0x38>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10d      	bne.n	8001882 <HAL_SPI_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_SPI_MspDeInit+0x3c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <HAL_SPI_MspDeInit+0x3c>)
 800186c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001870:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001872:	21e0      	movs	r1, #224	@ 0xe0
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f000 fdce 	bl	8002418 <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800187c:	2023      	movs	r0, #35	@ 0x23
 800187e:	f000 fbba 	bl	8001ff6 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40013000 	.word	0x40013000
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a4:	d113      	bne.n	80018ce <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <HAL_TIM_Base_MspInit+0x44>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a0b      	ldr	r2, [pc, #44]	@ (80018d8 <HAL_TIM_Base_MspInit+0x44>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_TIM_Base_MspInit+0x44>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	201c      	movs	r0, #28
 80018c4:	f000 fb6d 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c8:	201c      	movs	r0, #28
 80018ca:	f000 fb86 	bl	8001fda <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a29      	ldr	r2, [pc, #164]	@ (80019a0 <HAL_UART_MspInit+0xc4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d14c      	bne.n	8001998 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80018fe:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a28      	ldr	r2, [pc, #160]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a22      	ldr	r2, [pc, #136]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 800191c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a1c      	ldr	r2, [pc, #112]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 8001934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_UART_MspInit+0xc8>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001958:	2305      	movs	r3, #5
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4811      	ldr	r0, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0xcc>)
 8001964:	f000 fbde 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001968:	2304      	movs	r3, #4
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001978:	2305      	movs	r3, #5
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480a      	ldr	r0, [pc, #40]	@ (80019ac <HAL_UART_MspInit+0xd0>)
 8001984:	f000 fbce 	bl	8002124 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2035      	movs	r0, #53	@ 0x35
 800198e:	f000 fb08 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001992:	2035      	movs	r0, #53	@ 0x35
 8001994:	f000 fb21 	bl	8001fda <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	@ 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40005000 	.word	0x40005000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00

080019b0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	@ (8001a30 <HAL_PCD_MspInit+0x80>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d129      	bne.n	8001a26 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80019ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80019fc:	230e      	movs	r3, #14
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0a:	f000 fb8b 	bl	8002124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005c00 	.word	0x40005c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <NMI_Handler+0x4>

08001a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <MemManage_Handler+0x4>

08001a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 f969 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <TIM2_IRQHandler+0x10>)
 8001a9e:	f003 f9c1 	bl	8004e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000210 	.word	0x20000210

08001aac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <SPI1_IRQHandler+0x10>)
 8001ab2:	f002 fe63 	bl	800477c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200001ac 	.word	0x200001ac

08001ac0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <UART5_IRQHandler+0x10>)
 8001ac6:	f003 fe91 	bl	80057ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000025c 	.word	0x2000025c

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aee:	f005 f9f7 	bl	8006ee0 <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
  return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b16:	bf00      	nop
 8001b18:	e7fd      	b.n	8001b16 <_exit+0x12>

08001b1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e00a      	b.n	8001b42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2c:	f3af 8000 	nop.w
 8001b30:	4601      	mov	r1, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	b2ca      	uxtb	r2, r1
 8001b3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbf0      	blt.n	8001b2c <_read+0x12>
  }

  return len;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e009      	b.n	8001b7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf1      	blt.n	8001b66 <_write+0x12>
  }
  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_close>:

int _close(int file)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_isatty>:

int _isatty(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f005 f95c 	bl	8006ee0 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000a000 	.word	0x2000a000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	200005d4 	.word	0x200005d4
 8001c5c:	20000728 	.word	0x20000728

08001c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cbc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c88:	f7ff ffea 	bl	8001c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8e:	490d      	ldr	r1, [pc, #52]	@ (8001cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <LoopForever+0xe>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd0 <LoopForever+0x16>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f005 f91b 	bl	8006eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb6:	f7ff f8dd 	bl	8000e74 <main>

08001cba <LoopForever>:

LoopForever:
    b LoopForever
 8001cba:	e7fe      	b.n	8001cba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001cc8:	0800805c 	.word	0x0800805c
  ldr r2, =_sbss
 8001ccc:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001cd0:	20000728 	.word	0x20000728

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x28>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f94f 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fcfc 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f975 	bl	8002012 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f92f 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000006c 	.word	0x2000006c
 8001d5c:	20000074 	.word	0x20000074
 8001d60:	20000070 	.word	0x20000070

08001d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000074 	.word	0x20000074
 8001d88:	200005d8 	.word	0x200005d8

08001d8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	200005d8 	.word	0x200005d8

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4907      	ldr	r1, [pc, #28]	@ (8001e40 <__NVIC_EnableIRQ+0x38>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db12      	blt.n	8001e7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <__NVIC_DisableIRQ+0x44>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e70:	f3bf 8f4f 	dsb	sy
}
 8001e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e76:	f3bf 8f6f 	isb	sy
}
 8001e7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff05 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff1a 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff0d 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff1d 	bl	8001e44 <__NVIC_DisableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff94 	bl	8001f48 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e02e      	b.n	800209a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002042:	2b02      	cmp	r3, #2
 8002044:	d008      	beq.n	8002058 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e020      	b.n	800209a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e027      	b.n	8002118 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020e 	bic.w	r2, r2, #14
 80020d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
    }
  }
  return status;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	e154      	b.n	80023de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8146 	beq.w	80023d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d005      	beq.n	8002164 <HAL_GPIO_Init+0x40>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d130      	bne.n	80021c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219a:	2201      	movs	r2, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 0201 	and.w	r2, r3, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d017      	beq.n	8002202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d123      	bne.n	8002256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a0 	beq.w	80023d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <HAL_GPIO_Init+0x2d8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a57      	ldr	r2, [pc, #348]	@ (80023fc <HAL_GPIO_Init+0x2d8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b55      	ldr	r3, [pc, #340]	@ (80023fc <HAL_GPIO_Init+0x2d8>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b0:	4a53      	ldr	r2, [pc, #332]	@ (8002400 <HAL_GPIO_Init+0x2dc>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022da:	d019      	beq.n	8002310 <HAL_GPIO_Init+0x1ec>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a49      	ldr	r2, [pc, #292]	@ (8002404 <HAL_GPIO_Init+0x2e0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_GPIO_Init+0x1e8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a48      	ldr	r2, [pc, #288]	@ (8002408 <HAL_GPIO_Init+0x2e4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00d      	beq.n	8002308 <HAL_GPIO_Init+0x1e4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a47      	ldr	r2, [pc, #284]	@ (800240c <HAL_GPIO_Init+0x2e8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d007      	beq.n	8002304 <HAL_GPIO_Init+0x1e0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <HAL_GPIO_Init+0x2ec>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_GPIO_Init+0x1dc>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e008      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002300:	2305      	movs	r3, #5
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002304:	2303      	movs	r3, #3
 8002306:	e004      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_Init+0x1ee>
 8002310:	2300      	movs	r3, #0
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002322:	4937      	ldr	r1, [pc, #220]	@ (8002400 <HAL_GPIO_Init+0x2dc>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002354:	4a2f      	ldr	r2, [pc, #188]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800237e:	4a25      	ldr	r2, [pc, #148]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002384:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023d2:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <HAL_GPIO_Init+0x2f0>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f aea3 	bne.w	8002134 <HAL_GPIO_Init+0x10>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	48000400 	.word	0x48000400
 8002408:	48000800 	.word	0x48000800
 800240c:	48000c00 	.word	0x48000c00
 8002410:	48001000 	.word	0x48001000
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002426:	e0b8      	b.n	800259a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002428:	2201      	movs	r2, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80ab 	beq.w	8002594 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800243e:	4a5e      	ldr	r2, [pc, #376]	@ (80025b8 <HAL_GPIO_DeInit+0x1a0>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002466:	d019      	beq.n	800249c <HAL_GPIO_DeInit+0x84>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a54      	ldr	r2, [pc, #336]	@ (80025bc <HAL_GPIO_DeInit+0x1a4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_DeInit+0x80>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a53      	ldr	r2, [pc, #332]	@ (80025c0 <HAL_GPIO_DeInit+0x1a8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_DeInit+0x7c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a52      	ldr	r2, [pc, #328]	@ (80025c4 <HAL_GPIO_DeInit+0x1ac>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_DeInit+0x78>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a51      	ldr	r2, [pc, #324]	@ (80025c8 <HAL_GPIO_DeInit+0x1b0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_DeInit+0x74>
 8002488:	2304      	movs	r3, #4
 800248a:	e008      	b.n	800249e <HAL_GPIO_DeInit+0x86>
 800248c:	2305      	movs	r3, #5
 800248e:	e006      	b.n	800249e <HAL_GPIO_DeInit+0x86>
 8002490:	2303      	movs	r3, #3
 8002492:	e004      	b.n	800249e <HAL_GPIO_DeInit+0x86>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_DeInit+0x86>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_DeInit+0x86>
 800249c:	2300      	movs	r3, #0
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d132      	bne.n	8002514 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4945      	ldr	r1, [pc, #276]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024bc:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4941      	ldr	r1, [pc, #260]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80024ca:	4b40      	ldr	r3, [pc, #256]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	493e      	ldr	r1, [pc, #248]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80024d8:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	493a      	ldr	r1, [pc, #232]	@ (80025cc <HAL_GPIO_DeInit+0x1b4>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80024f6:	4a30      	ldr	r2, [pc, #192]	@ (80025b8 <HAL_GPIO_DeInit+0x1a0>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43da      	mvns	r2, r3
 8002506:	482c      	ldr	r0, [pc, #176]	@ (80025b8 <HAL_GPIO_DeInit+0x1a0>)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	400a      	ands	r2, r1
 800250e:	3302      	adds	r3, #2
 8002510:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2103      	movs	r1, #3
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	401a      	ands	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	08d2      	lsrs	r2, r2, #3
 800254a:	4019      	ands	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2103      	movs	r1, #3
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	2101      	movs	r1, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2103      	movs	r1, #3
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f af40 	bne.w	8002428 <HAL_GPIO_DeInit+0x10>
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000
 80025bc:	48000400 	.word	0x48000400
 80025c0:	48000800 	.word	0x48000800
 80025c4:	48000c00 	.word	0x48000c00
 80025c8:	48001000 	.word	0x48001000
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
 80025dc:	4613      	mov	r3, r2
 80025de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e08d      	b.n	800272e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff f886 	bl	8001738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	@ 0x24
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e006      	b.n	8002688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d108      	bne.n	80026a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e007      	b.n	80026b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69d9      	ldr	r1, [r3, #28]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d138      	bne.n	80027be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002756:	2302      	movs	r3, #2
 8002758:	e032      	b.n	80027c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2224      	movs	r2, #36	@ 0x24
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002788:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d139      	bne.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e033      	b.n	8002858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	@ 0x24
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800281e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0b9      	b.n	80029ea <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff f890 	bl	80019b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f941 	bl	8006b24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e03e      	b.n	8002926 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3311      	adds	r3, #17
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3310      	adds	r3, #16
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3313      	adds	r3, #19
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	3320      	adds	r3, #32
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3324      	adds	r3, #36	@ 0x24
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	3301      	adds	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	791b      	ldrb	r3, [r3, #4]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3bb      	bcc.n	80028a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e044      	b.n	80029c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3b5      	bcc.n	8002936 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029d6:	f004 f8c0 	bl	8006b5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f000 bff4 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 816d 	beq.w	8002d0a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a30:	4bb4      	ldr	r3, [pc, #720]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3c:	4bb1      	ldr	r3, [pc, #708]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x104>
 8002a48:	4bae      	ldr	r3, [pc, #696]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a54:	d150      	bne.n	8002af8 <HAL_RCC_OscConfig+0x104>
 8002a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a76:	d802      	bhi.n	8002a7e <HAL_RCC_OscConfig+0x8a>
 8002a78:	4ba2      	ldr	r3, [pc, #648]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0xb6>
 8002a7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a82:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002a92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a96:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002a9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002aa6:	4b97      	ldr	r3, [pc, #604]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aae:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002ab2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002abe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8114 	beq.w	8002d08 <HAL_RCC_OscConfig+0x314>
 8002ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 810b 	bne.w	8002d08 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f000 bf85 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0x124>
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e036      	b.n	8002b86 <HAL_RCC_OscConfig+0x192>
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x14e>
 8002b28:	4b76      	ldr	r3, [pc, #472]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a75      	ldr	r2, [pc, #468]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b73      	ldr	r3, [pc, #460]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a72      	ldr	r2, [pc, #456]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e021      	b.n	8002b86 <HAL_RCC_OscConfig+0x192>
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x17a>
 8002b54:	4b6b      	ldr	r3, [pc, #428]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b68      	ldr	r3, [pc, #416]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a67      	ldr	r2, [pc, #412]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x192>
 8002b6e:	4b65      	ldr	r3, [pc, #404]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a64      	ldr	r2, [pc, #400]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b62      	ldr	r3, [pc, #392]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a61      	ldr	r2, [pc, #388]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b86:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	f023 020f 	bic.w	r2, r3, #15
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	495a      	ldr	r1, [pc, #360]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d054      	beq.n	8002c5a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f8ec 	bl	8001d8c <HAL_GetTick>
 8002bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7ff f8e7 	bl	8001d8c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d902      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	f000 bf19 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 8002bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002be4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bf0:	d802      	bhi.n	8002bf8 <HAL_RCC_OscConfig+0x204>
 8002bf2:	4b44      	ldr	r3, [pc, #272]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	e015      	b.n	8002c24 <HAL_RCC_OscConfig+0x230>
 8002bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bfc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c10:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c20:	4b38      	ldr	r3, [pc, #224]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c28:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c30:	fa92 f2a2 	rbit	r2, r2
 8002c34:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0b0      	beq.n	8002bba <HAL_RCC_OscConfig+0x1c6>
 8002c58:	e057      	b.n	8002d0a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7ff f897 	bl	8001d8c <HAL_GetTick>
 8002c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7ff f892 	bl	8001d8c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	@ 0x64
 8002c72:	d902      	bls.n	8002c7a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f000 bec4 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 8002c7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c7e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002c8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9a:	d802      	bhi.n	8002ca2 <HAL_RCC_OscConfig+0x2ae>
 8002c9c:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x2da>
 8002ca2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ca6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cbe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_RCC_OscConfig+0x310>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cd2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002cd6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002cda:	fa92 f2a2 	rbit	r2, r2
 8002cde:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002ce2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ce6:	fab2 f282 	clz	r2, r2
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f002 021f 	and.w	r2, r2, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1b0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x270>
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_OscConfig+0x316>
 8002d04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 816c 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d20:	4bcc      	ldr	r3, [pc, #816]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d2c:	4bc9      	ldr	r3, [pc, #804]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d16d      	bne.n	8002e14 <HAL_RCC_OscConfig+0x420>
 8002d38:	4bc6      	ldr	r3, [pc, #792]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d167      	bne.n	8002e14 <HAL_RCC_OscConfig+0x420>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d62:	d802      	bhi.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d64:	4bbb      	ldr	r3, [pc, #748]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	e013      	b.n	8002d92 <HAL_RCC_OscConfig+0x39e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002d82:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002d8e:	4bb1      	ldr	r3, [pc, #708]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	2202      	movs	r2, #2
 8002d94:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002d98:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002d9c:	fa92 f2a2 	rbit	r2, r2
 8002da0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002da4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002da8:	fab2 f282 	clz	r2, r2
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	f002 021f 	and.w	r2, r2, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCC_OscConfig+0x3e6>
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d002      	beq.n	8002dda <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f000 be14 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b9e      	ldr	r3, [pc, #632]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	21f8      	movs	r1, #248	@ 0xf8
 8002df0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002df8:	fa91 f1a1 	rbit	r1, r1
 8002dfc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e00:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e04:	fab1 f181 	clz	r1, r1
 8002e08:	b2c9      	uxtb	r1, r1
 8002e0a:	408b      	lsls	r3, r1
 8002e0c:	4991      	ldr	r1, [pc, #580]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e0f1      	b.n	8002ff8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8083 	beq.w	8002f2c <HAL_RCC_OscConfig+0x538>
 8002e26:	2301      	movs	r3, #1
 8002e28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e38:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2301      	movs	r3, #1
 8002e50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe ff9b 	bl	8001d8c <HAL_GetTick>
 8002e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe ff96 	bl	8001d8c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	f000 bdc8 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002e84:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e90:	d802      	bhi.n	8002e98 <HAL_RCC_OscConfig+0x4a4>
 8002e92:	4b70      	ldr	r3, [pc, #448]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	e013      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4cc>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002eb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ebc:	4b65      	ldr	r3, [pc, #404]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002ec6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002ed2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f002 021f 	and.w	r2, r2, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0b4      	beq.n	8002e5c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b58      	ldr	r3, [pc, #352]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	21f8      	movs	r1, #248	@ 0xf8
 8002f08:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f10:	fa91 f1a1 	rbit	r1, r1
 8002f14:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f18:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f1c:	fab1 f181 	clz	r1, r1
 8002f20:	b2c9      	uxtb	r1, r1
 8002f22:	408b      	lsls	r3, r1
 8002f24:	494b      	ldr	r1, [pc, #300]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
 8002f2a:	e065      	b.n	8002ff8 <HAL_RCC_OscConfig+0x604>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe ff18 	bl	8001d8c <HAL_GetTick>
 8002f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7fe ff13 	bl	8001d8c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	f000 bd45 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f96:	d802      	bhi.n	8002f9e <HAL_RCC_OscConfig+0x5aa>
 8002f98:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	e013      	b.n	8002fc6 <HAL_RCC_OscConfig+0x5d2>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_OscConfig+0x660>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002fcc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002fd0:	fa92 f2a2 	rbit	r2, r2
 8002fd4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002fd8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f002 021f 	and.w	r2, r2, #31
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1b4      	bne.n	8002f62 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8115 	beq.w	8003238 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d07e      	beq.n	800311c <HAL_RCC_OscConfig+0x728>
 800301e:	2301      	movs	r3, #1
 8003020:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCC_OscConfig+0x664>)
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	461a      	mov	r2, r3
 8003044:	2301      	movs	r3, #1
 8003046:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe fea0 	bl	8001d8c <HAL_GetTick>
 800304c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003050:	e00f      	b.n	8003072 <HAL_RCC_OscConfig+0x67e>
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fe96 	bl	8001d8c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d902      	bls.n	8003072 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f000 bcc8 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030b0:	2202      	movs	r2, #2
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 80030ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80030d8:	2102      	movs	r1, #2
 80030da:	6019      	str	r1, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f1a3 	rbit	r1, r3
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030f2:	6019      	str	r1, [r3, #0]
  return result;
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0a0      	beq.n	800305c <HAL_RCC_OscConfig+0x668>
 800311a:	e08d      	b.n	8003238 <HAL_RCC_OscConfig+0x844>
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f2a3 	rbit	r2, r3
 8003136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800313e:	601a      	str	r2, [r3, #0]
  return result;
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003148:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4b90      	ldr	r3, [pc, #576]	@ (8003394 <HAL_RCC_OscConfig+0x9a0>)
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fe15 	bl	8001d8c <HAL_GetTick>
 8003162:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fe10 	bl	8001d8c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d902      	bls.n	800317e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	f000 bc42 	b.w	8003a02 <HAL_RCC_OscConfig+0x100e>
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031aa:	2202      	movs	r2, #2
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031ce:	2202      	movs	r2, #2
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80031e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ea:	4b69      	ldr	r3, [pc, #420]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 80031ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031f6:	2102      	movs	r1, #2
 80031f8:	6019      	str	r1, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f1a3 	rbit	r1, r3
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003210:	6019      	str	r1, [r3, #0]
  return result;
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2101      	movs	r1, #1
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d197      	bne.n	8003168 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 819e 	beq.w	800358a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b4e      	ldr	r3, [pc, #312]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a4a      	ldr	r2, [pc, #296]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003286:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b42      	ldr	r3, [pc, #264]	@ (8003398 <HAL_RCC_OscConfig+0x9a4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b3f      	ldr	r3, [pc, #252]	@ (8003398 <HAL_RCC_OscConfig+0x9a4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3e      	ldr	r2, [pc, #248]	@ (8003398 <HAL_RCC_OscConfig+0x9a4>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fd71 	bl	8001d8c <HAL_GetTick>
 80032aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	e009      	b.n	80032c4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe fd6c 	bl	8001d8c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	@ 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e39e      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_OscConfig+0x9a4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x8fa>
 80032e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e035      	b.n	800335a <HAL_RCC_OscConfig+0x966>
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x924>
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6213      	str	r3, [r2, #32]
 800330a:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a20      	ldr	r2, [pc, #128]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	e020      	b.n	800335a <HAL_RCC_OscConfig+0x966>
 8003318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x94e>
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	e00b      	b.n	800335a <HAL_RCC_OscConfig+0x966>
 8003342:	4b13      	ldr	r3, [pc, #76]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6213      	str	r3, [r2, #32]
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <HAL_RCC_OscConfig+0x99c>)
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8087 	beq.w	800347a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7fe fd0e 	bl	8001d8c <HAL_GetTick>
 8003370:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e012      	b.n	800339c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fd09 	bl	8001d8c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d908      	bls.n	800339c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e339      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	10908120 	.word	0x10908120
 8003398:	40007000 	.word	0x40007000
 800339c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033a4:	2202      	movs	r2, #2
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033c8:	2202      	movs	r2, #2
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	fa93 f2a3 	rbit	r2, r3
 80033da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80033e2:	601a      	str	r2, [r3, #0]
  return result;
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80033ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_OscConfig+0xa10>
 80033fe:	4b98      	ldr	r3, [pc, #608]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	e013      	b.n	800342c <HAL_RCC_OscConfig+0xa38>
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800340c:	2202      	movs	r2, #2
 800340e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fa93 f2a3 	rbit	r2, r3
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	4b8d      	ldr	r3, [pc, #564]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003430:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003434:	2102      	movs	r1, #2
 8003436:	6011      	str	r1, [r2, #0]
 8003438:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800343c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	fa92 f1a2 	rbit	r1, r2
 8003446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800344a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800344e:	6011      	str	r1, [r2, #0]
  return result;
 8003450:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003454:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	f43f af7f 	beq.w	8003376 <HAL_RCC_OscConfig+0x982>
 8003478:	e07d      	b.n	8003576 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fc87 	bl	8001d8c <HAL_GetTick>
 800347e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fe fc82 	bl	8001d8c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e2b2      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fa93 f2a3 	rbit	r2, r3
 80034b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ba:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fa93 f2a3 	rbit	r2, r3
 80034da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80034e2:	601a      	str	r2, [r3, #0]
  return result;
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80034ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_OscConfig+0xb10>
 80034fe:	4b58      	ldr	r3, [pc, #352]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	e013      	b.n	800352c <HAL_RCC_OscConfig+0xb38>
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800350c:	2202      	movs	r2, #2
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b4d      	ldr	r3, [pc, #308]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003530:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003534:	2102      	movs	r1, #2
 8003536:	6011      	str	r1, [r2, #0]
 8003538:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	fa92 f1a2 	rbit	r1, r2
 8003546:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800354e:	6011      	str	r1, [r2, #0]
  return result;
 8003550:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003554:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f002 021f 	and.w	r2, r2, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d186      	bne.n	8003484 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003576:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b38      	ldr	r3, [pc, #224]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a37      	ldr	r2, [pc, #220]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8232 	beq.w	8003a00 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359c:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	f000 8201 	beq.w	80039ac <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	f040 8157 	bne.w	800386a <HAL_RCC_OscConfig+0xe76>
 80035bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80035e0:	601a      	str	r2, [r3, #0]
  return result;
 80035e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80035ea:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe fbc3 	bl	8001d8c <HAL_GetTick>
 8003606:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360a:	e009      	b.n	8003620 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe fbbe 	bl	8001d8c <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1f0      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003644:	601a      	str	r2, [r3, #0]
  return result;
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800364e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b3f      	cmp	r3, #63	@ 0x3f
 8003658:	d804      	bhi.n	8003664 <HAL_RCC_OscConfig+0xc70>
 800365a:	4b01      	ldr	r3, [pc, #4]	@ (8003660 <HAL_RCC_OscConfig+0xc6c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	e029      	b.n	80036b4 <HAL_RCC_OscConfig+0xcc0>
 8003660:	40021000 	.word	0x40021000
 8003664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003668:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800366c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003676:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f2a3 	rbit	r2, r3
 8003680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003684:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003692:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4bc3      	ldr	r3, [pc, #780]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80036bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036c6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fa92 f1a2 	rbit	r1, r2
 80036d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80036d8:	6011      	str	r1, [r2, #0]
  return result;
 80036da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fab2 f282 	clz	r2, r2
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	f002 021f 	and.w	r2, r2, #31
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d185      	bne.n	800360c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003700:	4baf      	ldr	r3, [pc, #700]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	430b      	orrs	r3, r1
 8003722:	49a7      	ldr	r1, [pc, #668]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800374c:	601a      	str	r2, [r3, #0]
  return result;
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003756:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003762:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	461a      	mov	r2, r3
 800376a:	2301      	movs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fb0d 	bl	8001d8c <HAL_GetTick>
 8003772:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003776:	e009      	b.n	800378c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe fb08 	bl	8001d8c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e13a      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003794:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037b0:	601a      	str	r2, [r3, #0]
  return result;
 80037b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80037c4:	d802      	bhi.n	80037cc <HAL_RCC_OscConfig+0xdd8>
 80037c6:	4b7e      	ldr	r3, [pc, #504]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	e027      	b.n	800381c <HAL_RCC_OscConfig+0xe28>
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80037d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003820:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800383c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003840:	6011      	str	r1, [r2, #0]
  return result;
 8003842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003846:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d087      	beq.n	8003778 <HAL_RCC_OscConfig+0xd84>
 8003868:	e0ca      	b.n	8003a00 <HAL_RCC_OscConfig+0x100c>
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003872:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003894:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003898:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fa6c 	bl	8001d8c <HAL_GetTick>
 80038b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fa67 	bl	8001d8c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e099      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80038fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b3f      	cmp	r3, #63	@ 0x3f
 8003906:	d802      	bhi.n	800390e <HAL_RCC_OscConfig+0xf1a>
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	e027      	b.n	800395e <HAL_RCC_OscConfig+0xf6a>
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003916:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800393c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	fa93 f2a3 	rbit	r2, r3
 8003950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003954:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <HAL_RCC_OscConfig+0xfcc>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003962:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003966:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003970:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	fa92 f1a2 	rbit	r1, r2
 800397a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800397e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003982:	6011      	str	r1, [r2, #0]
  return result;
 8003984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003988:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0220 	orr.w	r2, r2, #32
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d187      	bne.n	80038ba <HAL_RCC_OscConfig+0xec6>
 80039aa:	e029      	b.n	8003a00 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d103      	bne.n	80039c4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e020      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
 80039c0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_RCC_OscConfig+0x1018>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80039d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80039e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b09e      	sub	sp, #120	@ 0x78
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e154      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b89      	ldr	r3, [pc, #548]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b86      	ldr	r3, [pc, #536]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 0207 	bic.w	r2, r3, #7
 8003a3e:	4984      	ldr	r1, [pc, #528]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b82      	ldr	r3, [pc, #520]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e13c      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4978      	ldr	r1, [pc, #480]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80cd 	beq.w	8003c1e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d137      	bne.n	8003afc <HAL_RCC_ClockConfig+0xec>
 8003a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aa4:	d802      	bhi.n	8003aac <HAL_RCC_ClockConfig+0x9c>
 8003aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_ClockConfig+0xbc>
 8003aac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ac8:	4b62      	ldr	r3, [pc, #392]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ad0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ad4:	fa92 f2a2 	rbit	r2, r2
 8003ad8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003ada:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f042 0220 	orr.w	r2, r2, #32
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f002 021f 	and.w	r2, r2, #31
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d171      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0ea      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d137      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x164>
 8003b04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b1c:	d802      	bhi.n	8003b24 <HAL_RCC_ClockConfig+0x114>
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_ClockConfig+0x134>
 8003b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b40:	4b44      	ldr	r3, [pc, #272]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b48:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b4c:	fa92 f2a2 	rbit	r2, r2
 8003b50:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003b52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f002 021f 	and.w	r2, r2, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d135      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0ae      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
 8003b74:	2302      	movs	r3, #2
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b8a:	d802      	bhi.n	8003b92 <HAL_RCC_ClockConfig+0x182>
 8003b8c:	4b31      	ldr	r3, [pc, #196]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	e00d      	b.n	8003bae <HAL_RCC_ClockConfig+0x19e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	4b2a      	ldr	r3, [pc, #168]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	2202      	movs	r2, #2
 8003bb0:	61ba      	str	r2, [r7, #24]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	fa92 f2a2 	rbit	r2, r2
 8003bb8:	617a      	str	r2, [r7, #20]
  return result;
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e07a      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 0203 	bic.w	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	491a      	ldr	r1, [pc, #104]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bee:	f7fe f8cd 	bl	8001d8c <HAL_GetTick>
 8003bf2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf6:	f7fe f8c9 	bl	8001d8c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e062      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 020c 	and.w	r2, r3, #12
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d1eb      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d215      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 0207 	bic.w	r2, r3, #7
 8003c34:	4906      	ldr	r1, [pc, #24]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <HAL_RCC_ClockConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d006      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e041      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x2c2>
 8003c4e:	bf00      	nop
 8003c50:	40022000 	.word	0x40022000
 8003c54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_RCC_ClockConfig+0x2cc>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	491a      	ldr	r1, [pc, #104]	@ (8003cdc <HAL_RCC_ClockConfig+0x2cc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b16      	ldr	r3, [pc, #88]	@ (8003cdc <HAL_RCC_ClockConfig+0x2cc>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4912      	ldr	r1, [pc, #72]	@ (8003cdc <HAL_RCC_ClockConfig+0x2cc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c96:	f000 f829 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_RCC_ClockConfig+0x2cc>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca4:	22f0      	movs	r2, #240	@ 0xf0
 8003ca6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	fa92 f2a2 	rbit	r2, r2
 8003cae:	60fa      	str	r2, [r7, #12]
  return result;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	fab2 f282 	clz	r2, r2
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	40d3      	lsrs	r3, r2
 8003cba:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <HAL_RCC_ClockConfig+0x2d0>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003cc2:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <HAL_RCC_ClockConfig+0x2d4>)
 8003cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cc6:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <HAL_RCC_ClockConfig+0x2d8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f81a 	bl	8001d04 <HAL_InitTick>
  
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3778      	adds	r7, #120	@ 0x78
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	08007f34 	.word	0x08007f34
 8003ce4:	2000006c 	.word	0x2000006c
 8003ce8:	20000070 	.word	0x20000070

08003cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d06:	4b1e      	ldr	r3, [pc, #120]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x30>
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x36>
 8003d1a:	e026      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d1c:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d1e:	613b      	str	r3, [r7, #16]
      break;
 8003d20:	e026      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0c9b      	lsrs	r3, r3, #18
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4a17      	ldr	r2, [pc, #92]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d2c:	5cd3      	ldrb	r3, [r2, r3]
 8003d2e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d30:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	4a14      	ldr	r2, [pc, #80]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d3a:	5cd3      	ldrb	r3, [r2, r3]
 8003d3c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d48:	4a0e      	ldr	r2, [pc, #56]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e004      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	613b      	str	r3, [r7, #16]
      break;
 8003d68:	e002      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d6c:	613b      	str	r3, [r7, #16]
      break;
 8003d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d70:	693b      	ldr	r3, [r7, #16]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	007a1200 	.word	0x007a1200
 8003d88:	08007f4c 	.word	0x08007f4c
 8003d8c:	08007f5c 	.word	0x08007f5c
 8003d90:	003d0900 	.word	0x003d0900

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000006c 	.word	0x2000006c

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003db2:	f7ff ffef 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db6:	4601      	mov	r1, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dc0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003dc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	fa92 f2a2 	rbit	r2, r2
 8003dcc:	603a      	str	r2, [r7, #0]
  return result;
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	fab2 f282 	clz	r2, r2
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	40d3      	lsrs	r3, r2
 8003dd8:	4a04      	ldr	r2, [pc, #16]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	08007f44 	.word	0x08007f44

08003df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003df6:	f7ff ffcd 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003e04:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003e08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	fa92 f2a2 	rbit	r2, r2
 8003e10:	603a      	str	r2, [r7, #0]
  return result;
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	fab2 f282 	clz	r2, r2
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	40d3      	lsrs	r3, r2
 8003e1c:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08007f44 	.word	0x08007f44

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b092      	sub	sp, #72	@ 0x48
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80d2 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e58:	4b4d      	ldr	r3, [pc, #308]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10e      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b4a      	ldr	r3, [pc, #296]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	4a49      	ldr	r2, [pc, #292]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	61d3      	str	r3, [r2, #28]
 8003e70:	4b47      	ldr	r3, [pc, #284]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d118      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8e:	4b41      	ldr	r3, [pc, #260]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a40      	ldr	r2, [pc, #256]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd ff77 	bl	8001d8c <HAL_GetTick>
 8003e9e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7fd ff73 	bl	8001d8c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	@ 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e167      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec0:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8082 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d07a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f32:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d049      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd ff23 	bl	8001d8c <HAL_GetTick>
 8003f46:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd ff1f 	bl	8001d8c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e111      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003f60:	2302      	movs	r3, #2
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	61fb      	str	r3, [r7, #28]
  return result;
 8003f78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003f8a:	4b01      	ldr	r3, [pc, #4]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	e00d      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40007000 	.word	0x40007000
 8003f98:	10908100 	.word	0x10908100
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	4b78      	ldr	r3, [pc, #480]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	2202      	movs	r2, #2
 8003fae:	613a      	str	r2, [r7, #16]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	fa92 f2a2 	rbit	r2, r2
 8003fb6:	60fa      	str	r2, [r7, #12]
  return result;
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	fab2 f282 	clz	r2, r2
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f002 021f 	and.w	r2, r2, #31
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0b9      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	496a      	ldr	r1, [pc, #424]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b66      	ldr	r3, [pc, #408]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004008:	4b60      	ldr	r3, [pc, #384]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	495d      	ldr	r1, [pc, #372]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004026:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4956      	ldr	r1, [pc, #344]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004034:	4313      	orrs	r3, r2
 8004036:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004044:	4b51      	ldr	r3, [pc, #324]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	494e      	ldr	r1, [pc, #312]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004052:	4313      	orrs	r3, r2
 8004054:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004062:	4b4a      	ldr	r3, [pc, #296]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	f023 0210 	bic.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4947      	ldr	r1, [pc, #284]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004070:	4313      	orrs	r3, r2
 8004072:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004080:	4b42      	ldr	r3, [pc, #264]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	493f      	ldr	r1, [pc, #252]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800409e:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f023 0220 	bic.w	r2, r3, #32
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4938      	ldr	r1, [pc, #224]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040bc:	4b33      	ldr	r3, [pc, #204]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4930      	ldr	r1, [pc, #192]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040da:	4b2c      	ldr	r3, [pc, #176]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	4929      	ldr	r1, [pc, #164]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f8:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	4921      	ldr	r1, [pc, #132]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004116:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	491a      	ldr	r1, [pc, #104]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004134:	4b15      	ldr	r3, [pc, #84]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	4912      	ldr	r1, [pc, #72]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004142:	4313      	orrs	r3, r2
 8004144:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004152:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	490b      	ldr	r1, [pc, #44]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004160:	4313      	orrs	r3, r2
 8004162:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	4903      	ldr	r1, [pc, #12]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800417e:	4313      	orrs	r3, r2
 8004180:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3748      	adds	r7, #72	@ 0x48
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e09d      	b.n	80042de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d108      	bne.n	80041bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b2:	d009      	beq.n	80041c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
 80041ba:	e005      	b.n	80041c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd faec 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004208:	d902      	bls.n	8004210 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e002      	b.n	8004216 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004214:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800421e:	d007      	beq.n	8004230 <HAL_SPI_Init+0xa0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004228:	d002      	beq.n	8004230 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004272:	ea42 0103 	orr.w	r1, r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	f003 0204 	and.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042ac:	ea42 0103 	orr.w	r1, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e01a      	b.n	800432e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fd fa9f 	bl	8001854 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08a      	sub	sp, #40	@ 0x28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_TransmitReceive+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	e20a      	b.n	8004772 <HAL_SPI_TransmitReceive+0x43c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fd fd12 	bl	8001d8c <HAL_GetTick>
 8004368:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004370:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004380:	7efb      	ldrb	r3, [r7, #27]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d00e      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800438c:	d106      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <HAL_SPI_TransmitReceive+0x66>
 8004396:	7efb      	ldrb	r3, [r7, #27]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d003      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80043a2:	e1e0      	b.n	8004766 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x80>
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80043bc:	e1d3      	b.n	8004766 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2205      	movs	r2, #5
 80043ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004414:	d802      	bhi.n	800441c <HAL_SPI_TransmitReceive+0xe6>
 8004416:	8a3b      	ldrh	r3, [r7, #16]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d908      	bls.n	800442e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	e007      	b.n	800443e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d007      	beq.n	800445c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004464:	f240 8081 	bls.w	800456a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x140>
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d16d      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449a:	e05a      	b.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d11b      	bne.n	80044e2 <HAL_SPI_TransmitReceive+0x1ac>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d016      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x1ac>
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d113      	bne.n	80044e2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044be:	881a      	ldrh	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d11c      	bne.n	800452a <HAL_SPI_TransmitReceive+0x1f4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	b292      	uxth	r2, r2
 8004508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004526:	2301      	movs	r3, #1
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800452a:	f7fd fc2f 	bl	8001d8c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004536:	429a      	cmp	r2, r3
 8004538:	d80b      	bhi.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d007      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004550:	e109      	b.n	8004766 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d19f      	bne.n	800449c <HAL_SPI_TransmitReceive+0x166>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d199      	bne.n	800449c <HAL_SPI_TransmitReceive+0x166>
 8004568:	e0e3      	b.n	8004732 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_SPI_TransmitReceive+0x244>
 8004572:	8a7b      	ldrh	r3, [r7, #18]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 80cf 	bne.w	8004718 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d912      	bls.n	80045aa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b02      	subs	r3, #2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a8:	e0b6      	b.n	8004718 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d0:	e0a2      	b.n	8004718 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d134      	bne.n	800464a <HAL_SPI_TransmitReceive+0x314>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02f      	beq.n	800464a <HAL_SPI_TransmitReceive+0x314>
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d12c      	bne.n	800464a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d912      	bls.n	8004620 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b02      	subs	r3, #2
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800461e:	e012      	b.n	8004646 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d148      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x3b4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d042      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d923      	bls.n	80046b8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	b292      	uxth	r2, r2
 800467c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b02      	subs	r3, #2
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d81f      	bhi.n	80046e6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e016      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f103 020c 	add.w	r2, r3, #12
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046e6:	2301      	movs	r3, #1
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046ea:	f7fd fb4f 	bl	8001d8c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_TransmitReceive+0x3cc>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x3d2>
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004716:	e026      	b.n	8004766 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f47f af57 	bne.w	80045d2 <HAL_SPI_TransmitReceive+0x29c>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af50 	bne.w	80045d2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa6c 	bl	8004c14 <SPI_EndRxTxTransaction>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475c:	e003      	b.n	8004766 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800476e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004772:	4618      	mov	r0, r3
 8004774:	3728      	adds	r7, #40	@ 0x28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
    return;
 80047be:	e0d7      	b.n	8004970 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x66>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	09db      	lsrs	r3, r3, #7
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
    return;
 80047e0:	e0c6      	b.n	8004970 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_SPI_IRQHandler+0x8c>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80b4 	beq.w	8004970 <HAL_SPI_IRQHandler+0x1f4>
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80ad 	beq.w	8004970 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d023      	beq.n	800486a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b03      	cmp	r3, #3
 800482c:	d011      	beq.n	8004852 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	e00b      	b.n	800486a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
        return;
 8004868:	e082      	b.n	8004970 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d014      	beq.n	80048a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00c      	beq.n	80048c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b0:	f043 0208 	orr.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d04f      	beq.n	800496e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_SPI_IRQHandler+0x17e>
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d034      	beq.n	8004964 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0203 	bic.w	r2, r2, #3
 8004908:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_SPI_IRQHandler+0x1fc>)
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fbc1 	bl	80020a6 <HAL_DMA_Abort_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	4a0d      	ldr	r2, [pc, #52]	@ (8004978 <HAL_SPI_IRQHandler+0x1fc>)
 8004944:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fbab 	bl	80020a6 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004962:	e003      	b.n	800496c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f809 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800496a:	e000      	b.n	800496e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800496c:	bf00      	nop
    return;
 800496e:	bf00      	nop
  }
}
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad

0800497c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800499e:	b2db      	uxtb	r3, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff ffd7 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e8:	f7fd f9d0 	bl	8001d8c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f8:	f7fd f9c8 	bl	8001d8c <HAL_GetTick>
 80049fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fe:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	015b      	lsls	r3, r3, #5
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0e:	e054      	b.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d050      	beq.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a18:	f7fd f9b8 	bl	8001d8c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d902      	bls.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a46:	d111      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a50:	d004      	beq.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5a:	d107      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a74:	d10f      	bne.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e017      	b.n	8004ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d19b      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	2000006c 	.word	0x2000006c

08004ae8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004afa:	f7fd f947 	bl	8001d8c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	4413      	add	r3, r2
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b0a:	f7fd f93f 	bl	8001d8c <HAL_GetTick>
 8004b0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b18:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00da      	lsls	r2, r3, #3
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	0d1b      	lsrs	r3, r3, #20
 8004b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b30:	e060      	b.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b38:	d107      	bne.n	8004b4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d050      	beq.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b52:	f7fd f91b 	bl	8001d8c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d902      	bls.n	8004b68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d13d      	bne.n	8004be4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b80:	d111      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b8a:	d004      	beq.n	8004b96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b94:	d107      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bae:	d10f      	bne.n	8004bd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e010      	b.n	8004c06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d196      	bne.n	8004b32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3728      	adds	r7, #40	@ 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000006c 	.word	0x2000006c

08004c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ff5b 	bl	8004ae8 <SPI_WaitFifoStateUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e027      	b.n	8004c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	@ 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fec0 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e014      	b.n	8004c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ff34 	bl	8004ae8 <SPI_WaitFifoStateUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e000      	b.n	8004c98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e049      	b.n	8004d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc fde4 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fa94 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d001      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e04a      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xbc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x6c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a19      	ldr	r2, [pc, #100]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d115      	bne.n	8004de8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d015      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd4:	d011      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	00010007 	.word	0x00010007

08004e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0202 	mvn.w	r2, #2
 8004e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9ad 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f99f 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9b0 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d020      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0204 	mvn.w	r2, #4
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f987 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f979 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f98a 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d020      	beq.n	8004f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0208 	mvn.w	r2, #8
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f961 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f953 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f964 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d020      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0210 	mvn.w	r2, #16
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2208      	movs	r2, #8
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f93b 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f92d 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f93e 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0201 	mvn.w	r2, #1
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fa5c 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 faec 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fae4 	bl	80055a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8fd 	bl	80051f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00c      	beq.n	8005020 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0220 	mvn.w	r2, #32
 8005018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 faac 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_TIM_ConfigClockSource+0x1c>
 8005040:	2302      	movs	r3, #2
 8005042:	e0b6      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005062:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800506e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005080:	d03e      	beq.n	8005100 <HAL_TIM_ConfigClockSource+0xd8>
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005086:	f200 8087 	bhi.w	8005198 <HAL_TIM_ConfigClockSource+0x170>
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508e:	f000 8086 	beq.w	800519e <HAL_TIM_ConfigClockSource+0x176>
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005096:	d87f      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 8005098:	2b70      	cmp	r3, #112	@ 0x70
 800509a:	d01a      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0xaa>
 800509c:	2b70      	cmp	r3, #112	@ 0x70
 800509e:	d87b      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050a0:	2b60      	cmp	r3, #96	@ 0x60
 80050a2:	d050      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0x11e>
 80050a4:	2b60      	cmp	r3, #96	@ 0x60
 80050a6:	d877      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050a8:	2b50      	cmp	r3, #80	@ 0x50
 80050aa:	d03c      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xfe>
 80050ac:	2b50      	cmp	r3, #80	@ 0x50
 80050ae:	d873      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050b0:	2b40      	cmp	r3, #64	@ 0x40
 80050b2:	d058      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0x13e>
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d86f      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050b8:	2b30      	cmp	r3, #48	@ 0x30
 80050ba:	d064      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x15e>
 80050bc:	2b30      	cmp	r3, #48	@ 0x30
 80050be:	d86b      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d060      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x15e>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d867      	bhi.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05c      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x15e>
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d05a      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x15e>
 80050d0:	e062      	b.n	8005198 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e2:	f000 f9a9 	bl	8005438 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	609a      	str	r2, [r3, #8]
      break;
 80050fe:	e04f      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005110:	f000 f992 	bl	8005438 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005122:	609a      	str	r2, [r3, #8]
      break;
 8005124:	e03c      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	461a      	mov	r2, r3
 8005134:	f000 f906 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2150      	movs	r1, #80	@ 0x50
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f95f 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005144:	e02c      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005152:	461a      	mov	r2, r3
 8005154:	f000 f925 	bl	80053a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2160      	movs	r1, #96	@ 0x60
 800515e:	4618      	mov	r0, r3
 8005160:	f000 f94f 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005164:	e01c      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	461a      	mov	r2, r3
 8005174:	f000 f8e6 	bl	8005344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2140      	movs	r1, #64	@ 0x40
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f93f 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005184:	e00c      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f000 f936 	bl	8005402 <TIM_ITRx_SetConfig>
      break;
 8005196:	e003      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e000      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800519e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a42      	ldr	r2, [pc, #264]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00f      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3f      	ldr	r2, [pc, #252]	@ (800532c <TIM_Base_SetConfig+0x120>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3e      	ldr	r2, [pc, #248]	@ (8005330 <TIM_Base_SetConfig+0x124>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x38>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3d      	ldr	r2, [pc, #244]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a33      	ldr	r2, [pc, #204]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01b      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005264:	d017      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a30      	ldr	r2, [pc, #192]	@ (800532c <TIM_Base_SetConfig+0x120>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2f      	ldr	r2, [pc, #188]	@ (8005330 <TIM_Base_SetConfig+0x124>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2e      	ldr	r2, [pc, #184]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <TIM_Base_SetConfig+0x12c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <TIM_Base_SetConfig+0x130>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2b      	ldr	r2, [pc, #172]	@ (8005340 <TIM_Base_SetConfig+0x134>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <TIM_Base_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <TIM_Base_SetConfig+0x128>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a16      	ldr	r2, [pc, #88]	@ (8005338 <TIM_Base_SetConfig+0x12c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	@ (800533c <TIM_Base_SetConfig+0x130>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xe8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	@ (8005340 <TIM_Base_SetConfig+0x134>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]
  }
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800536e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 030a 	bic.w	r3, r3, #10
 8005380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f023 0210 	bic.w	r2, r3, #16
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	f043 0307 	orr.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	021a      	lsls	r2, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e063      	b.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2a      	ldr	r2, [pc, #168]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005502:	d013      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a12      	ldr	r2, [pc, #72]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10c      	bne.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	4313      	orrs	r3, r2
 800553c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40014000 	.word	0x40014000

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e040      	b.n	8005648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc f980 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2224      	movs	r2, #36	@ 0x24
 80055e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fdd0 	bl	80061a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fbf9 	bl	8005df8 <UART_SetConfig>
 8005606:	4603      	mov	r3, r0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e01b      	b.n	8005648 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800561e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800562e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fe4f 	bl	80062e4 <UART_CheckIdleState>
 8005646:	4603      	mov	r3, r0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005664:	2b20      	cmp	r3, #32
 8005666:	d177      	bne.n	8005758 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_UART_Transmit+0x24>
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e070      	b.n	800575a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2221      	movs	r2, #33	@ 0x21
 8005684:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005686:	f7fc fb81 	bl	8001d8c <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a4:	d108      	bne.n	80056b8 <HAL_UART_Transmit+0x68>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e003      	b.n	80056c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056c0:	e02f      	b.n	8005722 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2180      	movs	r1, #128	@ 0x80
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 feb1 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e03b      	b.n	800575a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	b292      	uxth	r2, r2
 80056f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3302      	adds	r3, #2
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e007      	b.n	8005710 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1c9      	bne.n	80056c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2140      	movs	r1, #64	@ 0x40
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fe7b 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e005      	b.n	800575a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08a      	sub	sp, #40	@ 0x28
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005776:	2b20      	cmp	r3, #32
 8005778:	d132      	bne.n	80057e0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_Receive_IT+0x24>
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e02b      	b.n	80057e2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	613b      	str	r3, [r7, #16]
   return(result);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fe9a 	bl	8006510 <UART_Start_Receive_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	e000      	b.n	80057e2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3728      	adds	r7, #40	@ 0x28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0ba      	sub	sp, #232	@ 0xe8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005816:	f640 030f 	movw	r3, #2063	@ 0x80f
 800581a:	4013      	ands	r3, r2
 800581c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d115      	bne.n	8005854 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00f      	beq.n	8005854 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 82ab 	beq.w	8005da0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
      }
      return;
 8005852:	e2a5      	b.n	8005da0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8117 	beq.w	8005a8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800586a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800586e:	4b85      	ldr	r3, [pc, #532]	@ (8005a84 <HAL_UART_IRQHandler+0x298>)
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 810a 	beq.w	8005a8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_UART_IRQHandler+0xbc>
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2201      	movs	r2, #1
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800589e:	f043 0201 	orr.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d011      	beq.n	80058d8 <HAL_UART_IRQHandler+0xec>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2202      	movs	r2, #2
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d011      	beq.n	8005908 <HAL_UART_IRQHandler+0x11c>
 80058e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fe:	f043 0202 	orr.w	r2, r3, #2
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d017      	beq.n	8005944 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2208      	movs	r2, #8
 8005932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593a:	f043 0208 	orr.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <HAL_UART_IRQHandler+0x18a>
 8005950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005954:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8211 	beq.w	8005da4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800598e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b40      	cmp	r3, #64	@ 0x40
 80059c0:	d005      	beq.n	80059ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04f      	beq.n	8005a6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fe52 	bl	8006678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b40      	cmp	r3, #64	@ 0x40
 80059e0:	d141      	bne.n	8005a66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d9      	bne.n	80059e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d013      	beq.n	8005a5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3a:	4a13      	ldr	r2, [pc, #76]	@ (8005a88 <HAL_UART_IRQHandler+0x29c>)
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc fb2f 	bl	80020a6 <HAL_DMA_Abort_IT>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d017      	beq.n	8005a7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e00f      	b.n	8005a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9b4 	bl	8005dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	e00b      	b.n	8005a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9b0 	bl	8005dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	e007      	b.n	8005a7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9ac 	bl	8005dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a7c:	e192      	b.n	8005da4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7e:	bf00      	nop
    return;
 8005a80:	e190      	b.n	8005da4 <HAL_UART_IRQHandler+0x5b8>
 8005a82:	bf00      	nop
 8005a84:	04000120 	.word	0x04000120
 8005a88:	08006741 	.word	0x08006741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 814b 	bne.w	8005d2c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8144 	beq.w	8005d2c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 813d 	beq.w	8005d2c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac4:	2b40      	cmp	r3, #64	@ 0x40
 8005ac6:	f040 80b5 	bne.w	8005c34 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8164 	beq.w	8005da8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aea:	429a      	cmp	r2, r3
 8005aec:	f080 815c 	bcs.w	8005da8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	f000 8086 	beq.w	8005c12 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b34:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1da      	bne.n	8005b06 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e1      	bne.n	8005b50 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bb0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e3      	bne.n	8005b8c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be2:	f023 0310 	bic.w	r3, r3, #16
 8005be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bf6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e4      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fc fa0c 	bl	800202a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f8d7 	bl	8005de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c32:	e0b9      	b.n	8005da8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80ab 	beq.w	8005dac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 80a6 	beq.w	8005dac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e4      	bne.n	8005c60 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e3      	bne.n	8005c96 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0310 	bic.w	r3, r3, #16
 8005cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	617b      	str	r3, [r7, #20]
   return(result);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e4      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f85b 	bl	8005de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d2a:	e03f      	b.n	8005dac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <HAL_UART_IRQHandler+0x56a>
 8005d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fede 	bl	8006b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d54:	e02d      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01c      	beq.n	8005db0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
    }
    return;
 8005d7e:	e017      	b.n	8005db0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d012      	beq.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00c      	beq.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fce7 	bl	800676c <UART_EndTransmit_IT>
    return;
 8005d9e:	e008      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005da0:	bf00      	nop
 8005da2:	e006      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005da4:	bf00      	nop
 8005da6:	e004      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005da8:	bf00      	nop
 8005daa:	e002      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005dac:	bf00      	nop
 8005dae:	e000      	b.n	8005db2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005db0:	bf00      	nop
  }

}
 8005db2:	37e8      	adds	r7, #232	@ 0xe8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005e26:	f023 030c 	bic.w	r3, r3, #12
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	6979      	ldr	r1, [r7, #20]
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4aa7      	ldr	r2, [pc, #668]	@ (8006110 <UART_SetConfig+0x318>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d120      	bne.n	8005eba <UART_SetConfig+0xc2>
 8005e78:	4ba6      	ldr	r3, [pc, #664]	@ (8006114 <UART_SetConfig+0x31c>)
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7c:	f003 0303 	and.w	r3, r3, #3
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d817      	bhi.n	8005eb4 <UART_SetConfig+0xbc>
 8005e84:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <UART_SetConfig+0x94>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ea9 	.word	0x08005ea9
 8005e94:	08005eaf 	.word	0x08005eaf
 8005e98:	08005ea3 	.word	0x08005ea3
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e0b5      	b.n	800600e <UART_SetConfig+0x216>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e0b2      	b.n	800600e <UART_SetConfig+0x216>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e0af      	b.n	800600e <UART_SetConfig+0x216>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e0ac      	b.n	800600e <UART_SetConfig+0x216>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e0a9      	b.n	800600e <UART_SetConfig+0x216>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a96      	ldr	r2, [pc, #600]	@ (8006118 <UART_SetConfig+0x320>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d124      	bne.n	8005f0e <UART_SetConfig+0x116>
 8005ec4:	4b93      	ldr	r3, [pc, #588]	@ (8006114 <UART_SetConfig+0x31c>)
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ecc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ed0:	d011      	beq.n	8005ef6 <UART_SetConfig+0xfe>
 8005ed2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ed6:	d817      	bhi.n	8005f08 <UART_SetConfig+0x110>
 8005ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005edc:	d011      	beq.n	8005f02 <UART_SetConfig+0x10a>
 8005ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ee2:	d811      	bhi.n	8005f08 <UART_SetConfig+0x110>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <UART_SetConfig+0xf8>
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eec:	d006      	beq.n	8005efc <UART_SetConfig+0x104>
 8005eee:	e00b      	b.n	8005f08 <UART_SetConfig+0x110>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e08b      	b.n	800600e <UART_SetConfig+0x216>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e088      	b.n	800600e <UART_SetConfig+0x216>
 8005efc:	2304      	movs	r3, #4
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e085      	b.n	800600e <UART_SetConfig+0x216>
 8005f02:	2308      	movs	r3, #8
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e082      	b.n	800600e <UART_SetConfig+0x216>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e07f      	b.n	800600e <UART_SetConfig+0x216>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a82      	ldr	r2, [pc, #520]	@ (800611c <UART_SetConfig+0x324>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d124      	bne.n	8005f62 <UART_SetConfig+0x16a>
 8005f18:	4b7e      	ldr	r3, [pc, #504]	@ (8006114 <UART_SetConfig+0x31c>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005f20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f24:	d011      	beq.n	8005f4a <UART_SetConfig+0x152>
 8005f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f2a:	d817      	bhi.n	8005f5c <UART_SetConfig+0x164>
 8005f2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f30:	d011      	beq.n	8005f56 <UART_SetConfig+0x15e>
 8005f32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f36:	d811      	bhi.n	8005f5c <UART_SetConfig+0x164>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <UART_SetConfig+0x14c>
 8005f3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f40:	d006      	beq.n	8005f50 <UART_SetConfig+0x158>
 8005f42:	e00b      	b.n	8005f5c <UART_SetConfig+0x164>
 8005f44:	2300      	movs	r3, #0
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e061      	b.n	800600e <UART_SetConfig+0x216>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e05e      	b.n	800600e <UART_SetConfig+0x216>
 8005f50:	2304      	movs	r3, #4
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e05b      	b.n	800600e <UART_SetConfig+0x216>
 8005f56:	2308      	movs	r3, #8
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e058      	b.n	800600e <UART_SetConfig+0x216>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e055      	b.n	800600e <UART_SetConfig+0x216>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6e      	ldr	r2, [pc, #440]	@ (8006120 <UART_SetConfig+0x328>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d124      	bne.n	8005fb6 <UART_SetConfig+0x1be>
 8005f6c:	4b69      	ldr	r3, [pc, #420]	@ (8006114 <UART_SetConfig+0x31c>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005f74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f78:	d011      	beq.n	8005f9e <UART_SetConfig+0x1a6>
 8005f7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f7e:	d817      	bhi.n	8005fb0 <UART_SetConfig+0x1b8>
 8005f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f84:	d011      	beq.n	8005faa <UART_SetConfig+0x1b2>
 8005f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f8a:	d811      	bhi.n	8005fb0 <UART_SetConfig+0x1b8>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <UART_SetConfig+0x1a0>
 8005f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f94:	d006      	beq.n	8005fa4 <UART_SetConfig+0x1ac>
 8005f96:	e00b      	b.n	8005fb0 <UART_SetConfig+0x1b8>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e037      	b.n	800600e <UART_SetConfig+0x216>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e034      	b.n	800600e <UART_SetConfig+0x216>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e031      	b.n	800600e <UART_SetConfig+0x216>
 8005faa:	2308      	movs	r3, #8
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e02e      	b.n	800600e <UART_SetConfig+0x216>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e02b      	b.n	800600e <UART_SetConfig+0x216>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a5a      	ldr	r2, [pc, #360]	@ (8006124 <UART_SetConfig+0x32c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d124      	bne.n	800600a <UART_SetConfig+0x212>
 8005fc0:	4b54      	ldr	r3, [pc, #336]	@ (8006114 <UART_SetConfig+0x31c>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005fc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fcc:	d011      	beq.n	8005ff2 <UART_SetConfig+0x1fa>
 8005fce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd2:	d817      	bhi.n	8006004 <UART_SetConfig+0x20c>
 8005fd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fd8:	d011      	beq.n	8005ffe <UART_SetConfig+0x206>
 8005fda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fde:	d811      	bhi.n	8006004 <UART_SetConfig+0x20c>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <UART_SetConfig+0x1f4>
 8005fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe8:	d006      	beq.n	8005ff8 <UART_SetConfig+0x200>
 8005fea:	e00b      	b.n	8006004 <UART_SetConfig+0x20c>
 8005fec:	2300      	movs	r3, #0
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x216>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e00a      	b.n	800600e <UART_SetConfig+0x216>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e007      	b.n	800600e <UART_SetConfig+0x216>
 8005ffe:	2308      	movs	r3, #8
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e004      	b.n	800600e <UART_SetConfig+0x216>
 8006004:	2310      	movs	r3, #16
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e001      	b.n	800600e <UART_SetConfig+0x216>
 800600a:	2310      	movs	r3, #16
 800600c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006016:	d15b      	bne.n	80060d0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006018:	7ffb      	ldrb	r3, [r7, #31]
 800601a:	2b08      	cmp	r3, #8
 800601c:	d827      	bhi.n	800606e <UART_SetConfig+0x276>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0x22c>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006049 	.word	0x08006049
 8006028:	08006051 	.word	0x08006051
 800602c:	08006059 	.word	0x08006059
 8006030:	0800606f 	.word	0x0800606f
 8006034:	0800605f 	.word	0x0800605f
 8006038:	0800606f 	.word	0x0800606f
 800603c:	0800606f 	.word	0x0800606f
 8006040:	0800606f 	.word	0x0800606f
 8006044:	08006067 	.word	0x08006067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006048:	f7fd feb0 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 800604c:	61b8      	str	r0, [r7, #24]
        break;
 800604e:	e013      	b.n	8006078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006050:	f7fd fece 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 8006054:	61b8      	str	r0, [r7, #24]
        break;
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006058:	4b33      	ldr	r3, [pc, #204]	@ (8006128 <UART_SetConfig+0x330>)
 800605a:	61bb      	str	r3, [r7, #24]
        break;
 800605c:	e00c      	b.n	8006078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605e:	f7fd fe45 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006062:	61b8      	str	r0, [r7, #24]
        break;
 8006064:	e008      	b.n	8006078 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800606a:	61bb      	str	r3, [r7, #24]
        break;
 800606c:	e004      	b.n	8006078 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	77bb      	strb	r3, [r7, #30]
        break;
 8006076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8082 	beq.w	8006184 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	005a      	lsls	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	441a      	add	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d916      	bls.n	80060ca <UART_SetConfig+0x2d2>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a2:	d212      	bcs.n	80060ca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f023 030f 	bic.w	r3, r3, #15
 80060ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	4313      	orrs	r3, r2
 80060be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	89fa      	ldrh	r2, [r7, #14]
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	e05c      	b.n	8006184 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	77bb      	strb	r3, [r7, #30]
 80060ce:	e059      	b.n	8006184 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d835      	bhi.n	8006142 <UART_SetConfig+0x34a>
 80060d6:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <UART_SetConfig+0x2e4>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006101 	.word	0x08006101
 80060e0:	08006109 	.word	0x08006109
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	08006143 	.word	0x08006143
 80060ec:	08006133 	.word	0x08006133
 80060f0:	08006143 	.word	0x08006143
 80060f4:	08006143 	.word	0x08006143
 80060f8:	08006143 	.word	0x08006143
 80060fc:	0800613b 	.word	0x0800613b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fd fe54 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8006104:	61b8      	str	r0, [r7, #24]
        break;
 8006106:	e021      	b.n	800614c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fd fe72 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 800610c:	61b8      	str	r0, [r7, #24]
        break;
 800610e:	e01d      	b.n	800614c <UART_SetConfig+0x354>
 8006110:	40013800 	.word	0x40013800
 8006114:	40021000 	.word	0x40021000
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800612c:	4b1b      	ldr	r3, [pc, #108]	@ (800619c <UART_SetConfig+0x3a4>)
 800612e:	61bb      	str	r3, [r7, #24]
        break;
 8006130:	e00c      	b.n	800614c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006132:	f7fd fddb 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006136:	61b8      	str	r0, [r7, #24]
        break;
 8006138:	e008      	b.n	800614c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800613e:	61bb      	str	r3, [r7, #24]
        break;
 8006140:	e004      	b.n	800614c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	77bb      	strb	r3, [r7, #30]
        break;
 800614a:	bf00      	nop
    }

    if (pclk != 0U)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d018      	beq.n	8006184 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	085a      	lsrs	r2, r3, #1
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	441a      	add	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b0f      	cmp	r3, #15
 800616a:	d909      	bls.n	8006180 <UART_SetConfig+0x388>
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006172:	d205      	bcs.n	8006180 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60da      	str	r2, [r3, #12]
 800617e:	e001      	b.n	8006184 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006190:	7fbb      	ldrb	r3, [r7, #30]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	007a1200 	.word	0x007a1200

080061a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d10a      	bne.n	80062b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b098      	sub	sp, #96	@ 0x60
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f4:	f7fb fd4a 	bl	8001d8c <HAL_GetTick>
 80062f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d12e      	bne.n	8006366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f88c 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d021      	beq.n	8006366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006336:	653b      	str	r3, [r7, #80]	@ 0x50
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006340:	647b      	str	r3, [r7, #68]	@ 0x44
 8006342:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800634e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e062      	b.n	800642c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d149      	bne.n	8006408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f856 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03c      	beq.n	8006408 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	623b      	str	r3, [r7, #32]
   return(result);
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e0:	61fa      	str	r2, [r7, #28]
 80063e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	617b      	str	r3, [r7, #20]
   return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e011      	b.n	800642c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3758      	adds	r7, #88	@ 0x58
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006444:	e04f      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d04b      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fb fc9d 	bl	8001d8c <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e04e      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d037      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b80      	cmp	r3, #128	@ 0x80
 800647a:	d034      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d031      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d110      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f8ed 	bl	8006678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2208      	movs	r2, #8
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e029      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c0:	d111      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8d3 	bl	8006678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0a0      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006510:	b480      	push	{r7}
 8006512:	b097      	sub	sp, #92	@ 0x5c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006542:	d10e      	bne.n	8006562 <UART_Start_Receive_IT+0x52>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <UART_Start_Receive_IT+0x48>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006556:	e01a      	b.n	800658e <UART_Start_Receive_IT+0x7e>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	22ff      	movs	r2, #255	@ 0xff
 800655c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006560:	e015      	b.n	800658e <UART_Start_Receive_IT+0x7e>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <UART_Start_Receive_IT+0x76>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <UART_Start_Receive_IT+0x6c>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	22ff      	movs	r2, #255	@ 0xff
 8006576:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800657a:	e008      	b.n	800658e <UART_Start_Receive_IT+0x7e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	227f      	movs	r2, #127	@ 0x7f
 8006580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006584:	e003      	b.n	800658e <UART_Start_Receive_IT+0x7e>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2222      	movs	r2, #34	@ 0x22
 800659a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065be:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065da:	d107      	bne.n	80065ec <UART_Start_Receive_IT+0xdc>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a22      	ldr	r2, [pc, #136]	@ (8006670 <UART_Start_Receive_IT+0x160>)
 80065e8:	669a      	str	r2, [r3, #104]	@ 0x68
 80065ea:	e002      	b.n	80065f2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4a21      	ldr	r2, [pc, #132]	@ (8006674 <UART_Start_Receive_IT+0x164>)
 80065f0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d019      	beq.n	800662e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
 800661a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_Start_Receive_IT+0xea>
 800662c:	e018      	b.n	8006660 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	613b      	str	r3, [r7, #16]
   return(result);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f043 0320 	orr.w	r3, r3, #32
 8006642:	653b      	str	r3, [r7, #80]	@ 0x50
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	61bb      	str	r3, [r7, #24]
   return(result);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	375c      	adds	r7, #92	@ 0x5c
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	08006969 	.word	0x08006969
 8006674:	080067c1 	.word	0x080067c1

08006678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b095      	sub	sp, #84	@ 0x54
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669e:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e6      	bne.n	8006680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e5      	bne.n	80066b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d118      	bne.n	8006720 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	647b      	str	r3, [r7, #68]	@ 0x44
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6979      	ldr	r1, [r7, #20]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	613b      	str	r3, [r7, #16]
   return(result);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006734:	bf00      	nop
 8006736:	3754      	adds	r7, #84	@ 0x54
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fb34 	bl	8005dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	60bb      	str	r3, [r7, #8]
   return(result);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6979      	ldr	r1, [r7, #20]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	613b      	str	r3, [r7, #16]
   return(result);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fb00 	bl	8005db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b8:	bf00      	nop
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b09c      	sub	sp, #112	@ 0x70
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d8:	2b22      	cmp	r3, #34	@ 0x22
 80067da:	f040 80b9 	bne.w	8006950 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067ec:	b2d9      	uxtb	r1, r3
 80067ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f8:	400a      	ands	r2, r1
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 809c 	bne.w	8006960 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800683c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006848:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800684c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800686a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	667b      	str	r3, [r7, #100]	@ 0x64
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800687a:	647a      	str	r2, [r7, #68]	@ 0x44
 800687c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e5      	bne.n	800685a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d018      	beq.n	80068e2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	623b      	str	r3, [r7, #32]
   return(result);
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e6      	bne.n	80068b0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d12e      	bne.n	8006948 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0310 	bic.w	r3, r3, #16
 8006904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	69b9      	ldr	r1, [r7, #24]
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	617b      	str	r3, [r7, #20]
   return(result);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d103      	bne.n	8006938 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2210      	movs	r2, #16
 8006936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fa4d 	bl	8005de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006946:	e00b      	b.n	8006960 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fa fccf 	bl	80012ec <HAL_UART_RxCpltCallback>
}
 800694e:	e007      	b.n	8006960 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0208 	orr.w	r2, r2, #8
 800695e:	619a      	str	r2, [r3, #24]
}
 8006960:	bf00      	nop
 8006962:	3770      	adds	r7, #112	@ 0x70
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b09c      	sub	sp, #112	@ 0x70
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006976:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006980:	2b22      	cmp	r3, #34	@ 0x22
 8006982:	f040 80b9 	bne.w	8006af8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800698c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006994:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006996:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800699a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800699e:	4013      	ands	r3, r2
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 809c 	bne.w	8006b08 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e6      	bne.n	80069d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d018      	beq.n	8006a8a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e6      	bne.n	8006a58 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d12e      	bne.n	8006af0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 0310 	bic.w	r3, r3, #16
 8006aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6979      	ldr	r1, [r7, #20]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e6      	bne.n	8006a98 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d103      	bne.n	8006ae0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2210      	movs	r2, #16
 8006ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff f979 	bl	8005de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aee:	e00b      	b.n	8006b08 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fa fbfb 	bl	80012ec <HAL_UART_RxCpltCallback>
}
 8006af6:	e007      	b.n	8006b08 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	619a      	str	r2, [r3, #24]
}
 8006b08:	bf00      	nop
 8006b0a:	3770      	adds	r7, #112	@ 0x70
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b2c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4013      	ands	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <srand>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <srand+0x44>)
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	b9b3      	cbnz	r3, 8006bd2 <srand+0x3a>
 8006ba4:	2018      	movs	r0, #24
 8006ba6:	f000 fa31 	bl	800700c <malloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6328      	str	r0, [r5, #48]	@ 0x30
 8006bae:	b920      	cbnz	r0, 8006bba <srand+0x22>
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <srand+0x48>)
 8006bb2:	480c      	ldr	r0, [pc, #48]	@ (8006be4 <srand+0x4c>)
 8006bb4:	2146      	movs	r1, #70	@ 0x46
 8006bb6:	f000 f9c1 	bl	8006f3c <__assert_func>
 8006bba:	490b      	ldr	r1, [pc, #44]	@ (8006be8 <srand+0x50>)
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <srand+0x54>)
 8006bbe:	e9c0 1300 	strd	r1, r3, [r0]
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <srand+0x58>)
 8006bc4:	6083      	str	r3, [r0, #8]
 8006bc6:	230b      	movs	r3, #11
 8006bc8:	8183      	strh	r3, [r0, #12]
 8006bca:	2100      	movs	r1, #0
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006bd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	611c      	str	r4, [r3, #16]
 8006bd8:	615a      	str	r2, [r3, #20]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	20000084 	.word	0x20000084
 8006be0:	08007f6c 	.word	0x08007f6c
 8006be4:	08007f83 	.word	0x08007f83
 8006be8:	abcd330e 	.word	0xabcd330e
 8006bec:	e66d1234 	.word	0xe66d1234
 8006bf0:	0005deec 	.word	0x0005deec

08006bf4 <std>:
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8006bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c02:	6083      	str	r3, [r0, #8]
 8006c04:	8181      	strh	r1, [r0, #12]
 8006c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c08:	81c2      	strh	r2, [r0, #14]
 8006c0a:	6183      	str	r3, [r0, #24]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	2208      	movs	r2, #8
 8006c10:	305c      	adds	r0, #92	@ 0x5c
 8006c12:	f000 f916 	bl	8006e42 <memset>
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <std+0x58>)
 8006c18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <std+0x5c>)
 8006c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <std+0x60>)
 8006c20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c22:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <std+0x64>)
 8006c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c26:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <std+0x68>)
 8006c28:	6224      	str	r4, [r4, #32]
 8006c2a:	429c      	cmp	r4, r3
 8006c2c:	d006      	beq.n	8006c3c <std+0x48>
 8006c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c32:	4294      	cmp	r4, r2
 8006c34:	d002      	beq.n	8006c3c <std+0x48>
 8006c36:	33d0      	adds	r3, #208	@ 0xd0
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d105      	bne.n	8006c48 <std+0x54>
 8006c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f000 b976 	b.w	8006f34 <__retarget_lock_init_recursive>
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08006dbd 	.word	0x08006dbd
 8006c50:	08006ddf 	.word	0x08006ddf
 8006c54:	08006e17 	.word	0x08006e17
 8006c58:	08006e3b 	.word	0x08006e3b
 8006c5c:	200005dc 	.word	0x200005dc

08006c60 <stdio_exit_handler>:
 8006c60:	4a02      	ldr	r2, [pc, #8]	@ (8006c6c <stdio_exit_handler+0xc>)
 8006c62:	4903      	ldr	r1, [pc, #12]	@ (8006c70 <stdio_exit_handler+0x10>)
 8006c64:	4803      	ldr	r0, [pc, #12]	@ (8006c74 <stdio_exit_handler+0x14>)
 8006c66:	f000 b869 	b.w	8006d3c <_fwalk_sglue>
 8006c6a:	bf00      	nop
 8006c6c:	20000078 	.word	0x20000078
 8006c70:	08007849 	.word	0x08007849
 8006c74:	20000088 	.word	0x20000088

08006c78 <cleanup_stdio>:
 8006c78:	6841      	ldr	r1, [r0, #4]
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <cleanup_stdio+0x34>)
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	d001      	beq.n	8006c88 <cleanup_stdio+0x10>
 8006c84:	f000 fde0 	bl	8007848 <_fflush_r>
 8006c88:	68a1      	ldr	r1, [r4, #8]
 8006c8a:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <cleanup_stdio+0x38>)
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d002      	beq.n	8006c96 <cleanup_stdio+0x1e>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fdd9 	bl	8007848 <_fflush_r>
 8006c96:	68e1      	ldr	r1, [r4, #12]
 8006c98:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <cleanup_stdio+0x3c>)
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	d004      	beq.n	8006ca8 <cleanup_stdio+0x30>
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	f000 bdd0 	b.w	8007848 <_fflush_r>
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	bf00      	nop
 8006cac:	200005dc 	.word	0x200005dc
 8006cb0:	20000644 	.word	0x20000644
 8006cb4:	200006ac 	.word	0x200006ac

08006cb8 <global_stdio_init.part.0>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <global_stdio_init.part.0+0x30>)
 8006cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006cec <global_stdio_init.part.0+0x34>)
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf0 <global_stdio_init.part.0+0x38>)
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2104      	movs	r1, #4
 8006cc8:	f7ff ff94 	bl	8006bf4 <std>
 8006ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2109      	movs	r1, #9
 8006cd4:	f7ff ff8e 	bl	8006bf4 <std>
 8006cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cdc:	2202      	movs	r2, #2
 8006cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce2:	2112      	movs	r1, #18
 8006ce4:	f7ff bf86 	b.w	8006bf4 <std>
 8006ce8:	20000714 	.word	0x20000714
 8006cec:	200005dc 	.word	0x200005dc
 8006cf0:	08006c61 	.word	0x08006c61

08006cf4 <__sfp_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	@ (8006cfc <__sfp_lock_acquire+0x8>)
 8006cf6:	f000 b91e 	b.w	8006f36 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	2000071d 	.word	0x2000071d

08006d00 <__sfp_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	@ (8006d08 <__sfp_lock_release+0x8>)
 8006d02:	f000 b919 	b.w	8006f38 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	2000071d 	.word	0x2000071d

08006d0c <__sinit>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f7ff fff0 	bl	8006cf4 <__sfp_lock_acquire>
 8006d14:	6a23      	ldr	r3, [r4, #32]
 8006d16:	b11b      	cbz	r3, 8006d20 <__sinit+0x14>
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f7ff bff0 	b.w	8006d00 <__sfp_lock_release>
 8006d20:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <__sinit+0x28>)
 8006d22:	6223      	str	r3, [r4, #32]
 8006d24:	4b04      	ldr	r3, [pc, #16]	@ (8006d38 <__sinit+0x2c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f5      	bne.n	8006d18 <__sinit+0xc>
 8006d2c:	f7ff ffc4 	bl	8006cb8 <global_stdio_init.part.0>
 8006d30:	e7f2      	b.n	8006d18 <__sinit+0xc>
 8006d32:	bf00      	nop
 8006d34:	08006c79 	.word	0x08006c79
 8006d38:	20000714 	.word	0x20000714

08006d3c <_fwalk_sglue>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	4607      	mov	r7, r0
 8006d42:	4688      	mov	r8, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	2600      	movs	r6, #0
 8006d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006d50:	d505      	bpl.n	8006d5e <_fwalk_sglue+0x22>
 8006d52:	6824      	ldr	r4, [r4, #0]
 8006d54:	2c00      	cmp	r4, #0
 8006d56:	d1f7      	bne.n	8006d48 <_fwalk_sglue+0xc>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d907      	bls.n	8006d74 <_fwalk_sglue+0x38>
 8006d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	d003      	beq.n	8006d74 <_fwalk_sglue+0x38>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c0      	blx	r8
 8006d72:	4306      	orrs	r6, r0
 8006d74:	3568      	adds	r5, #104	@ 0x68
 8006d76:	e7e9      	b.n	8006d4c <_fwalk_sglue+0x10>

08006d78 <siprintf>:
 8006d78:	b40e      	push	{r1, r2, r3}
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	b09d      	sub	sp, #116	@ 0x74
 8006d7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d80:	9002      	str	r0, [sp, #8]
 8006d82:	9006      	str	r0, [sp, #24]
 8006d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d88:	480a      	ldr	r0, [pc, #40]	@ (8006db4 <siprintf+0x3c>)
 8006d8a:	9107      	str	r1, [sp, #28]
 8006d8c:	9104      	str	r1, [sp, #16]
 8006d8e:	490a      	ldr	r1, [pc, #40]	@ (8006db8 <siprintf+0x40>)
 8006d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d94:	9105      	str	r1, [sp, #20]
 8006d96:	2400      	movs	r4, #0
 8006d98:	a902      	add	r1, sp, #8
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006da0:	f000 fa46 	bl	8007230 <_svfiprintf_r>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	701c      	strb	r4, [r3, #0]
 8006da8:	b01d      	add	sp, #116	@ 0x74
 8006daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dae:	b003      	add	sp, #12
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000084 	.word	0x20000084
 8006db8:	ffff0208 	.word	0xffff0208

08006dbc <__sread>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	f000 f868 	bl	8006e98 <_read_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	bfab      	itete	ge
 8006dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dce:	89a3      	ldrhlt	r3, [r4, #12]
 8006dd0:	181b      	addge	r3, r3, r0
 8006dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dd6:	bfac      	ite	ge
 8006dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dda:	81a3      	strhlt	r3, [r4, #12]
 8006ddc:	bd10      	pop	{r4, pc}

08006dde <__swrite>:
 8006dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	461f      	mov	r7, r3
 8006de4:	898b      	ldrh	r3, [r1, #12]
 8006de6:	05db      	lsls	r3, r3, #23
 8006de8:	4605      	mov	r5, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	4616      	mov	r6, r2
 8006dee:	d505      	bpl.n	8006dfc <__swrite+0x1e>
 8006df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df4:	2302      	movs	r3, #2
 8006df6:	2200      	movs	r2, #0
 8006df8:	f000 f83c 	bl	8006e74 <_lseek_r>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	4632      	mov	r2, r6
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e12:	f000 b853 	b.w	8006ebc <_write_r>

08006e16 <__sseek>:
 8006e16:	b510      	push	{r4, lr}
 8006e18:	460c      	mov	r4, r1
 8006e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1e:	f000 f829 	bl	8006e74 <_lseek_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	bf15      	itete	ne
 8006e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e32:	81a3      	strheq	r3, [r4, #12]
 8006e34:	bf18      	it	ne
 8006e36:	81a3      	strhne	r3, [r4, #12]
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <__sclose>:
 8006e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3e:	f000 b809 	b.w	8006e54 <_close_r>

08006e42 <memset>:
 8006e42:	4402      	add	r2, r0
 8006e44:	4603      	mov	r3, r0
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d100      	bne.n	8006e4c <memset+0xa>
 8006e4a:	4770      	bx	lr
 8006e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e50:	e7f9      	b.n	8006e46 <memset+0x4>
	...

08006e54 <_close_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d06      	ldr	r5, [pc, #24]	@ (8006e70 <_close_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fa fe94 	bl	8001b8c <_close>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_close_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_close_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000718 	.word	0x20000718

08006e74 <_lseek_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d07      	ldr	r5, [pc, #28]	@ (8006e94 <_lseek_r+0x20>)
 8006e78:	4604      	mov	r4, r0
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fa fea9 	bl	8001bda <_lseek>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_lseek_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_lseek_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	20000718 	.word	0x20000718

08006e98 <_read_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d07      	ldr	r5, [pc, #28]	@ (8006eb8 <_read_r+0x20>)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7fa fe37 	bl	8001b1a <_read>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_read_r+0x1e>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_read_r+0x1e>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20000718 	.word	0x20000718

08006ebc <_write_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	@ (8006edc <_write_r+0x20>)
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7fa fe42 	bl	8001b54 <_write>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_write_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_write_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20000718 	.word	0x20000718

08006ee0 <__errno>:
 8006ee0:	4b01      	ldr	r3, [pc, #4]	@ (8006ee8 <__errno+0x8>)
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20000084 	.word	0x20000084

08006eec <__libc_init_array>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4d0d      	ldr	r5, [pc, #52]	@ (8006f24 <__libc_init_array+0x38>)
 8006ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8006f28 <__libc_init_array+0x3c>)
 8006ef2:	1b64      	subs	r4, r4, r5
 8006ef4:	10a4      	asrs	r4, r4, #2
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	42a6      	cmp	r6, r4
 8006efa:	d109      	bne.n	8006f10 <__libc_init_array+0x24>
 8006efc:	4d0b      	ldr	r5, [pc, #44]	@ (8006f2c <__libc_init_array+0x40>)
 8006efe:	4c0c      	ldr	r4, [pc, #48]	@ (8006f30 <__libc_init_array+0x44>)
 8006f00:	f000 ffee 	bl	8007ee0 <_init>
 8006f04:	1b64      	subs	r4, r4, r5
 8006f06:	10a4      	asrs	r4, r4, #2
 8006f08:	2600      	movs	r6, #0
 8006f0a:	42a6      	cmp	r6, r4
 8006f0c:	d105      	bne.n	8006f1a <__libc_init_array+0x2e>
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f14:	4798      	blx	r3
 8006f16:	3601      	adds	r6, #1
 8006f18:	e7ee      	b.n	8006ef8 <__libc_init_array+0xc>
 8006f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1e:	4798      	blx	r3
 8006f20:	3601      	adds	r6, #1
 8006f22:	e7f2      	b.n	8006f0a <__libc_init_array+0x1e>
 8006f24:	08008054 	.word	0x08008054
 8006f28:	08008054 	.word	0x08008054
 8006f2c:	08008054 	.word	0x08008054
 8006f30:	08008058 	.word	0x08008058

08006f34 <__retarget_lock_init_recursive>:
 8006f34:	4770      	bx	lr

08006f36 <__retarget_lock_acquire_recursive>:
 8006f36:	4770      	bx	lr

08006f38 <__retarget_lock_release_recursive>:
 8006f38:	4770      	bx	lr
	...

08006f3c <__assert_func>:
 8006f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f3e:	4614      	mov	r4, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <__assert_func+0x2c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4605      	mov	r5, r0
 8006f48:	68d8      	ldr	r0, [r3, #12]
 8006f4a:	b14c      	cbz	r4, 8006f60 <__assert_func+0x24>
 8006f4c:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <__assert_func+0x30>)
 8006f4e:	9100      	str	r1, [sp, #0]
 8006f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f54:	4906      	ldr	r1, [pc, #24]	@ (8006f70 <__assert_func+0x34>)
 8006f56:	462b      	mov	r3, r5
 8006f58:	f000 fc9e 	bl	8007898 <fiprintf>
 8006f5c:	f000 fce6 	bl	800792c <abort>
 8006f60:	4b04      	ldr	r3, [pc, #16]	@ (8006f74 <__assert_func+0x38>)
 8006f62:	461c      	mov	r4, r3
 8006f64:	e7f3      	b.n	8006f4e <__assert_func+0x12>
 8006f66:	bf00      	nop
 8006f68:	20000084 	.word	0x20000084
 8006f6c:	08007fdb 	.word	0x08007fdb
 8006f70:	08007fe8 	.word	0x08007fe8
 8006f74:	08008016 	.word	0x08008016

08006f78 <_free_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d041      	beq.n	8007004 <_free_r+0x8c>
 8006f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f84:	1f0c      	subs	r4, r1, #4
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfb8      	it	lt
 8006f8a:	18e4      	addlt	r4, r4, r3
 8006f8c:	f000 f8e8 	bl	8007160 <__malloc_lock>
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <_free_r+0x90>)
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	b933      	cbnz	r3, 8006fa4 <_free_r+0x2c>
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa0:	f000 b8e4 	b.w	800716c <__malloc_unlock>
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d908      	bls.n	8006fba <_free_r+0x42>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	1821      	adds	r1, r4, r0
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf01      	itttt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	e7ed      	b.n	8006f96 <_free_r+0x1e>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x4c>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x42>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1850      	adds	r0, r2, r1
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x6c>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	4401      	add	r1, r0
 8006fd0:	1850      	adds	r0, r2, r1
 8006fd2:	4283      	cmp	r3, r0
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1e0      	bne.n	8006f9a <_free_r+0x22>
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4408      	add	r0, r1
 8006fe0:	6010      	str	r0, [r2, #0]
 8006fe2:	e7da      	b.n	8006f9a <_free_r+0x22>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x74>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	e7d6      	b.n	8006f9a <_free_r+0x22>
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	1821      	adds	r1, r4, r0
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7ca      	b.n	8006f9a <_free_r+0x22>
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	20000724 	.word	0x20000724

0800700c <malloc>:
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <malloc+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f000 b825 	b.w	8007060 <_malloc_r>
 8007016:	bf00      	nop
 8007018:	20000084 	.word	0x20000084

0800701c <sbrk_aligned>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4e0f      	ldr	r6, [pc, #60]	@ (800705c <sbrk_aligned+0x40>)
 8007020:	460c      	mov	r4, r1
 8007022:	6831      	ldr	r1, [r6, #0]
 8007024:	4605      	mov	r5, r0
 8007026:	b911      	cbnz	r1, 800702e <sbrk_aligned+0x12>
 8007028:	f000 fc62 	bl	80078f0 <_sbrk_r>
 800702c:	6030      	str	r0, [r6, #0]
 800702e:	4621      	mov	r1, r4
 8007030:	4628      	mov	r0, r5
 8007032:	f000 fc5d 	bl	80078f0 <_sbrk_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	d103      	bne.n	8007042 <sbrk_aligned+0x26>
 800703a:	f04f 34ff 	mov.w	r4, #4294967295
 800703e:	4620      	mov	r0, r4
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	1cc4      	adds	r4, r0, #3
 8007044:	f024 0403 	bic.w	r4, r4, #3
 8007048:	42a0      	cmp	r0, r4
 800704a:	d0f8      	beq.n	800703e <sbrk_aligned+0x22>
 800704c:	1a21      	subs	r1, r4, r0
 800704e:	4628      	mov	r0, r5
 8007050:	f000 fc4e 	bl	80078f0 <_sbrk_r>
 8007054:	3001      	adds	r0, #1
 8007056:	d1f2      	bne.n	800703e <sbrk_aligned+0x22>
 8007058:	e7ef      	b.n	800703a <sbrk_aligned+0x1e>
 800705a:	bf00      	nop
 800705c:	20000720 	.word	0x20000720

08007060 <_malloc_r>:
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	1ccd      	adds	r5, r1, #3
 8007066:	f025 0503 	bic.w	r5, r5, #3
 800706a:	3508      	adds	r5, #8
 800706c:	2d0c      	cmp	r5, #12
 800706e:	bf38      	it	cc
 8007070:	250c      	movcc	r5, #12
 8007072:	2d00      	cmp	r5, #0
 8007074:	4606      	mov	r6, r0
 8007076:	db01      	blt.n	800707c <_malloc_r+0x1c>
 8007078:	42a9      	cmp	r1, r5
 800707a:	d904      	bls.n	8007086 <_malloc_r+0x26>
 800707c:	230c      	movs	r3, #12
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	2000      	movs	r0, #0
 8007082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800715c <_malloc_r+0xfc>
 800708a:	f000 f869 	bl	8007160 <__malloc_lock>
 800708e:	f8d8 3000 	ldr.w	r3, [r8]
 8007092:	461c      	mov	r4, r3
 8007094:	bb44      	cbnz	r4, 80070e8 <_malloc_r+0x88>
 8007096:	4629      	mov	r1, r5
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff ffbf 	bl	800701c <sbrk_aligned>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	4604      	mov	r4, r0
 80070a2:	d158      	bne.n	8007156 <_malloc_r+0xf6>
 80070a4:	f8d8 4000 	ldr.w	r4, [r8]
 80070a8:	4627      	mov	r7, r4
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	d143      	bne.n	8007136 <_malloc_r+0xd6>
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	d04b      	beq.n	800714a <_malloc_r+0xea>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	4639      	mov	r1, r7
 80070b6:	4630      	mov	r0, r6
 80070b8:	eb04 0903 	add.w	r9, r4, r3
 80070bc:	f000 fc18 	bl	80078f0 <_sbrk_r>
 80070c0:	4581      	cmp	r9, r0
 80070c2:	d142      	bne.n	800714a <_malloc_r+0xea>
 80070c4:	6821      	ldr	r1, [r4, #0]
 80070c6:	1a6d      	subs	r5, r5, r1
 80070c8:	4629      	mov	r1, r5
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffa6 	bl	800701c <sbrk_aligned>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d03a      	beq.n	800714a <_malloc_r+0xea>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	442b      	add	r3, r5
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	f8d8 3000 	ldr.w	r3, [r8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	bb62      	cbnz	r2, 800713c <_malloc_r+0xdc>
 80070e2:	f8c8 7000 	str.w	r7, [r8]
 80070e6:	e00f      	b.n	8007108 <_malloc_r+0xa8>
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	1b52      	subs	r2, r2, r5
 80070ec:	d420      	bmi.n	8007130 <_malloc_r+0xd0>
 80070ee:	2a0b      	cmp	r2, #11
 80070f0:	d917      	bls.n	8007122 <_malloc_r+0xc2>
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	6025      	str	r5, [r4, #0]
 80070f8:	bf18      	it	ne
 80070fa:	6059      	strne	r1, [r3, #4]
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	bf08      	it	eq
 8007100:	f8c8 1000 	streq.w	r1, [r8]
 8007104:	5162      	str	r2, [r4, r5]
 8007106:	604b      	str	r3, [r1, #4]
 8007108:	4630      	mov	r0, r6
 800710a:	f000 f82f 	bl	800716c <__malloc_unlock>
 800710e:	f104 000b 	add.w	r0, r4, #11
 8007112:	1d23      	adds	r3, r4, #4
 8007114:	f020 0007 	bic.w	r0, r0, #7
 8007118:	1ac2      	subs	r2, r0, r3
 800711a:	bf1c      	itt	ne
 800711c:	1a1b      	subne	r3, r3, r0
 800711e:	50a3      	strne	r3, [r4, r2]
 8007120:	e7af      	b.n	8007082 <_malloc_r+0x22>
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	bf0c      	ite	eq
 8007128:	f8c8 2000 	streq.w	r2, [r8]
 800712c:	605a      	strne	r2, [r3, #4]
 800712e:	e7eb      	b.n	8007108 <_malloc_r+0xa8>
 8007130:	4623      	mov	r3, r4
 8007132:	6864      	ldr	r4, [r4, #4]
 8007134:	e7ae      	b.n	8007094 <_malloc_r+0x34>
 8007136:	463c      	mov	r4, r7
 8007138:	687f      	ldr	r7, [r7, #4]
 800713a:	e7b6      	b.n	80070aa <_malloc_r+0x4a>
 800713c:	461a      	mov	r2, r3
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	42a3      	cmp	r3, r4
 8007142:	d1fb      	bne.n	800713c <_malloc_r+0xdc>
 8007144:	2300      	movs	r3, #0
 8007146:	6053      	str	r3, [r2, #4]
 8007148:	e7de      	b.n	8007108 <_malloc_r+0xa8>
 800714a:	230c      	movs	r3, #12
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	4630      	mov	r0, r6
 8007150:	f000 f80c 	bl	800716c <__malloc_unlock>
 8007154:	e794      	b.n	8007080 <_malloc_r+0x20>
 8007156:	6005      	str	r5, [r0, #0]
 8007158:	e7d6      	b.n	8007108 <_malloc_r+0xa8>
 800715a:	bf00      	nop
 800715c:	20000724 	.word	0x20000724

08007160 <__malloc_lock>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__malloc_lock+0x8>)
 8007162:	f7ff bee8 	b.w	8006f36 <__retarget_lock_acquire_recursive>
 8007166:	bf00      	nop
 8007168:	2000071c 	.word	0x2000071c

0800716c <__malloc_unlock>:
 800716c:	4801      	ldr	r0, [pc, #4]	@ (8007174 <__malloc_unlock+0x8>)
 800716e:	f7ff bee3 	b.w	8006f38 <__retarget_lock_release_recursive>
 8007172:	bf00      	nop
 8007174:	2000071c 	.word	0x2000071c

08007178 <__ssputs_r>:
 8007178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	688e      	ldr	r6, [r1, #8]
 800717e:	461f      	mov	r7, r3
 8007180:	42be      	cmp	r6, r7
 8007182:	680b      	ldr	r3, [r1, #0]
 8007184:	4682      	mov	sl, r0
 8007186:	460c      	mov	r4, r1
 8007188:	4690      	mov	r8, r2
 800718a:	d82d      	bhi.n	80071e8 <__ssputs_r+0x70>
 800718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007194:	d026      	beq.n	80071e4 <__ssputs_r+0x6c>
 8007196:	6965      	ldr	r5, [r4, #20]
 8007198:	6909      	ldr	r1, [r1, #16]
 800719a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800719e:	eba3 0901 	sub.w	r9, r3, r1
 80071a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071a6:	1c7b      	adds	r3, r7, #1
 80071a8:	444b      	add	r3, r9
 80071aa:	106d      	asrs	r5, r5, #1
 80071ac:	429d      	cmp	r5, r3
 80071ae:	bf38      	it	cc
 80071b0:	461d      	movcc	r5, r3
 80071b2:	0553      	lsls	r3, r2, #21
 80071b4:	d527      	bpl.n	8007206 <__ssputs_r+0x8e>
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7ff ff52 	bl	8007060 <_malloc_r>
 80071bc:	4606      	mov	r6, r0
 80071be:	b360      	cbz	r0, 800721a <__ssputs_r+0xa2>
 80071c0:	6921      	ldr	r1, [r4, #16]
 80071c2:	464a      	mov	r2, r9
 80071c4:	f000 fba4 	bl	8007910 <memcpy>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	6126      	str	r6, [r4, #16]
 80071d6:	6165      	str	r5, [r4, #20]
 80071d8:	444e      	add	r6, r9
 80071da:	eba5 0509 	sub.w	r5, r5, r9
 80071de:	6026      	str	r6, [r4, #0]
 80071e0:	60a5      	str	r5, [r4, #8]
 80071e2:	463e      	mov	r6, r7
 80071e4:	42be      	cmp	r6, r7
 80071e6:	d900      	bls.n	80071ea <__ssputs_r+0x72>
 80071e8:	463e      	mov	r6, r7
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	4632      	mov	r2, r6
 80071ee:	4641      	mov	r1, r8
 80071f0:	f000 fb64 	bl	80078bc <memmove>
 80071f4:	68a3      	ldr	r3, [r4, #8]
 80071f6:	1b9b      	subs	r3, r3, r6
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	4433      	add	r3, r6
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	462a      	mov	r2, r5
 8007208:	f000 fb97 	bl	800793a <_realloc_r>
 800720c:	4606      	mov	r6, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d1e0      	bne.n	80071d4 <__ssputs_r+0x5c>
 8007212:	6921      	ldr	r1, [r4, #16]
 8007214:	4650      	mov	r0, sl
 8007216:	f7ff feaf 	bl	8006f78 <_free_r>
 800721a:	230c      	movs	r3, #12
 800721c:	f8ca 3000 	str.w	r3, [sl]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e7e9      	b.n	8007202 <__ssputs_r+0x8a>
	...

08007230 <_svfiprintf_r>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	4698      	mov	r8, r3
 8007236:	898b      	ldrh	r3, [r1, #12]
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	b09d      	sub	sp, #116	@ 0x74
 800723c:	4607      	mov	r7, r0
 800723e:	460d      	mov	r5, r1
 8007240:	4614      	mov	r4, r2
 8007242:	d510      	bpl.n	8007266 <_svfiprintf_r+0x36>
 8007244:	690b      	ldr	r3, [r1, #16]
 8007246:	b973      	cbnz	r3, 8007266 <_svfiprintf_r+0x36>
 8007248:	2140      	movs	r1, #64	@ 0x40
 800724a:	f7ff ff09 	bl	8007060 <_malloc_r>
 800724e:	6028      	str	r0, [r5, #0]
 8007250:	6128      	str	r0, [r5, #16]
 8007252:	b930      	cbnz	r0, 8007262 <_svfiprintf_r+0x32>
 8007254:	230c      	movs	r3, #12
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	b01d      	add	sp, #116	@ 0x74
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	2340      	movs	r3, #64	@ 0x40
 8007264:	616b      	str	r3, [r5, #20]
 8007266:	2300      	movs	r3, #0
 8007268:	9309      	str	r3, [sp, #36]	@ 0x24
 800726a:	2320      	movs	r3, #32
 800726c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007270:	f8cd 800c 	str.w	r8, [sp, #12]
 8007274:	2330      	movs	r3, #48	@ 0x30
 8007276:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007414 <_svfiprintf_r+0x1e4>
 800727a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727e:	f04f 0901 	mov.w	r9, #1
 8007282:	4623      	mov	r3, r4
 8007284:	469a      	mov	sl, r3
 8007286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728a:	b10a      	cbz	r2, 8007290 <_svfiprintf_r+0x60>
 800728c:	2a25      	cmp	r2, #37	@ 0x25
 800728e:	d1f9      	bne.n	8007284 <_svfiprintf_r+0x54>
 8007290:	ebba 0b04 	subs.w	fp, sl, r4
 8007294:	d00b      	beq.n	80072ae <_svfiprintf_r+0x7e>
 8007296:	465b      	mov	r3, fp
 8007298:	4622      	mov	r2, r4
 800729a:	4629      	mov	r1, r5
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ff6b 	bl	8007178 <__ssputs_r>
 80072a2:	3001      	adds	r0, #1
 80072a4:	f000 80a7 	beq.w	80073f6 <_svfiprintf_r+0x1c6>
 80072a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072aa:	445a      	add	r2, fp
 80072ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ae:	f89a 3000 	ldrb.w	r3, [sl]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 809f 	beq.w	80073f6 <_svfiprintf_r+0x1c6>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c2:	f10a 0a01 	add.w	sl, sl, #1
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	9307      	str	r3, [sp, #28]
 80072ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80072d0:	4654      	mov	r4, sl
 80072d2:	2205      	movs	r2, #5
 80072d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d8:	484e      	ldr	r0, [pc, #312]	@ (8007414 <_svfiprintf_r+0x1e4>)
 80072da:	f7f8 ff81 	bl	80001e0 <memchr>
 80072de:	9a04      	ldr	r2, [sp, #16]
 80072e0:	b9d8      	cbnz	r0, 800731a <_svfiprintf_r+0xea>
 80072e2:	06d0      	lsls	r0, r2, #27
 80072e4:	bf44      	itt	mi
 80072e6:	2320      	movmi	r3, #32
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ec:	0711      	lsls	r1, r2, #28
 80072ee:	bf44      	itt	mi
 80072f0:	232b      	movmi	r3, #43	@ 0x2b
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f6:	f89a 3000 	ldrb.w	r3, [sl]
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d015      	beq.n	800732a <_svfiprintf_r+0xfa>
 80072fe:	9a07      	ldr	r2, [sp, #28]
 8007300:	4654      	mov	r4, sl
 8007302:	2000      	movs	r0, #0
 8007304:	f04f 0c0a 	mov.w	ip, #10
 8007308:	4621      	mov	r1, r4
 800730a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730e:	3b30      	subs	r3, #48	@ 0x30
 8007310:	2b09      	cmp	r3, #9
 8007312:	d94b      	bls.n	80073ac <_svfiprintf_r+0x17c>
 8007314:	b1b0      	cbz	r0, 8007344 <_svfiprintf_r+0x114>
 8007316:	9207      	str	r2, [sp, #28]
 8007318:	e014      	b.n	8007344 <_svfiprintf_r+0x114>
 800731a:	eba0 0308 	sub.w	r3, r0, r8
 800731e:	fa09 f303 	lsl.w	r3, r9, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	46a2      	mov	sl, r4
 8007328:	e7d2      	b.n	80072d0 <_svfiprintf_r+0xa0>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	1d19      	adds	r1, r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	9103      	str	r1, [sp, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	bfbb      	ittet	lt
 8007336:	425b      	neglt	r3, r3
 8007338:	f042 0202 	orrlt.w	r2, r2, #2
 800733c:	9307      	strge	r3, [sp, #28]
 800733e:	9307      	strlt	r3, [sp, #28]
 8007340:	bfb8      	it	lt
 8007342:	9204      	strlt	r2, [sp, #16]
 8007344:	7823      	ldrb	r3, [r4, #0]
 8007346:	2b2e      	cmp	r3, #46	@ 0x2e
 8007348:	d10a      	bne.n	8007360 <_svfiprintf_r+0x130>
 800734a:	7863      	ldrb	r3, [r4, #1]
 800734c:	2b2a      	cmp	r3, #42	@ 0x2a
 800734e:	d132      	bne.n	80073b6 <_svfiprintf_r+0x186>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	9203      	str	r2, [sp, #12]
 8007358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800735c:	3402      	adds	r4, #2
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007424 <_svfiprintf_r+0x1f4>
 8007364:	7821      	ldrb	r1, [r4, #0]
 8007366:	2203      	movs	r2, #3
 8007368:	4650      	mov	r0, sl
 800736a:	f7f8 ff39 	bl	80001e0 <memchr>
 800736e:	b138      	cbz	r0, 8007380 <_svfiprintf_r+0x150>
 8007370:	9b04      	ldr	r3, [sp, #16]
 8007372:	eba0 000a 	sub.w	r0, r0, sl
 8007376:	2240      	movs	r2, #64	@ 0x40
 8007378:	4082      	lsls	r2, r0
 800737a:	4313      	orrs	r3, r2
 800737c:	3401      	adds	r4, #1
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	4824      	ldr	r0, [pc, #144]	@ (8007418 <_svfiprintf_r+0x1e8>)
 8007386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800738a:	2206      	movs	r2, #6
 800738c:	f7f8 ff28 	bl	80001e0 <memchr>
 8007390:	2800      	cmp	r0, #0
 8007392:	d036      	beq.n	8007402 <_svfiprintf_r+0x1d2>
 8007394:	4b21      	ldr	r3, [pc, #132]	@ (800741c <_svfiprintf_r+0x1ec>)
 8007396:	bb1b      	cbnz	r3, 80073e0 <_svfiprintf_r+0x1b0>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	3307      	adds	r3, #7
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a6:	4433      	add	r3, r6
 80073a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073aa:	e76a      	b.n	8007282 <_svfiprintf_r+0x52>
 80073ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b0:	460c      	mov	r4, r1
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7a8      	b.n	8007308 <_svfiprintf_r+0xd8>
 80073b6:	2300      	movs	r3, #0
 80073b8:	3401      	adds	r4, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	4619      	mov	r1, r3
 80073be:	f04f 0c0a 	mov.w	ip, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c8:	3a30      	subs	r2, #48	@ 0x30
 80073ca:	2a09      	cmp	r2, #9
 80073cc:	d903      	bls.n	80073d6 <_svfiprintf_r+0x1a6>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0c6      	beq.n	8007360 <_svfiprintf_r+0x130>
 80073d2:	9105      	str	r1, [sp, #20]
 80073d4:	e7c4      	b.n	8007360 <_svfiprintf_r+0x130>
 80073d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073da:	4604      	mov	r4, r0
 80073dc:	2301      	movs	r3, #1
 80073de:	e7f0      	b.n	80073c2 <_svfiprintf_r+0x192>
 80073e0:	ab03      	add	r3, sp, #12
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007420 <_svfiprintf_r+0x1f0>)
 80073e8:	a904      	add	r1, sp, #16
 80073ea:	4638      	mov	r0, r7
 80073ec:	f3af 8000 	nop.w
 80073f0:	1c42      	adds	r2, r0, #1
 80073f2:	4606      	mov	r6, r0
 80073f4:	d1d6      	bne.n	80073a4 <_svfiprintf_r+0x174>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	065b      	lsls	r3, r3, #25
 80073fa:	f53f af2d 	bmi.w	8007258 <_svfiprintf_r+0x28>
 80073fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007400:	e72c      	b.n	800725c <_svfiprintf_r+0x2c>
 8007402:	ab03      	add	r3, sp, #12
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	462a      	mov	r2, r5
 8007408:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <_svfiprintf_r+0x1f0>)
 800740a:	a904      	add	r1, sp, #16
 800740c:	4638      	mov	r0, r7
 800740e:	f000 f879 	bl	8007504 <_printf_i>
 8007412:	e7ed      	b.n	80073f0 <_svfiprintf_r+0x1c0>
 8007414:	08008017 	.word	0x08008017
 8007418:	08008021 	.word	0x08008021
 800741c:	00000000 	.word	0x00000000
 8007420:	08007179 	.word	0x08007179
 8007424:	0800801d 	.word	0x0800801d

08007428 <_printf_common>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	4616      	mov	r6, r2
 800742e:	4698      	mov	r8, r3
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007444:	4607      	mov	r7, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b10a      	cbz	r2, 800744e <_printf_common+0x26>
 800744a:	3301      	adds	r3, #1
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	0699      	lsls	r1, r3, #26
 8007452:	bf42      	ittt	mi
 8007454:	6833      	ldrmi	r3, [r6, #0]
 8007456:	3302      	addmi	r3, #2
 8007458:	6033      	strmi	r3, [r6, #0]
 800745a:	6825      	ldr	r5, [r4, #0]
 800745c:	f015 0506 	ands.w	r5, r5, #6
 8007460:	d106      	bne.n	8007470 <_printf_common+0x48>
 8007462:	f104 0a19 	add.w	sl, r4, #25
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	6832      	ldr	r2, [r6, #0]
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	42ab      	cmp	r3, r5
 800746e:	dc26      	bgt.n	80074be <_printf_common+0x96>
 8007470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	3b00      	subs	r3, #0
 8007478:	bf18      	it	ne
 800747a:	2301      	movne	r3, #1
 800747c:	0692      	lsls	r2, r2, #26
 800747e:	d42b      	bmi.n	80074d8 <_printf_common+0xb0>
 8007480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007484:	4641      	mov	r1, r8
 8007486:	4638      	mov	r0, r7
 8007488:	47c8      	blx	r9
 800748a:	3001      	adds	r0, #1
 800748c:	d01e      	beq.n	80074cc <_printf_common+0xa4>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	6922      	ldr	r2, [r4, #16]
 8007492:	f003 0306 	and.w	r3, r3, #6
 8007496:	2b04      	cmp	r3, #4
 8007498:	bf02      	ittt	eq
 800749a:	68e5      	ldreq	r5, [r4, #12]
 800749c:	6833      	ldreq	r3, [r6, #0]
 800749e:	1aed      	subeq	r5, r5, r3
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	bf0c      	ite	eq
 80074a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a8:	2500      	movne	r5, #0
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bfc4      	itt	gt
 80074ae:	1a9b      	subgt	r3, r3, r2
 80074b0:	18ed      	addgt	r5, r5, r3
 80074b2:	2600      	movs	r6, #0
 80074b4:	341a      	adds	r4, #26
 80074b6:	42b5      	cmp	r5, r6
 80074b8:	d11a      	bne.n	80074f0 <_printf_common+0xc8>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e008      	b.n	80074d0 <_printf_common+0xa8>
 80074be:	2301      	movs	r3, #1
 80074c0:	4652      	mov	r2, sl
 80074c2:	4641      	mov	r1, r8
 80074c4:	4638      	mov	r0, r7
 80074c6:	47c8      	blx	r9
 80074c8:	3001      	adds	r0, #1
 80074ca:	d103      	bne.n	80074d4 <_printf_common+0xac>
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	3501      	adds	r5, #1
 80074d6:	e7c6      	b.n	8007466 <_printf_common+0x3e>
 80074d8:	18e1      	adds	r1, r4, r3
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	2030      	movs	r0, #48	@ 0x30
 80074de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074e2:	4422      	add	r2, r4
 80074e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ec:	3302      	adds	r3, #2
 80074ee:	e7c7      	b.n	8007480 <_printf_common+0x58>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4622      	mov	r2, r4
 80074f4:	4641      	mov	r1, r8
 80074f6:	4638      	mov	r0, r7
 80074f8:	47c8      	blx	r9
 80074fa:	3001      	adds	r0, #1
 80074fc:	d0e6      	beq.n	80074cc <_printf_common+0xa4>
 80074fe:	3601      	adds	r6, #1
 8007500:	e7d9      	b.n	80074b6 <_printf_common+0x8e>
	...

08007504 <_printf_i>:
 8007504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007508:	7e0f      	ldrb	r7, [r1, #24]
 800750a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800750c:	2f78      	cmp	r7, #120	@ 0x78
 800750e:	4691      	mov	r9, r2
 8007510:	4680      	mov	r8, r0
 8007512:	460c      	mov	r4, r1
 8007514:	469a      	mov	sl, r3
 8007516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800751a:	d807      	bhi.n	800752c <_printf_i+0x28>
 800751c:	2f62      	cmp	r7, #98	@ 0x62
 800751e:	d80a      	bhi.n	8007536 <_printf_i+0x32>
 8007520:	2f00      	cmp	r7, #0
 8007522:	f000 80d1 	beq.w	80076c8 <_printf_i+0x1c4>
 8007526:	2f58      	cmp	r7, #88	@ 0x58
 8007528:	f000 80b8 	beq.w	800769c <_printf_i+0x198>
 800752c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007534:	e03a      	b.n	80075ac <_printf_i+0xa8>
 8007536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800753a:	2b15      	cmp	r3, #21
 800753c:	d8f6      	bhi.n	800752c <_printf_i+0x28>
 800753e:	a101      	add	r1, pc, #4	@ (adr r1, 8007544 <_printf_i+0x40>)
 8007540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007544:	0800759d 	.word	0x0800759d
 8007548:	080075b1 	.word	0x080075b1
 800754c:	0800752d 	.word	0x0800752d
 8007550:	0800752d 	.word	0x0800752d
 8007554:	0800752d 	.word	0x0800752d
 8007558:	0800752d 	.word	0x0800752d
 800755c:	080075b1 	.word	0x080075b1
 8007560:	0800752d 	.word	0x0800752d
 8007564:	0800752d 	.word	0x0800752d
 8007568:	0800752d 	.word	0x0800752d
 800756c:	0800752d 	.word	0x0800752d
 8007570:	080076af 	.word	0x080076af
 8007574:	080075db 	.word	0x080075db
 8007578:	08007669 	.word	0x08007669
 800757c:	0800752d 	.word	0x0800752d
 8007580:	0800752d 	.word	0x0800752d
 8007584:	080076d1 	.word	0x080076d1
 8007588:	0800752d 	.word	0x0800752d
 800758c:	080075db 	.word	0x080075db
 8007590:	0800752d 	.word	0x0800752d
 8007594:	0800752d 	.word	0x0800752d
 8007598:	08007671 	.word	0x08007671
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	1d1a      	adds	r2, r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6032      	str	r2, [r6, #0]
 80075a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075ac:	2301      	movs	r3, #1
 80075ae:	e09c      	b.n	80076ea <_printf_i+0x1e6>
 80075b0:	6833      	ldr	r3, [r6, #0]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	6031      	str	r1, [r6, #0]
 80075b8:	0606      	lsls	r6, r0, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xbc>
 80075bc:	681d      	ldr	r5, [r3, #0]
 80075be:	e003      	b.n	80075c8 <_printf_i+0xc4>
 80075c0:	0645      	lsls	r5, r0, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xb8>
 80075c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	da03      	bge.n	80075d4 <_printf_i+0xd0>
 80075cc:	232d      	movs	r3, #45	@ 0x2d
 80075ce:	426d      	negs	r5, r5
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d4:	4858      	ldr	r0, [pc, #352]	@ (8007738 <_printf_i+0x234>)
 80075d6:	230a      	movs	r3, #10
 80075d8:	e011      	b.n	80075fe <_printf_i+0xfa>
 80075da:	6821      	ldr	r1, [r4, #0]
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	0608      	lsls	r0, r1, #24
 80075e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075e4:	d402      	bmi.n	80075ec <_printf_i+0xe8>
 80075e6:	0649      	lsls	r1, r1, #25
 80075e8:	bf48      	it	mi
 80075ea:	b2ad      	uxthmi	r5, r5
 80075ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ee:	4852      	ldr	r0, [pc, #328]	@ (8007738 <_printf_i+0x234>)
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	bf14      	ite	ne
 80075f4:	230a      	movne	r3, #10
 80075f6:	2308      	moveq	r3, #8
 80075f8:	2100      	movs	r1, #0
 80075fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075fe:	6866      	ldr	r6, [r4, #4]
 8007600:	60a6      	str	r6, [r4, #8]
 8007602:	2e00      	cmp	r6, #0
 8007604:	db05      	blt.n	8007612 <_printf_i+0x10e>
 8007606:	6821      	ldr	r1, [r4, #0]
 8007608:	432e      	orrs	r6, r5
 800760a:	f021 0104 	bic.w	r1, r1, #4
 800760e:	6021      	str	r1, [r4, #0]
 8007610:	d04b      	beq.n	80076aa <_printf_i+0x1a6>
 8007612:	4616      	mov	r6, r2
 8007614:	fbb5 f1f3 	udiv	r1, r5, r3
 8007618:	fb03 5711 	mls	r7, r3, r1, r5
 800761c:	5dc7      	ldrb	r7, [r0, r7]
 800761e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007622:	462f      	mov	r7, r5
 8007624:	42bb      	cmp	r3, r7
 8007626:	460d      	mov	r5, r1
 8007628:	d9f4      	bls.n	8007614 <_printf_i+0x110>
 800762a:	2b08      	cmp	r3, #8
 800762c:	d10b      	bne.n	8007646 <_printf_i+0x142>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07df      	lsls	r7, r3, #31
 8007632:	d508      	bpl.n	8007646 <_printf_i+0x142>
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	4299      	cmp	r1, r3
 800763a:	bfde      	ittt	le
 800763c:	2330      	movle	r3, #48	@ 0x30
 800763e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007642:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007646:	1b92      	subs	r2, r2, r6
 8007648:	6122      	str	r2, [r4, #16]
 800764a:	f8cd a000 	str.w	sl, [sp]
 800764e:	464b      	mov	r3, r9
 8007650:	aa03      	add	r2, sp, #12
 8007652:	4621      	mov	r1, r4
 8007654:	4640      	mov	r0, r8
 8007656:	f7ff fee7 	bl	8007428 <_printf_common>
 800765a:	3001      	adds	r0, #1
 800765c:	d14a      	bne.n	80076f4 <_printf_i+0x1f0>
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	b004      	add	sp, #16
 8007664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	f043 0320 	orr.w	r3, r3, #32
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	4832      	ldr	r0, [pc, #200]	@ (800773c <_printf_i+0x238>)
 8007672:	2778      	movs	r7, #120	@ 0x78
 8007674:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	6831      	ldr	r1, [r6, #0]
 800767c:	061f      	lsls	r7, r3, #24
 800767e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007682:	d402      	bmi.n	800768a <_printf_i+0x186>
 8007684:	065f      	lsls	r7, r3, #25
 8007686:	bf48      	it	mi
 8007688:	b2ad      	uxthmi	r5, r5
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	07d9      	lsls	r1, r3, #31
 800768e:	bf44      	itt	mi
 8007690:	f043 0320 	orrmi.w	r3, r3, #32
 8007694:	6023      	strmi	r3, [r4, #0]
 8007696:	b11d      	cbz	r5, 80076a0 <_printf_i+0x19c>
 8007698:	2310      	movs	r3, #16
 800769a:	e7ad      	b.n	80075f8 <_printf_i+0xf4>
 800769c:	4826      	ldr	r0, [pc, #152]	@ (8007738 <_printf_i+0x234>)
 800769e:	e7e9      	b.n	8007674 <_printf_i+0x170>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	f023 0320 	bic.w	r3, r3, #32
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	e7f6      	b.n	8007698 <_printf_i+0x194>
 80076aa:	4616      	mov	r6, r2
 80076ac:	e7bd      	b.n	800762a <_printf_i+0x126>
 80076ae:	6833      	ldr	r3, [r6, #0]
 80076b0:	6825      	ldr	r5, [r4, #0]
 80076b2:	6961      	ldr	r1, [r4, #20]
 80076b4:	1d18      	adds	r0, r3, #4
 80076b6:	6030      	str	r0, [r6, #0]
 80076b8:	062e      	lsls	r6, r5, #24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	d501      	bpl.n	80076c2 <_printf_i+0x1be>
 80076be:	6019      	str	r1, [r3, #0]
 80076c0:	e002      	b.n	80076c8 <_printf_i+0x1c4>
 80076c2:	0668      	lsls	r0, r5, #25
 80076c4:	d5fb      	bpl.n	80076be <_printf_i+0x1ba>
 80076c6:	8019      	strh	r1, [r3, #0]
 80076c8:	2300      	movs	r3, #0
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	4616      	mov	r6, r2
 80076ce:	e7bc      	b.n	800764a <_printf_i+0x146>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	1d1a      	adds	r2, r3, #4
 80076d4:	6032      	str	r2, [r6, #0]
 80076d6:	681e      	ldr	r6, [r3, #0]
 80076d8:	6862      	ldr	r2, [r4, #4]
 80076da:	2100      	movs	r1, #0
 80076dc:	4630      	mov	r0, r6
 80076de:	f7f8 fd7f 	bl	80001e0 <memchr>
 80076e2:	b108      	cbz	r0, 80076e8 <_printf_i+0x1e4>
 80076e4:	1b80      	subs	r0, r0, r6
 80076e6:	6060      	str	r0, [r4, #4]
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	2300      	movs	r3, #0
 80076ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076f2:	e7aa      	b.n	800764a <_printf_i+0x146>
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	4632      	mov	r2, r6
 80076f8:	4649      	mov	r1, r9
 80076fa:	4640      	mov	r0, r8
 80076fc:	47d0      	blx	sl
 80076fe:	3001      	adds	r0, #1
 8007700:	d0ad      	beq.n	800765e <_printf_i+0x15a>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	079b      	lsls	r3, r3, #30
 8007706:	d413      	bmi.n	8007730 <_printf_i+0x22c>
 8007708:	68e0      	ldr	r0, [r4, #12]
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	4298      	cmp	r0, r3
 800770e:	bfb8      	it	lt
 8007710:	4618      	movlt	r0, r3
 8007712:	e7a6      	b.n	8007662 <_printf_i+0x15e>
 8007714:	2301      	movs	r3, #1
 8007716:	4632      	mov	r2, r6
 8007718:	4649      	mov	r1, r9
 800771a:	4640      	mov	r0, r8
 800771c:	47d0      	blx	sl
 800771e:	3001      	adds	r0, #1
 8007720:	d09d      	beq.n	800765e <_printf_i+0x15a>
 8007722:	3501      	adds	r5, #1
 8007724:	68e3      	ldr	r3, [r4, #12]
 8007726:	9903      	ldr	r1, [sp, #12]
 8007728:	1a5b      	subs	r3, r3, r1
 800772a:	42ab      	cmp	r3, r5
 800772c:	dcf2      	bgt.n	8007714 <_printf_i+0x210>
 800772e:	e7eb      	b.n	8007708 <_printf_i+0x204>
 8007730:	2500      	movs	r5, #0
 8007732:	f104 0619 	add.w	r6, r4, #25
 8007736:	e7f5      	b.n	8007724 <_printf_i+0x220>
 8007738:	08008028 	.word	0x08008028
 800773c:	08008039 	.word	0x08008039

08007740 <__sflush_r>:
 8007740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	0716      	lsls	r6, r2, #28
 800774a:	4605      	mov	r5, r0
 800774c:	460c      	mov	r4, r1
 800774e:	d454      	bmi.n	80077fa <__sflush_r+0xba>
 8007750:	684b      	ldr	r3, [r1, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dc02      	bgt.n	800775c <__sflush_r+0x1c>
 8007756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	dd48      	ble.n	80077ee <__sflush_r+0xae>
 800775c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800775e:	2e00      	cmp	r6, #0
 8007760:	d045      	beq.n	80077ee <__sflush_r+0xae>
 8007762:	2300      	movs	r3, #0
 8007764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007768:	682f      	ldr	r7, [r5, #0]
 800776a:	6a21      	ldr	r1, [r4, #32]
 800776c:	602b      	str	r3, [r5, #0]
 800776e:	d030      	beq.n	80077d2 <__sflush_r+0x92>
 8007770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	0759      	lsls	r1, r3, #29
 8007776:	d505      	bpl.n	8007784 <__sflush_r+0x44>
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800777e:	b10b      	cbz	r3, 8007784 <__sflush_r+0x44>
 8007780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	2300      	movs	r3, #0
 8007786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	4628      	mov	r0, r5
 800778c:	47b0      	blx	r6
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	d106      	bne.n	80077a2 <__sflush_r+0x62>
 8007794:	6829      	ldr	r1, [r5, #0]
 8007796:	291d      	cmp	r1, #29
 8007798:	d82b      	bhi.n	80077f2 <__sflush_r+0xb2>
 800779a:	4a2a      	ldr	r2, [pc, #168]	@ (8007844 <__sflush_r+0x104>)
 800779c:	40ca      	lsrs	r2, r1
 800779e:	07d6      	lsls	r6, r2, #31
 80077a0:	d527      	bpl.n	80077f2 <__sflush_r+0xb2>
 80077a2:	2200      	movs	r2, #0
 80077a4:	6062      	str	r2, [r4, #4]
 80077a6:	04d9      	lsls	r1, r3, #19
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	d504      	bpl.n	80077b8 <__sflush_r+0x78>
 80077ae:	1c42      	adds	r2, r0, #1
 80077b0:	d101      	bne.n	80077b6 <__sflush_r+0x76>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	b903      	cbnz	r3, 80077b8 <__sflush_r+0x78>
 80077b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80077b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ba:	602f      	str	r7, [r5, #0]
 80077bc:	b1b9      	cbz	r1, 80077ee <__sflush_r+0xae>
 80077be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077c2:	4299      	cmp	r1, r3
 80077c4:	d002      	beq.n	80077cc <__sflush_r+0x8c>
 80077c6:	4628      	mov	r0, r5
 80077c8:	f7ff fbd6 	bl	8006f78 <_free_r>
 80077cc:	2300      	movs	r3, #0
 80077ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80077d0:	e00d      	b.n	80077ee <__sflush_r+0xae>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b0      	blx	r6
 80077d8:	4602      	mov	r2, r0
 80077da:	1c50      	adds	r0, r2, #1
 80077dc:	d1c9      	bne.n	8007772 <__sflush_r+0x32>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0c6      	beq.n	8007772 <__sflush_r+0x32>
 80077e4:	2b1d      	cmp	r3, #29
 80077e6:	d001      	beq.n	80077ec <__sflush_r+0xac>
 80077e8:	2b16      	cmp	r3, #22
 80077ea:	d11e      	bne.n	800782a <__sflush_r+0xea>
 80077ec:	602f      	str	r7, [r5, #0]
 80077ee:	2000      	movs	r0, #0
 80077f0:	e022      	b.n	8007838 <__sflush_r+0xf8>
 80077f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f6:	b21b      	sxth	r3, r3
 80077f8:	e01b      	b.n	8007832 <__sflush_r+0xf2>
 80077fa:	690f      	ldr	r7, [r1, #16]
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	d0f6      	beq.n	80077ee <__sflush_r+0xae>
 8007800:	0793      	lsls	r3, r2, #30
 8007802:	680e      	ldr	r6, [r1, #0]
 8007804:	bf08      	it	eq
 8007806:	694b      	ldreq	r3, [r1, #20]
 8007808:	600f      	str	r7, [r1, #0]
 800780a:	bf18      	it	ne
 800780c:	2300      	movne	r3, #0
 800780e:	eba6 0807 	sub.w	r8, r6, r7
 8007812:	608b      	str	r3, [r1, #8]
 8007814:	f1b8 0f00 	cmp.w	r8, #0
 8007818:	dde9      	ble.n	80077ee <__sflush_r+0xae>
 800781a:	6a21      	ldr	r1, [r4, #32]
 800781c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800781e:	4643      	mov	r3, r8
 8007820:	463a      	mov	r2, r7
 8007822:	4628      	mov	r0, r5
 8007824:	47b0      	blx	r6
 8007826:	2800      	cmp	r0, #0
 8007828:	dc08      	bgt.n	800783c <__sflush_r+0xfc>
 800782a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783c:	4407      	add	r7, r0
 800783e:	eba8 0800 	sub.w	r8, r8, r0
 8007842:	e7e7      	b.n	8007814 <__sflush_r+0xd4>
 8007844:	20400001 	.word	0x20400001

08007848 <_fflush_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b913      	cbnz	r3, 8007858 <_fflush_r+0x10>
 8007852:	2500      	movs	r5, #0
 8007854:	4628      	mov	r0, r5
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	b118      	cbz	r0, 8007862 <_fflush_r+0x1a>
 800785a:	6a03      	ldr	r3, [r0, #32]
 800785c:	b90b      	cbnz	r3, 8007862 <_fflush_r+0x1a>
 800785e:	f7ff fa55 	bl	8006d0c <__sinit>
 8007862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f3      	beq.n	8007852 <_fflush_r+0xa>
 800786a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800786c:	07d0      	lsls	r0, r2, #31
 800786e:	d404      	bmi.n	800787a <_fflush_r+0x32>
 8007870:	0599      	lsls	r1, r3, #22
 8007872:	d402      	bmi.n	800787a <_fflush_r+0x32>
 8007874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007876:	f7ff fb5e 	bl	8006f36 <__retarget_lock_acquire_recursive>
 800787a:	4628      	mov	r0, r5
 800787c:	4621      	mov	r1, r4
 800787e:	f7ff ff5f 	bl	8007740 <__sflush_r>
 8007882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007884:	07da      	lsls	r2, r3, #31
 8007886:	4605      	mov	r5, r0
 8007888:	d4e4      	bmi.n	8007854 <_fflush_r+0xc>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	059b      	lsls	r3, r3, #22
 800788e:	d4e1      	bmi.n	8007854 <_fflush_r+0xc>
 8007890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007892:	f7ff fb51 	bl	8006f38 <__retarget_lock_release_recursive>
 8007896:	e7dd      	b.n	8007854 <_fflush_r+0xc>

08007898 <fiprintf>:
 8007898:	b40e      	push	{r1, r2, r3}
 800789a:	b503      	push	{r0, r1, lr}
 800789c:	4601      	mov	r1, r0
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	4805      	ldr	r0, [pc, #20]	@ (80078b8 <fiprintf+0x20>)
 80078a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a6:	6800      	ldr	r0, [r0, #0]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	f000 f89d 	bl	80079e8 <_vfiprintf_r>
 80078ae:	b002      	add	sp, #8
 80078b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b4:	b003      	add	sp, #12
 80078b6:	4770      	bx	lr
 80078b8:	20000084 	.word	0x20000084

080078bc <memmove>:
 80078bc:	4288      	cmp	r0, r1
 80078be:	b510      	push	{r4, lr}
 80078c0:	eb01 0402 	add.w	r4, r1, r2
 80078c4:	d902      	bls.n	80078cc <memmove+0x10>
 80078c6:	4284      	cmp	r4, r0
 80078c8:	4623      	mov	r3, r4
 80078ca:	d807      	bhi.n	80078dc <memmove+0x20>
 80078cc:	1e43      	subs	r3, r0, #1
 80078ce:	42a1      	cmp	r1, r4
 80078d0:	d008      	beq.n	80078e4 <memmove+0x28>
 80078d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078da:	e7f8      	b.n	80078ce <memmove+0x12>
 80078dc:	4402      	add	r2, r0
 80078de:	4601      	mov	r1, r0
 80078e0:	428a      	cmp	r2, r1
 80078e2:	d100      	bne.n	80078e6 <memmove+0x2a>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ee:	e7f7      	b.n	80078e0 <memmove+0x24>

080078f0 <_sbrk_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	@ (800790c <_sbrk_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa f97a 	bl	8001bf4 <_sbrk>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_sbrk_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_sbrk_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20000718 	.word	0x20000718

08007910 <memcpy>:
 8007910:	440a      	add	r2, r1
 8007912:	4291      	cmp	r1, r2
 8007914:	f100 33ff 	add.w	r3, r0, #4294967295
 8007918:	d100      	bne.n	800791c <memcpy+0xc>
 800791a:	4770      	bx	lr
 800791c:	b510      	push	{r4, lr}
 800791e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007926:	4291      	cmp	r1, r2
 8007928:	d1f9      	bne.n	800791e <memcpy+0xe>
 800792a:	bd10      	pop	{r4, pc}

0800792c <abort>:
 800792c:	b508      	push	{r3, lr}
 800792e:	2006      	movs	r0, #6
 8007930:	f000 fa2e 	bl	8007d90 <raise>
 8007934:	2001      	movs	r0, #1
 8007936:	f7fa f8e5 	bl	8001b04 <_exit>

0800793a <_realloc_r>:
 800793a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793e:	4607      	mov	r7, r0
 8007940:	4614      	mov	r4, r2
 8007942:	460d      	mov	r5, r1
 8007944:	b921      	cbnz	r1, 8007950 <_realloc_r+0x16>
 8007946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	4611      	mov	r1, r2
 800794c:	f7ff bb88 	b.w	8007060 <_malloc_r>
 8007950:	b92a      	cbnz	r2, 800795e <_realloc_r+0x24>
 8007952:	f7ff fb11 	bl	8006f78 <_free_r>
 8007956:	4625      	mov	r5, r4
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795e:	f000 fa33 	bl	8007dc8 <_malloc_usable_size_r>
 8007962:	4284      	cmp	r4, r0
 8007964:	4606      	mov	r6, r0
 8007966:	d802      	bhi.n	800796e <_realloc_r+0x34>
 8007968:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800796c:	d8f4      	bhi.n	8007958 <_realloc_r+0x1e>
 800796e:	4621      	mov	r1, r4
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fb75 	bl	8007060 <_malloc_r>
 8007976:	4680      	mov	r8, r0
 8007978:	b908      	cbnz	r0, 800797e <_realloc_r+0x44>
 800797a:	4645      	mov	r5, r8
 800797c:	e7ec      	b.n	8007958 <_realloc_r+0x1e>
 800797e:	42b4      	cmp	r4, r6
 8007980:	4622      	mov	r2, r4
 8007982:	4629      	mov	r1, r5
 8007984:	bf28      	it	cs
 8007986:	4632      	movcs	r2, r6
 8007988:	f7ff ffc2 	bl	8007910 <memcpy>
 800798c:	4629      	mov	r1, r5
 800798e:	4638      	mov	r0, r7
 8007990:	f7ff faf2 	bl	8006f78 <_free_r>
 8007994:	e7f1      	b.n	800797a <_realloc_r+0x40>

08007996 <__sfputc_r>:
 8007996:	6893      	ldr	r3, [r2, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	b410      	push	{r4}
 800799e:	6093      	str	r3, [r2, #8]
 80079a0:	da08      	bge.n	80079b4 <__sfputc_r+0x1e>
 80079a2:	6994      	ldr	r4, [r2, #24]
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	db01      	blt.n	80079ac <__sfputc_r+0x16>
 80079a8:	290a      	cmp	r1, #10
 80079aa:	d103      	bne.n	80079b4 <__sfputc_r+0x1e>
 80079ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b0:	f000 b932 	b.w	8007c18 <__swbuf_r>
 80079b4:	6813      	ldr	r3, [r2, #0]
 80079b6:	1c58      	adds	r0, r3, #1
 80079b8:	6010      	str	r0, [r2, #0]
 80079ba:	7019      	strb	r1, [r3, #0]
 80079bc:	4608      	mov	r0, r1
 80079be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <__sfputs_r>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	4606      	mov	r6, r0
 80079c8:	460f      	mov	r7, r1
 80079ca:	4614      	mov	r4, r2
 80079cc:	18d5      	adds	r5, r2, r3
 80079ce:	42ac      	cmp	r4, r5
 80079d0:	d101      	bne.n	80079d6 <__sfputs_r+0x12>
 80079d2:	2000      	movs	r0, #0
 80079d4:	e007      	b.n	80079e6 <__sfputs_r+0x22>
 80079d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079da:	463a      	mov	r2, r7
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff ffda 	bl	8007996 <__sfputc_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d1f3      	bne.n	80079ce <__sfputs_r+0xa>
 80079e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079e8 <_vfiprintf_r>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460d      	mov	r5, r1
 80079ee:	b09d      	sub	sp, #116	@ 0x74
 80079f0:	4614      	mov	r4, r2
 80079f2:	4698      	mov	r8, r3
 80079f4:	4606      	mov	r6, r0
 80079f6:	b118      	cbz	r0, 8007a00 <_vfiprintf_r+0x18>
 80079f8:	6a03      	ldr	r3, [r0, #32]
 80079fa:	b90b      	cbnz	r3, 8007a00 <_vfiprintf_r+0x18>
 80079fc:	f7ff f986 	bl	8006d0c <__sinit>
 8007a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a02:	07d9      	lsls	r1, r3, #31
 8007a04:	d405      	bmi.n	8007a12 <_vfiprintf_r+0x2a>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	059a      	lsls	r2, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_vfiprintf_r+0x2a>
 8007a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a0e:	f7ff fa92 	bl	8006f36 <__retarget_lock_acquire_recursive>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	071b      	lsls	r3, r3, #28
 8007a16:	d501      	bpl.n	8007a1c <_vfiprintf_r+0x34>
 8007a18:	692b      	ldr	r3, [r5, #16]
 8007a1a:	b99b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x5c>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 f938 	bl	8007c94 <__swsetup_r>
 8007a24:	b170      	cbz	r0, 8007a44 <_vfiprintf_r+0x5c>
 8007a26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a28:	07dc      	lsls	r4, r3, #31
 8007a2a:	d504      	bpl.n	8007a36 <_vfiprintf_r+0x4e>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	b01d      	add	sp, #116	@ 0x74
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	89ab      	ldrh	r3, [r5, #12]
 8007a38:	0598      	lsls	r0, r3, #22
 8007a3a:	d4f7      	bmi.n	8007a2c <_vfiprintf_r+0x44>
 8007a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a3e:	f7ff fa7b 	bl	8006f38 <__retarget_lock_release_recursive>
 8007a42:	e7f3      	b.n	8007a2c <_vfiprintf_r+0x44>
 8007a44:	2300      	movs	r3, #0
 8007a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a52:	2330      	movs	r3, #48	@ 0x30
 8007a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c04 <_vfiprintf_r+0x21c>
 8007a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a5c:	f04f 0901 	mov.w	r9, #1
 8007a60:	4623      	mov	r3, r4
 8007a62:	469a      	mov	sl, r3
 8007a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a68:	b10a      	cbz	r2, 8007a6e <_vfiprintf_r+0x86>
 8007a6a:	2a25      	cmp	r2, #37	@ 0x25
 8007a6c:	d1f9      	bne.n	8007a62 <_vfiprintf_r+0x7a>
 8007a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a72:	d00b      	beq.n	8007a8c <_vfiprintf_r+0xa4>
 8007a74:	465b      	mov	r3, fp
 8007a76:	4622      	mov	r2, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff ffa2 	bl	80079c4 <__sfputs_r>
 8007a80:	3001      	adds	r0, #1
 8007a82:	f000 80a7 	beq.w	8007bd4 <_vfiprintf_r+0x1ec>
 8007a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a88:	445a      	add	r2, fp
 8007a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 809f 	beq.w	8007bd4 <_vfiprintf_r+0x1ec>
 8007a96:	2300      	movs	r3, #0
 8007a98:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa0:	f10a 0a01 	add.w	sl, sl, #1
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aac:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aae:	4654      	mov	r4, sl
 8007ab0:	2205      	movs	r2, #5
 8007ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab6:	4853      	ldr	r0, [pc, #332]	@ (8007c04 <_vfiprintf_r+0x21c>)
 8007ab8:	f7f8 fb92 	bl	80001e0 <memchr>
 8007abc:	9a04      	ldr	r2, [sp, #16]
 8007abe:	b9d8      	cbnz	r0, 8007af8 <_vfiprintf_r+0x110>
 8007ac0:	06d1      	lsls	r1, r2, #27
 8007ac2:	bf44      	itt	mi
 8007ac4:	2320      	movmi	r3, #32
 8007ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aca:	0713      	lsls	r3, r2, #28
 8007acc:	bf44      	itt	mi
 8007ace:	232b      	movmi	r3, #43	@ 0x2b
 8007ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ada:	d015      	beq.n	8007b08 <_vfiprintf_r+0x120>
 8007adc:	9a07      	ldr	r2, [sp, #28]
 8007ade:	4654      	mov	r4, sl
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aec:	3b30      	subs	r3, #48	@ 0x30
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d94b      	bls.n	8007b8a <_vfiprintf_r+0x1a2>
 8007af2:	b1b0      	cbz	r0, 8007b22 <_vfiprintf_r+0x13a>
 8007af4:	9207      	str	r2, [sp, #28]
 8007af6:	e014      	b.n	8007b22 <_vfiprintf_r+0x13a>
 8007af8:	eba0 0308 	sub.w	r3, r0, r8
 8007afc:	fa09 f303 	lsl.w	r3, r9, r3
 8007b00:	4313      	orrs	r3, r2
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	46a2      	mov	sl, r4
 8007b06:	e7d2      	b.n	8007aae <_vfiprintf_r+0xc6>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	9103      	str	r1, [sp, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	bfbb      	ittet	lt
 8007b14:	425b      	neglt	r3, r3
 8007b16:	f042 0202 	orrlt.w	r2, r2, #2
 8007b1a:	9307      	strge	r3, [sp, #28]
 8007b1c:	9307      	strlt	r3, [sp, #28]
 8007b1e:	bfb8      	it	lt
 8007b20:	9204      	strlt	r2, [sp, #16]
 8007b22:	7823      	ldrb	r3, [r4, #0]
 8007b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b26:	d10a      	bne.n	8007b3e <_vfiprintf_r+0x156>
 8007b28:	7863      	ldrb	r3, [r4, #1]
 8007b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b2c:	d132      	bne.n	8007b94 <_vfiprintf_r+0x1ac>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	9203      	str	r2, [sp, #12]
 8007b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b3a:	3402      	adds	r4, #2
 8007b3c:	9305      	str	r3, [sp, #20]
 8007b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c14 <_vfiprintf_r+0x22c>
 8007b42:	7821      	ldrb	r1, [r4, #0]
 8007b44:	2203      	movs	r2, #3
 8007b46:	4650      	mov	r0, sl
 8007b48:	f7f8 fb4a 	bl	80001e0 <memchr>
 8007b4c:	b138      	cbz	r0, 8007b5e <_vfiprintf_r+0x176>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	eba0 000a 	sub.w	r0, r0, sl
 8007b54:	2240      	movs	r2, #64	@ 0x40
 8007b56:	4082      	lsls	r2, r0
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b62:	4829      	ldr	r0, [pc, #164]	@ (8007c08 <_vfiprintf_r+0x220>)
 8007b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b68:	2206      	movs	r2, #6
 8007b6a:	f7f8 fb39 	bl	80001e0 <memchr>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d03f      	beq.n	8007bf2 <_vfiprintf_r+0x20a>
 8007b72:	4b26      	ldr	r3, [pc, #152]	@ (8007c0c <_vfiprintf_r+0x224>)
 8007b74:	bb1b      	cbnz	r3, 8007bbe <_vfiprintf_r+0x1d6>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	3307      	adds	r3, #7
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	3308      	adds	r3, #8
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b84:	443b      	add	r3, r7
 8007b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b88:	e76a      	b.n	8007a60 <_vfiprintf_r+0x78>
 8007b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b8e:	460c      	mov	r4, r1
 8007b90:	2001      	movs	r0, #1
 8007b92:	e7a8      	b.n	8007ae6 <_vfiprintf_r+0xfe>
 8007b94:	2300      	movs	r3, #0
 8007b96:	3401      	adds	r4, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f04f 0c0a 	mov.w	ip, #10
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba6:	3a30      	subs	r2, #48	@ 0x30
 8007ba8:	2a09      	cmp	r2, #9
 8007baa:	d903      	bls.n	8007bb4 <_vfiprintf_r+0x1cc>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0c6      	beq.n	8007b3e <_vfiprintf_r+0x156>
 8007bb0:	9105      	str	r1, [sp, #20]
 8007bb2:	e7c4      	b.n	8007b3e <_vfiprintf_r+0x156>
 8007bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb8:	4604      	mov	r4, r0
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7f0      	b.n	8007ba0 <_vfiprintf_r+0x1b8>
 8007bbe:	ab03      	add	r3, sp, #12
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <_vfiprintf_r+0x228>)
 8007bc6:	a904      	add	r1, sp, #16
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f3af 8000 	nop.w
 8007bce:	4607      	mov	r7, r0
 8007bd0:	1c78      	adds	r0, r7, #1
 8007bd2:	d1d6      	bne.n	8007b82 <_vfiprintf_r+0x19a>
 8007bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_vfiprintf_r+0x1fe>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	059a      	lsls	r2, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_vfiprintf_r+0x1fe>
 8007be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007be2:	f7ff f9a9 	bl	8006f38 <__retarget_lock_release_recursive>
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	065b      	lsls	r3, r3, #25
 8007bea:	f53f af1f 	bmi.w	8007a2c <_vfiprintf_r+0x44>
 8007bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bf0:	e71e      	b.n	8007a30 <_vfiprintf_r+0x48>
 8007bf2:	ab03      	add	r3, sp, #12
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <_vfiprintf_r+0x228>)
 8007bfa:	a904      	add	r1, sp, #16
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fc81 	bl	8007504 <_printf_i>
 8007c02:	e7e4      	b.n	8007bce <_vfiprintf_r+0x1e6>
 8007c04:	08008017 	.word	0x08008017
 8007c08:	08008021 	.word	0x08008021
 8007c0c:	00000000 	.word	0x00000000
 8007c10:	080079c5 	.word	0x080079c5
 8007c14:	0800801d 	.word	0x0800801d

08007c18 <__swbuf_r>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	460e      	mov	r6, r1
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	4605      	mov	r5, r0
 8007c20:	b118      	cbz	r0, 8007c2a <__swbuf_r+0x12>
 8007c22:	6a03      	ldr	r3, [r0, #32]
 8007c24:	b90b      	cbnz	r3, 8007c2a <__swbuf_r+0x12>
 8007c26:	f7ff f871 	bl	8006d0c <__sinit>
 8007c2a:	69a3      	ldr	r3, [r4, #24]
 8007c2c:	60a3      	str	r3, [r4, #8]
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	071a      	lsls	r2, r3, #28
 8007c32:	d501      	bpl.n	8007c38 <__swbuf_r+0x20>
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	b943      	cbnz	r3, 8007c4a <__swbuf_r+0x32>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f82a 	bl	8007c94 <__swsetup_r>
 8007c40:	b118      	cbz	r0, 8007c4a <__swbuf_r+0x32>
 8007c42:	f04f 37ff 	mov.w	r7, #4294967295
 8007c46:	4638      	mov	r0, r7
 8007c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	1a98      	subs	r0, r3, r2
 8007c50:	6963      	ldr	r3, [r4, #20]
 8007c52:	b2f6      	uxtb	r6, r6
 8007c54:	4283      	cmp	r3, r0
 8007c56:	4637      	mov	r7, r6
 8007c58:	dc05      	bgt.n	8007c66 <__swbuf_r+0x4e>
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7ff fdf3 	bl	8007848 <_fflush_r>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d1ed      	bne.n	8007c42 <__swbuf_r+0x2a>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	701e      	strb	r6, [r3, #0]
 8007c74:	6962      	ldr	r2, [r4, #20]
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d004      	beq.n	8007c86 <__swbuf_r+0x6e>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d5e1      	bpl.n	8007c46 <__swbuf_r+0x2e>
 8007c82:	2e0a      	cmp	r6, #10
 8007c84:	d1df      	bne.n	8007c46 <__swbuf_r+0x2e>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff fddd 	bl	8007848 <_fflush_r>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d0d9      	beq.n	8007c46 <__swbuf_r+0x2e>
 8007c92:	e7d6      	b.n	8007c42 <__swbuf_r+0x2a>

08007c94 <__swsetup_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4b29      	ldr	r3, [pc, #164]	@ (8007d3c <__swsetup_r+0xa8>)
 8007c98:	4605      	mov	r5, r0
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	b118      	cbz	r0, 8007ca8 <__swsetup_r+0x14>
 8007ca0:	6a03      	ldr	r3, [r0, #32]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <__swsetup_r+0x14>
 8007ca4:	f7ff f832 	bl	8006d0c <__sinit>
 8007ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cac:	0719      	lsls	r1, r3, #28
 8007cae:	d422      	bmi.n	8007cf6 <__swsetup_r+0x62>
 8007cb0:	06da      	lsls	r2, r3, #27
 8007cb2:	d407      	bmi.n	8007cc4 <__swsetup_r+0x30>
 8007cb4:	2209      	movs	r2, #9
 8007cb6:	602a      	str	r2, [r5, #0]
 8007cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	e033      	b.n	8007d2c <__swsetup_r+0x98>
 8007cc4:	0758      	lsls	r0, r3, #29
 8007cc6:	d512      	bpl.n	8007cee <__swsetup_r+0x5a>
 8007cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cca:	b141      	cbz	r1, 8007cde <__swsetup_r+0x4a>
 8007ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <__swsetup_r+0x46>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f7ff f94f 	bl	8006f78 <_free_r>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b94b      	cbnz	r3, 8007d0e <__swsetup_r+0x7a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d04:	d003      	beq.n	8007d0e <__swsetup_r+0x7a>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 f88b 	bl	8007e24 <__smakebuf_r>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f013 0201 	ands.w	r2, r3, #1
 8007d16:	d00a      	beq.n	8007d2e <__swsetup_r+0x9a>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	60a2      	str	r2, [r4, #8]
 8007d1c:	6962      	ldr	r2, [r4, #20]
 8007d1e:	4252      	negs	r2, r2
 8007d20:	61a2      	str	r2, [r4, #24]
 8007d22:	6922      	ldr	r2, [r4, #16]
 8007d24:	b942      	cbnz	r2, 8007d38 <__swsetup_r+0xa4>
 8007d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d2a:	d1c5      	bne.n	8007cb8 <__swsetup_r+0x24>
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	0799      	lsls	r1, r3, #30
 8007d30:	bf58      	it	pl
 8007d32:	6962      	ldrpl	r2, [r4, #20]
 8007d34:	60a2      	str	r2, [r4, #8]
 8007d36:	e7f4      	b.n	8007d22 <__swsetup_r+0x8e>
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e7f7      	b.n	8007d2c <__swsetup_r+0x98>
 8007d3c:	20000084 	.word	0x20000084

08007d40 <_raise_r>:
 8007d40:	291f      	cmp	r1, #31
 8007d42:	b538      	push	{r3, r4, r5, lr}
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	d904      	bls.n	8007d54 <_raise_r+0x14>
 8007d4a:	2316      	movs	r3, #22
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d56:	b112      	cbz	r2, 8007d5e <_raise_r+0x1e>
 8007d58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d5c:	b94b      	cbnz	r3, 8007d72 <_raise_r+0x32>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 f830 	bl	8007dc4 <_getpid_r>
 8007d64:	4622      	mov	r2, r4
 8007d66:	4601      	mov	r1, r0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d6e:	f000 b817 	b.w	8007da0 <_kill_r>
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d00a      	beq.n	8007d8c <_raise_r+0x4c>
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	d103      	bne.n	8007d82 <_raise_r+0x42>
 8007d7a:	2316      	movs	r3, #22
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	2001      	movs	r0, #1
 8007d80:	e7e7      	b.n	8007d52 <_raise_r+0x12>
 8007d82:	2100      	movs	r1, #0
 8007d84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4798      	blx	r3
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7e0      	b.n	8007d52 <_raise_r+0x12>

08007d90 <raise>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	@ (8007d9c <raise+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f7ff bfd3 	b.w	8007d40 <_raise_r>
 8007d9a:	bf00      	nop
 8007d9c:	20000084 	.word	0x20000084

08007da0 <_kill_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d07      	ldr	r5, [pc, #28]	@ (8007dc0 <_kill_r+0x20>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f7f9 fe99 	bl	8001ae4 <_kill>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d102      	bne.n	8007dbc <_kill_r+0x1c>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	b103      	cbz	r3, 8007dbc <_kill_r+0x1c>
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000718 	.word	0x20000718

08007dc4 <_getpid_r>:
 8007dc4:	f7f9 be86 	b.w	8001ad4 <_getpid>

08007dc8 <_malloc_usable_size_r>:
 8007dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dcc:	1f18      	subs	r0, r3, #4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfbc      	itt	lt
 8007dd2:	580b      	ldrlt	r3, [r1, r0]
 8007dd4:	18c0      	addlt	r0, r0, r3
 8007dd6:	4770      	bx	lr

08007dd8 <__swhatbuf_r>:
 8007dd8:	b570      	push	{r4, r5, r6, lr}
 8007dda:	460c      	mov	r4, r1
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	b096      	sub	sp, #88	@ 0x58
 8007de4:	4615      	mov	r5, r2
 8007de6:	461e      	mov	r6, r3
 8007de8:	da0d      	bge.n	8007e06 <__swhatbuf_r+0x2e>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007df0:	f04f 0100 	mov.w	r1, #0
 8007df4:	bf14      	ite	ne
 8007df6:	2340      	movne	r3, #64	@ 0x40
 8007df8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	6031      	str	r1, [r6, #0]
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	b016      	add	sp, #88	@ 0x58
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	466a      	mov	r2, sp
 8007e08:	f000 f848 	bl	8007e9c <_fstat_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dbec      	blt.n	8007dea <__swhatbuf_r+0x12>
 8007e10:	9901      	ldr	r1, [sp, #4]
 8007e12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e1a:	4259      	negs	r1, r3
 8007e1c:	4159      	adcs	r1, r3
 8007e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e22:	e7eb      	b.n	8007dfc <__swhatbuf_r+0x24>

08007e24 <__smakebuf_r>:
 8007e24:	898b      	ldrh	r3, [r1, #12]
 8007e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e28:	079d      	lsls	r5, r3, #30
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	d507      	bpl.n	8007e40 <__smakebuf_r+0x1c>
 8007e30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	6163      	str	r3, [r4, #20]
 8007e3c:	b003      	add	sp, #12
 8007e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e40:	ab01      	add	r3, sp, #4
 8007e42:	466a      	mov	r2, sp
 8007e44:	f7ff ffc8 	bl	8007dd8 <__swhatbuf_r>
 8007e48:	9f00      	ldr	r7, [sp, #0]
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff f906 	bl	8007060 <_malloc_r>
 8007e54:	b948      	cbnz	r0, 8007e6a <__smakebuf_r+0x46>
 8007e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5a:	059a      	lsls	r2, r3, #22
 8007e5c:	d4ee      	bmi.n	8007e3c <__smakebuf_r+0x18>
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	f043 0302 	orr.w	r3, r3, #2
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	e7e2      	b.n	8007e30 <__smakebuf_r+0xc>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	6020      	str	r0, [r4, #0]
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e7a:	b15b      	cbz	r3, 8007e94 <__smakebuf_r+0x70>
 8007e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f81d 	bl	8007ec0 <_isatty_r>
 8007e86:	b128      	cbz	r0, 8007e94 <__smakebuf_r+0x70>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	431d      	orrs	r5, r3
 8007e98:	81a5      	strh	r5, [r4, #12]
 8007e9a:	e7cf      	b.n	8007e3c <__smakebuf_r+0x18>

08007e9c <_fstat_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d07      	ldr	r5, [pc, #28]	@ (8007ebc <_fstat_r+0x20>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	f7f9 fe7b 	bl	8001ba4 <_fstat>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	d102      	bne.n	8007eb8 <_fstat_r+0x1c>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	b103      	cbz	r3, 8007eb8 <_fstat_r+0x1c>
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	bd38      	pop	{r3, r4, r5, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000718 	.word	0x20000718

08007ec0 <_isatty_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d06      	ldr	r5, [pc, #24]	@ (8007edc <_isatty_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fe7a 	bl	8001bc4 <_isatty>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_isatty_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_isatty_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000718 	.word	0x20000718

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
